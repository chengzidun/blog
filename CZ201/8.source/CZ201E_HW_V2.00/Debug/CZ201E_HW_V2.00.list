
CZ201E_HW_V2.00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08002950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000220  20000028  08002974  00020028  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000248  08002974  00020248  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010d67  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003840  00000000  00000000  00030db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e6d  00000000  00000000  000345f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009a0  00000000  00000000  0003a460  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001160  00000000  00000000  0003ae00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006769  00000000  00000000  0003bf60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000327d  00000000  00000000  000426c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00045946  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000181c  00000000  00000000  000459c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028b8 	.word	0x080028b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	080028b8 	.word	0x080028b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <beep_oscillation>:

//1ms进入定时器, 2ms为一个周期, 最高频率是500Hz
//half_cycle_ms是点亮或熄灭时间, time_ms是闪烁有效时间
//half_cycle_ms=0点亮不闪烁, time_ms=0时间直到宇宙毁灭
void beep_oscillation(uint32_t half_cycle_ms, uint32_t time_ms)
{
 8000220:	b510      	push	{r4, lr}
	if(beep_flag == 0)
 8000222:	4c0d      	ldr	r4, [pc, #52]	; (8000258 <beep_oscillation+0x38>)
 8000224:	7823      	ldrb	r3, [r4, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d10e      	bne.n	8000248 <beep_oscillation+0x28>
	{
		beep_half_cycle_ms = half_cycle_ms;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <beep_oscillation+0x3c>)
 800022c:	6018      	str	r0, [r3, #0]
		beep_time_ms = time_ms;
		if(time_ms != 0 && time_ms < beep_half_cycle_ms) beep_time_ms = beep_half_cycle_ms << 1;
 800022e:	2900      	cmp	r1, #0
 8000230:	d10b      	bne.n	800024a <beep_oscillation+0x2a>
		beep_time_ms = time_ms;
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <beep_oscillation+0x40>)
 8000234:	6019      	str	r1, [r3, #0]
		BEEP_OUT_ON();
 8000236:	2180      	movs	r1, #128	; 0x80
 8000238:	2090      	movs	r0, #144	; 0x90
 800023a:	2201      	movs	r2, #1
 800023c:	0089      	lsls	r1, r1, #2
 800023e:	05c0      	lsls	r0, r0, #23
 8000240:	f001 fa00 	bl	8001644 <HAL_GPIO_WritePin>
		beep_flag = 1;
 8000244:	2301      	movs	r3, #1
 8000246:	7023      	strb	r3, [r4, #0]
	}
}
 8000248:	bd10      	pop	{r4, pc}
		if(time_ms != 0 && time_ms < beep_half_cycle_ms) beep_time_ms = beep_half_cycle_ms << 1;
 800024a:	4288      	cmp	r0, r1
 800024c:	d9f1      	bls.n	8000232 <beep_oscillation+0x12>
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <beep_oscillation+0x40>)
 8000250:	0040      	lsls	r0, r0, #1
 8000252:	6018      	str	r0, [r3, #0]
 8000254:	e7ef      	b.n	8000236 <beep_oscillation+0x16>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	20000044 	.word	0x20000044
 800025c:	20000000 	.word	0x20000000
 8000260:	20000004 	.word	0x20000004

08000264 <beep_oscillation_cnt>:

void beep_oscillation_cnt(void)
{
 8000264:	b510      	push	{r4, lr}
	if(beep_flag == 1)
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <beep_oscillation_cnt+0x60>)
 8000268:	781a      	ldrb	r2, [r3, #0]
 800026a:	2a01      	cmp	r2, #1
 800026c:	d000      	beq.n	8000270 <beep_oscillation_cnt+0xc>
			beep_half_cycle_cnt = 0;
			beep_time_cnt = 0;
			BEEP_OUT_OFF();
		}
	}
}
 800026e:	bd10      	pop	{r4, pc}
		if(beep_time_ms == 0 || ++beep_time_cnt < beep_time_ms)
 8000270:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <beep_oscillation_cnt+0x64>)
 8000272:	6811      	ldr	r1, [r2, #0]
 8000274:	2900      	cmp	r1, #0
 8000276:	d011      	beq.n	800029c <beep_oscillation_cnt+0x38>
 8000278:	4814      	ldr	r0, [pc, #80]	; (80002cc <beep_oscillation_cnt+0x68>)
 800027a:	6802      	ldr	r2, [r0, #0]
 800027c:	3201      	adds	r2, #1
 800027e:	6002      	str	r2, [r0, #0]
 8000280:	4291      	cmp	r1, r2
 8000282:	d80b      	bhi.n	800029c <beep_oscillation_cnt+0x38>
			beep_flag = 0;
 8000284:	2200      	movs	r2, #0
			BEEP_OUT_OFF();
 8000286:	2180      	movs	r1, #128	; 0x80
			beep_time_cnt = 0;
 8000288:	6002      	str	r2, [r0, #0]
			BEEP_OUT_OFF();
 800028a:	2090      	movs	r0, #144	; 0x90
			beep_flag = 0;
 800028c:	701a      	strb	r2, [r3, #0]
			beep_half_cycle_cnt = 0;
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <beep_oscillation_cnt+0x6c>)
			BEEP_OUT_OFF();
 8000290:	0089      	lsls	r1, r1, #2
 8000292:	05c0      	lsls	r0, r0, #23
			beep_half_cycle_cnt = 0;
 8000294:	601a      	str	r2, [r3, #0]
			BEEP_OUT_OFF();
 8000296:	f001 f9d5 	bl	8001644 <HAL_GPIO_WritePin>
}
 800029a:	e7e8      	b.n	800026e <beep_oscillation_cnt+0xa>
			if(beep_half_cycle_ms != 0 && ++beep_half_cycle_cnt > beep_half_cycle_ms)
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <beep_oscillation_cnt+0x70>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d0e4      	beq.n	800026e <beep_oscillation_cnt+0xa>
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <beep_oscillation_cnt+0x6c>)
 80002a6:	6823      	ldr	r3, [r4, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	6023      	str	r3, [r4, #0]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d2de      	bcs.n	800026e <beep_oscillation_cnt+0xa>
				BEEP_OUT_TOGGLE();
 80002b0:	2180      	movs	r1, #128	; 0x80
 80002b2:	2090      	movs	r0, #144	; 0x90
 80002b4:	0089      	lsls	r1, r1, #2
 80002b6:	05c0      	lsls	r0, r0, #23
 80002b8:	f001 f9ca 	bl	8001650 <HAL_GPIO_TogglePin>
				beep_half_cycle_cnt = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	6023      	str	r3, [r4, #0]
 80002c0:	e7d5      	b.n	800026e <beep_oscillation_cnt+0xa>
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	20000044 	.word	0x20000044
 80002c8:	20000004 	.word	0x20000004
 80002cc:	2000004c 	.word	0x2000004c
 80002d0:	20000048 	.word	0x20000048
 80002d4:	20000000 	.word	0x20000000

080002d8 <beep_oscillation_clear>:

void beep_oscillation_clear(void)
{
	beep_flag = 0;
 80002d8:	2300      	movs	r3, #0
	beep_half_cycle_ms = 500;
 80002da:	21fa      	movs	r1, #250	; 0xfa
	beep_time_ms = 1000;
	beep_half_cycle_cnt = 0;
	beep_time_cnt = 0;
	BEEP_OUT_OFF();
 80002dc:	2090      	movs	r0, #144	; 0x90
	beep_flag = 0;
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <beep_oscillation_clear+0x30>)
{
 80002e0:	b510      	push	{r4, lr}
	beep_flag = 0;
 80002e2:	7013      	strb	r3, [r2, #0]
	beep_half_cycle_ms = 500;
 80002e4:	4a09      	ldr	r2, [pc, #36]	; (800030c <beep_oscillation_clear+0x34>)
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	6011      	str	r1, [r2, #0]
	beep_time_ms = 1000;
 80002ea:	4a09      	ldr	r2, [pc, #36]	; (8000310 <beep_oscillation_clear+0x38>)
 80002ec:	1849      	adds	r1, r1, r1
 80002ee:	6011      	str	r1, [r2, #0]
	beep_half_cycle_cnt = 0;
 80002f0:	4a08      	ldr	r2, [pc, #32]	; (8000314 <beep_oscillation_clear+0x3c>)
	BEEP_OUT_OFF();
 80002f2:	39e9      	subs	r1, #233	; 0xe9
	beep_half_cycle_cnt = 0;
 80002f4:	6013      	str	r3, [r2, #0]
	beep_time_cnt = 0;
 80002f6:	4a08      	ldr	r2, [pc, #32]	; (8000318 <beep_oscillation_clear+0x40>)
	BEEP_OUT_OFF();
 80002f8:	39ff      	subs	r1, #255	; 0xff
	beep_time_cnt = 0;
 80002fa:	6013      	str	r3, [r2, #0]
	BEEP_OUT_OFF();
 80002fc:	05c0      	lsls	r0, r0, #23
 80002fe:	2200      	movs	r2, #0
 8000300:	f001 f9a0 	bl	8001644 <HAL_GPIO_WritePin>
}
 8000304:	bd10      	pop	{r4, pc}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	20000044 	.word	0x20000044
 800030c:	20000000 	.word	0x20000000
 8000310:	20000004 	.word	0x20000004
 8000314:	20000048 	.word	0x20000048
 8000318:	2000004c 	.word	0x2000004c

0800031c <HAL_SYSTICK_Callback>:
#include "beep.h"
#include "power.h"
#include "e18_ms1_ipx.h"

void HAL_SYSTICK_Callback(void)
{
 800031c:	b510      	push	{r4, lr}
	timer_exec();
 800031e:	f000 fd71 	bl	8000e04 <timer_exec>
	timer_service();
 8000322:	f000 fd8f 	bl	8000e44 <timer_service>
	key_scan();
 8000326:	f000 f9bd 	bl	80006a4 <key_scan>
	led_blink_cnt();
 800032a:	f000 fba5 	bl	8000a78 <led_blink_cnt>
	beep_oscillation_cnt();
 800032e:	f7ff ff99 	bl	8000264 <beep_oscillation_cnt>
	power_ac_state_cnt();
 8000332:	f000 fd17 	bl	8000d64 <power_ac_state_cnt>
	e18_ms1_ipx_send_overtime_cnt();
 8000336:	f000 f86f 	bl	8000418 <e18_ms1_ipx_send_overtime_cnt>
}
 800033a:	bd10      	pop	{r4, pc}

0800033c <e18_ms1_ipx_init>:
uint32_t e18_ms1_ipx_overtime_cnt = 0;

e18_ms1_ipx_t e18_ms1_ipx;

uint8_t e18_ms1_ipx_init(void)
{
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	b090      	sub	sp, #64	; 0x40
	uint8_t buffer[MAXQSIZE];
	uint16_t rx_size;

	//配置为终端
	buffer[0] = 0xFD;
 8000340:	466b      	mov	r3, sp
	buffer[1] = 0x02;
 8000342:	2402      	movs	r4, #2
	buffer[0] = 0xFD;
 8000344:	26fd      	movs	r6, #253	; 0xfd
	buffer[2] = 0x01;
 8000346:	466a      	mov	r2, sp
	buffer[0] = 0xFD;
 8000348:	701e      	strb	r6, [r3, #0]
	buffer[1] = 0x02;
 800034a:	705c      	strb	r4, [r3, #1]
	buffer[3] = 0x02;
	buffer[4] = 0xFF;
 800034c:	25ff      	movs	r5, #255	; 0xff
	buffer[2] = 0x01;
 800034e:	2301      	movs	r3, #1
	usart1_send_data(buffer, 5);
 8000350:	2105      	movs	r1, #5
 8000352:	4668      	mov	r0, sp
	buffer[2] = 0x01;
 8000354:	7093      	strb	r3, [r2, #2]
	buffer[3] = 0x02;
 8000356:	70d4      	strb	r4, [r2, #3]
	buffer[4] = 0xFF;
 8000358:	7115      	strb	r5, [r2, #4]
	usart1_send_data(buffer, 5);
 800035a:	f000 fe49 	bl	8000ff0 <usart1_send_data>
	HAL_Delay(50);
 800035e:	2032      	movs	r0, #50	; 0x32
 8000360:	f000 fee8 	bl	8001134 <HAL_Delay>
	rx_size = usart1_receive_data(buffer);
 8000364:	4668      	mov	r0, sp
 8000366:	f000 fe4f 	bl	8001008 <usart1_receive_data>
	{

	}

	//配置信道
	buffer[0] = 0xFD;
 800036a:	466b      	mov	r3, sp
	buffer[1] = 0x02;
	buffer[2] = 0x0A;
 800036c:	466a      	mov	r2, sp
	buffer[0] = 0xFD;
 800036e:	701e      	strb	r6, [r3, #0]
	buffer[1] = 0x02;
 8000370:	705c      	strb	r4, [r3, #1]
	buffer[2] = 0x0A;
 8000372:	230a      	movs	r3, #10
	buffer[3] = E18_MS1_IPX_CHANNEL_MIN;
	buffer[4] = 0xFF;
	usart1_send_data(buffer, 5);
 8000374:	2105      	movs	r1, #5
	buffer[2] = 0x0A;
 8000376:	7093      	strb	r3, [r2, #2]
	usart1_send_data(buffer, 5);
 8000378:	4668      	mov	r0, sp
	buffer[3] = E18_MS1_IPX_CHANNEL_MIN;
 800037a:	3301      	adds	r3, #1
 800037c:	70d3      	strb	r3, [r2, #3]
	buffer[4] = 0xFF;
 800037e:	7115      	strb	r5, [r2, #4]
	usart1_send_data(buffer, 5);
 8000380:	f000 fe36 	bl	8000ff0 <usart1_send_data>
	HAL_Delay(50);
 8000384:	2032      	movs	r0, #50	; 0x32
 8000386:	f000 fed5 	bl	8001134 <HAL_Delay>
	rx_size = usart1_receive_data(buffer);
 800038a:	4668      	mov	r0, sp
 800038c:	f000 fe3c 	bl	8001008 <usart1_receive_data>
	{

	}

	//重启设备
	buffer[0] = 0xFD;
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <e18_ms1_ipx_init+0xc0>)
	buffer[1] = 0x01;
	buffer[2] = 0x12;
	buffer[3] = 0xFF;
	usart1_send_data(buffer, 4);
 8000392:	2104      	movs	r1, #4
 8000394:	4668      	mov	r0, sp
	buffer[0] = 0xFD;
 8000396:	9300      	str	r3, [sp, #0]
	usart1_send_data(buffer, 4);
 8000398:	f000 fe2a 	bl	8000ff0 <usart1_send_data>
	HAL_Delay(50);
 800039c:	2032      	movs	r0, #50	; 0x32
 800039e:	f000 fec9 	bl	8001134 <HAL_Delay>
	rx_size = usart1_receive_data(buffer);
 80003a2:	4668      	mov	r0, sp
 80003a4:	f000 fe30 	bl	8001008 <usart1_receive_data>
	if(rx_size == 0x02 && buffer[0] == 0xFA && buffer[1] == 0x12)
	{

	}
	HAL_Delay(1000);
 80003a8:	20fa      	movs	r0, #250	; 0xfa
 80003aa:	0080      	lsls	r0, r0, #2
 80003ac:	f000 fec2 	bl	8001134 <HAL_Delay>

	//读取设备所有数据
	buffer[0] = 0xFE;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <e18_ms1_ipx_init+0xc4>)
	buffer[1] = 0x01;
	buffer[2] = 0xFE;
	buffer[3] = 0xFF;
	usart1_send_data(buffer, 4);
 80003b2:	2104      	movs	r1, #4
 80003b4:	4668      	mov	r0, sp
	buffer[0] = 0xFE;
 80003b6:	9300      	str	r3, [sp, #0]
	usart1_send_data(buffer, 4);
 80003b8:	f000 fe1a 	bl	8000ff0 <usart1_send_data>
	HAL_Delay(100);
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f000 feb9 	bl	8001134 <HAL_Delay>
	rx_size = usart1_receive_data(buffer);
 80003c2:	4668      	mov	r0, sp
 80003c4:	f000 fe20 	bl	8001008 <usart1_receive_data>
	if(rx_size == 0x2E && buffer[0] == 0xFB)
 80003c8:	282e      	cmp	r0, #46	; 0x2e
 80003ca:	d00b      	beq.n	80003e4 <e18_ms1_ipx_init+0xa8>
		uint8_t *pbuffer = (uint8_t*)(&e18_ms1_ipx);
		for(uint8_t i = 0; i < 45; i++)
			pbuffer[i] = buffer[i+1];
	}

	e18_ms1_ipx_send_flag = 0;
 80003cc:	2300      	movs	r3, #0
	e18_ms1_ipx_send_key = 0;
	e18_ms1_ipx_overtime_flag = 0;
	e18_ms1_ipx_overtime_cnt = 0;

	return 0;
}
 80003ce:	2000      	movs	r0, #0
	e18_ms1_ipx_send_flag = 0;
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <e18_ms1_ipx_init+0xc8>)
 80003d2:	7013      	strb	r3, [r2, #0]
	e18_ms1_ipx_send_key = 0;
 80003d4:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <e18_ms1_ipx_init+0xcc>)
 80003d6:	7013      	strb	r3, [r2, #0]
	e18_ms1_ipx_overtime_flag = 0;
 80003d8:	4a0c      	ldr	r2, [pc, #48]	; (800040c <e18_ms1_ipx_init+0xd0>)
 80003da:	7013      	strb	r3, [r2, #0]
	e18_ms1_ipx_overtime_cnt = 0;
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <e18_ms1_ipx_init+0xd4>)
 80003de:	6013      	str	r3, [r2, #0]
}
 80003e0:	b010      	add	sp, #64	; 0x40
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
	if(rx_size == 0x2E && buffer[0] == 0xFB)
 80003e4:	466b      	mov	r3, sp
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2bfb      	cmp	r3, #251	; 0xfb
 80003ea:	d1ef      	bne.n	80003cc <e18_ms1_ipx_init+0x90>
 80003ec:	466b      	mov	r3, sp
 80003ee:	222d      	movs	r2, #45	; 0x2d
 80003f0:	1c59      	adds	r1, r3, #1
 80003f2:	4808      	ldr	r0, [pc, #32]	; (8000414 <e18_ms1_ipx_init+0xd8>)
 80003f4:	f002 fa4e 	bl	8002894 <memcpy>
 80003f8:	e7e8      	b.n	80003cc <e18_ms1_ipx_init+0x90>
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	ff1201fd 	.word	0xff1201fd
 8000400:	fffe01fe 	.word	0xfffe01fe
 8000404:	20000055 	.word	0x20000055
 8000408:	20000056 	.word	0x20000056
 800040c:	20000054 	.word	0x20000054
 8000410:	20000050 	.word	0x20000050
 8000414:	200000f8 	.word	0x200000f8

08000418 <e18_ms1_ipx_send_overtime_cnt>:

void e18_ms1_ipx_send_overtime_cnt(void)
{
 8000418:	b530      	push	{r4, r5, lr}
	if(e18_ms1_ipx_send_flag == 1)
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <e18_ms1_ipx_send_overtime_cnt+0x2c>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d000      	beq.n	8000424 <e18_ms1_ipx_send_overtime_cnt+0xc>
				e18_ms1_ipx_overtime_cnt = 0;
				e18_ms1_ipx_overtime_flag = 1;
			}
		}
	}
}
 8000422:	bd30      	pop	{r4, r5, pc}
		if(e18_ms1_ipx_overtime_flag == 0)
 8000424:	4908      	ldr	r1, [pc, #32]	; (8000448 <e18_ms1_ipx_send_overtime_cnt+0x30>)
 8000426:	7808      	ldrb	r0, [r1, #0]
 8000428:	2800      	cmp	r0, #0
 800042a:	d1fa      	bne.n	8000422 <e18_ms1_ipx_send_overtime_cnt+0xa>
			if(++e18_ms1_ipx_overtime_cnt > 1999)	//累计超过2s则超时
 800042c:	4c07      	ldr	r4, [pc, #28]	; (800044c <e18_ms1_ipx_send_overtime_cnt+0x34>)
 800042e:	4d08      	ldr	r5, [pc, #32]	; (8000450 <e18_ms1_ipx_send_overtime_cnt+0x38>)
 8000430:	6822      	ldr	r2, [r4, #0]
 8000432:	3201      	adds	r2, #1
 8000434:	42aa      	cmp	r2, r5
 8000436:	d902      	bls.n	800043e <e18_ms1_ipx_send_overtime_cnt+0x26>
				e18_ms1_ipx_overtime_cnt = 0;
 8000438:	6020      	str	r0, [r4, #0]
				e18_ms1_ipx_overtime_flag = 1;
 800043a:	700b      	strb	r3, [r1, #0]
}
 800043c:	e7f1      	b.n	8000422 <e18_ms1_ipx_send_overtime_cnt+0xa>
			if(++e18_ms1_ipx_overtime_cnt > 1999)	//累计超过2s则超时
 800043e:	6022      	str	r2, [r4, #0]
 8000440:	e7ef      	b.n	8000422 <e18_ms1_ipx_send_overtime_cnt+0xa>
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000055 	.word	0x20000055
 8000448:	20000054 	.word	0x20000054
 800044c:	20000050 	.word	0x20000050
 8000450:	000007cf 	.word	0x000007cf

08000454 <e18_ms1_ipx_overtime_alarm>:

void e18_ms1_ipx_overtime_alarm(void)
{
 8000454:	b570      	push	{r4, r5, r6, lr}
	//超时报警
	if(e18_ms1_ipx_send_flag == 1 && e18_ms1_ipx_overtime_flag == 1)
 8000456:	4c0f      	ldr	r4, [pc, #60]	; (8000494 <e18_ms1_ipx_overtime_alarm+0x40>)
 8000458:	7823      	ldrb	r3, [r4, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d000      	beq.n	8000460 <e18_ms1_ipx_overtime_alarm+0xc>

		e18_ms1_ipx_send_flag = 0;
		e18_ms1_ipx_overtime_flag = 0;
		e18_ms1_ipx_overtime_cnt = 0;
	}
}
 800045e:	bd70      	pop	{r4, r5, r6, pc}
	if(e18_ms1_ipx_send_flag == 1 && e18_ms1_ipx_overtime_flag == 1)
 8000460:	4d0d      	ldr	r5, [pc, #52]	; (8000498 <e18_ms1_ipx_overtime_alarm+0x44>)
 8000462:	782b      	ldrb	r3, [r5, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d1fa      	bne.n	800045e <e18_ms1_ipx_overtime_alarm+0xa>
		led_blink_clear(e18_ms1_ipx_send_key);
 8000468:	4e0c      	ldr	r6, [pc, #48]	; (800049c <e18_ms1_ipx_overtime_alarm+0x48>)
 800046a:	7830      	ldrb	r0, [r6, #0]
 800046c:	f000 fb70 	bl	8000b50 <led_blink_clear>
		led_blink(e18_ms1_ipx_send_key, 200, 3000);
 8000470:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <e18_ms1_ipx_overtime_alarm+0x4c>)
 8000472:	7830      	ldrb	r0, [r6, #0]
 8000474:	21c8      	movs	r1, #200	; 0xc8
 8000476:	f000 fac1 	bl	80009fc <led_blink>
		beep_oscillation_clear();
 800047a:	f7ff ff2d 	bl	80002d8 <beep_oscillation_clear>
		beep_oscillation(200, 3000);
 800047e:	4908      	ldr	r1, [pc, #32]	; (80004a0 <e18_ms1_ipx_overtime_alarm+0x4c>)
 8000480:	20c8      	movs	r0, #200	; 0xc8
 8000482:	f7ff fecd 	bl	8000220 <beep_oscillation>
		e18_ms1_ipx_send_flag = 0;
 8000486:	2300      	movs	r3, #0
		e18_ms1_ipx_overtime_cnt = 0;
 8000488:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <e18_ms1_ipx_overtime_alarm+0x50>)
		e18_ms1_ipx_send_flag = 0;
 800048a:	7023      	strb	r3, [r4, #0]
		e18_ms1_ipx_overtime_flag = 0;
 800048c:	702b      	strb	r3, [r5, #0]
		e18_ms1_ipx_overtime_cnt = 0;
 800048e:	6013      	str	r3, [r2, #0]
}
 8000490:	e7e5      	b.n	800045e <e18_ms1_ipx_overtime_alarm+0xa>
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	20000055 	.word	0x20000055
 8000498:	20000054 	.word	0x20000054
 800049c:	20000056 	.word	0x20000056
 80004a0:	00000bb8 	.word	0x00000bb8
 80004a4:	20000050 	.word	0x20000050

080004a8 <e18_ms1_ipx_protocol_handle>:

void e18_ms1_ipx_protocol_handle(uint8_t *pdata, uint16_t size)
{
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	b091      	sub	sp, #68	; 0x44
	uint8_t buffer[MAXQSIZE];
	uint16_t len = size;
	static uint8_t nonetwork_cnt = 0;

	if(len == 2)	//该类信息是模块主动上报MCU
 80004ac:	2902      	cmp	r1, #2
 80004ae:	d022      	beq.n	80004f6 <e18_ms1_ipx_protocol_handle+0x4e>

		}
	}
	else
	{
		if(len == 5)	//接收答应(最后两字节是协调器网络短地址, 固定是0x0000)
 80004b0:	2905      	cmp	r1, #5
 80004b2:	d001      	beq.n	80004b8 <e18_ms1_ipx_protocol_handle+0x10>
				}
			}
		}

	}
}
 80004b4:	b011      	add	sp, #68	; 0x44
 80004b6:	bd30      	pop	{r4, r5, pc}
			if(pdata[0] == 0xBF)
 80004b8:	7803      	ldrb	r3, [r0, #0]
 80004ba:	2bbf      	cmp	r3, #191	; 0xbf
 80004bc:	d1fa      	bne.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
				e18_ms1_ipx_send_flag = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	4a2c      	ldr	r2, [pc, #176]	; (8000574 <e18_ms1_ipx_protocol_handle+0xcc>)
 80004c2:	7013      	strb	r3, [r2, #0]
				e18_ms1_ipx_overtime_flag = 0;
 80004c4:	4a2c      	ldr	r2, [pc, #176]	; (8000578 <e18_ms1_ipx_protocol_handle+0xd0>)
 80004c6:	7013      	strb	r3, [r2, #0]
				e18_ms1_ipx_overtime_cnt = 0;
 80004c8:	4a2c      	ldr	r2, [pc, #176]	; (800057c <e18_ms1_ipx_protocol_handle+0xd4>)
 80004ca:	6013      	str	r3, [r2, #0]
				switch(pdata[1])	//跟原先发送命令一致
 80004cc:	7843      	ldrb	r3, [r0, #1]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d1f0      	bne.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
						switch(pdata[2])	//返回错误码
 80004d2:	7883      	ldrb	r3, [r0, #2]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d1ed      	bne.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
								led_blink_clear(1);
 80004d8:	2001      	movs	r0, #1
 80004da:	f000 fb39 	bl	8000b50 <led_blink_clear>
								led_blink(1, 200, 3000);
 80004de:	4a28      	ldr	r2, [pc, #160]	; (8000580 <e18_ms1_ipx_protocol_handle+0xd8>)
 80004e0:	21c8      	movs	r1, #200	; 0xc8
 80004e2:	2001      	movs	r0, #1
 80004e4:	f000 fa8a 	bl	80009fc <led_blink>
								beep_oscillation_clear();
 80004e8:	f7ff fef6 	bl	80002d8 <beep_oscillation_clear>
								beep_oscillation(200, 3000);
 80004ec:	4924      	ldr	r1, [pc, #144]	; (8000580 <e18_ms1_ipx_protocol_handle+0xd8>)
 80004ee:	20c8      	movs	r0, #200	; 0xc8
 80004f0:	f7ff fe96 	bl	8000220 <beep_oscillation>
}
 80004f4:	e7de      	b.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
		if(pdata[0] == 0xFF && pdata[1] == 0x00)	//无网络或失去网络
 80004f6:	7803      	ldrb	r3, [r0, #0]
 80004f8:	2bff      	cmp	r3, #255	; 0xff
 80004fa:	d1db      	bne.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
 80004fc:	7844      	ldrb	r4, [r0, #1]
 80004fe:	2c00      	cmp	r4, #0
 8000500:	d013      	beq.n	800052a <e18_ms1_ipx_protocol_handle+0x82>
		else if(pdata[0] == 0xFF && pdata[1] == 0xFF)	//协调器设备建立网络
 8000502:	2cff      	cmp	r4, #255	; 0xff
 8000504:	d02b      	beq.n	800055e <e18_ms1_ipx_protocol_handle+0xb6>
		else if(pdata[0] == 0xFF && pdata[1] == 0xAA)	//设备加入网络
 8000506:	2caa      	cmp	r4, #170	; 0xaa
 8000508:	d1d4      	bne.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
			e18_ms1_ipx.nwk_state = 1;
 800050a:	2201      	movs	r2, #1
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <e18_ms1_ipx_protocol_handle+0xdc>)
			led_blink_clear(0);
 800050e:	2000      	movs	r0, #0
			e18_ms1_ipx.nwk_state = 1;
 8000510:	705a      	strb	r2, [r3, #1]
			nonetwork_cnt = 0;
 8000512:	2200      	movs	r2, #0
 8000514:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <e18_ms1_ipx_protocol_handle+0xe0>)
 8000516:	701a      	strb	r2, [r3, #0]
			led_blink_clear(0);
 8000518:	f000 fb1a 	bl	8000b50 <led_blink_clear>
			led_blink(0, 200, 1000);
 800051c:	22fa      	movs	r2, #250	; 0xfa
 800051e:	21c8      	movs	r1, #200	; 0xc8
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fa6a 	bl	80009fc <led_blink>
 8000528:	e7c4      	b.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
			e18_ms1_ipx.nwk_state = 0;
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <e18_ms1_ipx_protocol_handle+0xdc>)
			led_blink_clear(0);
 800052c:	2000      	movs	r0, #0
			e18_ms1_ipx.nwk_state = 0;
 800052e:	705c      	strb	r4, [r3, #1]
			led_blink_clear(0);
 8000530:	f000 fb0e 	bl	8000b50 <led_blink_clear>
			led_blink(0, 500, 0);
 8000534:	21fa      	movs	r1, #250	; 0xfa
 8000536:	2200      	movs	r2, #0
 8000538:	0049      	lsls	r1, r1, #1
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fa5e 	bl	80009fc <led_blink>
			if(++nonetwork_cnt > 4)
 8000540:	4d11      	ldr	r5, [pc, #68]	; (8000588 <e18_ms1_ipx_protocol_handle+0xe0>)
 8000542:	782b      	ldrb	r3, [r5, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	702b      	strb	r3, [r5, #0]
 800054a:	2b04      	cmp	r3, #4
 800054c:	d9b2      	bls.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
				buffer[0] = 0xFD;
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <e18_ms1_ipx_protocol_handle+0xe4>)
				usart1_send_data(buffer, 4);
 8000550:	2104      	movs	r1, #4
 8000552:	4668      	mov	r0, sp
				buffer[0] = 0xFD;
 8000554:	9300      	str	r3, [sp, #0]
				usart1_send_data(buffer, 4);
 8000556:	f000 fd4b 	bl	8000ff0 <usart1_send_data>
				nonetwork_cnt = 0;
 800055a:	702c      	strb	r4, [r5, #0]
 800055c:	e7aa      	b.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
			led_blink_clear(0);
 800055e:	2000      	movs	r0, #0
 8000560:	f000 faf6 	bl	8000b50 <led_blink_clear>
			led_blink(0, 50, 1000);
 8000564:	22fa      	movs	r2, #250	; 0xfa
 8000566:	2132      	movs	r1, #50	; 0x32
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	2000      	movs	r0, #0
 800056c:	f000 fa46 	bl	80009fc <led_blink>
 8000570:	e7a0      	b.n	80004b4 <e18_ms1_ipx_protocol_handle+0xc>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	20000055 	.word	0x20000055
 8000578:	20000054 	.word	0x20000054
 800057c:	20000050 	.word	0x20000050
 8000580:	00000bb8 	.word	0x00000bb8
 8000584:	200000f8 	.word	0x200000f8
 8000588:	20000057 	.word	0x20000057
 800058c:	ff1201fd 	.word	0xff1201fd

08000590 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000590:	b510      	push	{r4, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000592:	f000 fe87 	bl	80012a4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000596:	bd10      	pop	{r4, pc}

08000598 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	2214      	movs	r2, #20
 800059e:	2100      	movs	r1, #0
 80005a0:	a801      	add	r0, sp, #4
 80005a2:	f002 f980 	bl	80028a6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2080      	movs	r0, #128	; 0x80

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80005a8:	25a8      	movs	r5, #168	; 0xa8
 80005aa:	2490      	movs	r4, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_GPIO_Init+0x6c>)
 80005ae:	0280      	lsls	r0, r0, #10
 80005b0:	6951      	ldr	r1, [r2, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80005b2:	05e4      	lsls	r4, r4, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4301      	orrs	r1, r0
 80005b6:	6151      	str	r1, [r2, #20]
 80005b8:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80005ba:	00ad      	lsls	r5, r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4003      	ands	r3, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80005c2:	0029      	movs	r1, r5
 80005c4:	0020      	movs	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	9b00      	ldr	r3, [sp, #0]

  /*Configure GPIO pins : PA5 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80005ca:	f001 f83b 	bl	8001644 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2700      	movs	r7, #0
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 80005d0:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005d2:	2502      	movs	r5, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	a901      	add	r1, sp, #4
 80005d6:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005da:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f000 ff21 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005e2:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	a901      	add	r1, sp, #4
 80005e6:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005e8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ea:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ec:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f000 ff19 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_6;
 80005f2:	2341      	movs	r3, #65	; 0x41
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	a901      	add	r1, sp, #4
 80005f6:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_6;
 80005f8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fa:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f000 ff12 	bl	8001424 <HAL_GPIO_Init>
}
 8000600:	b007      	add	sp, #28
 8000602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000604:	40021000 	.word	0x40021000

08000608 <MX_IWDG_Init>:

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <MX_IWDG_Init+0x20>)
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_IWDG_Init+0x24>)
{
 800060c:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 800060e:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000610:	2300      	movs	r3, #0
 8000612:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_IWDG_Init+0x28>)
 8000616:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8000618:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800061a:	f001 f821 	bl	8001660 <HAL_IWDG_Init>
 800061e:	2800      	cmp	r0, #0
 8000620:	d001      	beq.n	8000626 <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
 8000622:	f000 fb8b 	bl	8000d3c <Error_Handler>
  }

}
 8000626:	bd10      	pop	{r4, pc}
 8000628:	2000012c 	.word	0x2000012c
 800062c:	40003000 	.word	0x40003000
 8000630:	00000fff 	.word	0x00000fff

08000634 <iwdg_feed>:

void iwdg_feed(void)
{
 8000634:	b510      	push	{r4, lr}
	HAL_IWDG_Refresh(&hiwdg);
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <iwdg_feed+0xc>)
 8000638:	f001 f840 	bl	80016bc <HAL_IWDG_Refresh>
}
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	2000012c 	.word	0x2000012c

08000644 <load_key_tbl>:
 * @NOTE 不需要哪个回调函数则必须在该位置写0
 * @NOTE 完全禁止某一类型的回调函数则应在key_config.h配置相应的宏
 *			(KEY_PRESS_CALLBACK_EN, KEY_LONG_CALLBACK_EN, KEY_UP_CALLBACK_EN, KEY_RETRIG_CALLBACK_EN)
 */
void load_key_tbl(KEY_t *pKeyTbl, const KeyEventCallback callBack[][KEY_CALLBACK_NUM])
{
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t i;
	u8_t cb;
	
	gKeyTblPtr = pKeyTbl;
	gKeyCurStatStep = KEY_STATE_STEP_INIT;
 8000646:	2501      	movs	r5, #1
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <load_key_tbl+0x4c>)
{
 800064a:	000c      	movs	r4, r1
	gKeyCurStatStep = KEY_STATE_STEP_INIT;
 800064c:	701d      	strb	r5, [r3, #0]
	gKeyLastValue = KEY_NULL;
 800064e:	2300      	movs	r3, #0
	gKeyTimeCtr = 0;
 8000650:	2600      	movs	r6, #0
	gKeyLastValue = KEY_NULL;
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <load_key_tbl+0x50>)
	gKeyTblPtr = pKeyTbl;
 8000654:	4f10      	ldr	r7, [pc, #64]	; (8000698 <load_key_tbl+0x54>)
	gKeyLastValue = KEY_NULL;
 8000656:	7013      	strb	r3, [r2, #0]
	gKeyTimeCtr = 0;
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <load_key_tbl+0x58>)
	gKeyTblPtr = pKeyTbl;
 800065a:	6038      	str	r0, [r7, #0]
	gKeyTimeCtr = 0;
 800065c:	8013      	strh	r3, [r2, #0]
	
	KEY_CONFIG();
 800065e:	f000 f9bf 	bl	80009e0 <key_gpio_config>
	
	for(i = 0;i < KEY_MAX;i++){
		cb = 0;
		
#if KEY_PRESS_CALLBACK_EN > 0
		gKeyTblPtr[i].mPressCallback = callBack[i][cb++];
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	6822      	ldr	r2, [r4, #0]
 8000666:	601a      	str	r2, [r3, #0]
#endif

#if KEY_LONG_CALLBACK_EN > 0
		gKeyTblPtr[i].mLongCallback = callBack[i][cb++];
 8000668:	6862      	ldr	r2, [r4, #4]
 800066a:	605a      	str	r2, [r3, #4]
#endif

#if KEY_UP_CALLBACK_EN > 0
		gKeyTblPtr[i].mUpCallback = callBack[i][cb++];
 800066c:	68a2      	ldr	r2, [r4, #8]
 800066e:	60da      	str	r2, [r3, #12]
#endif
		
#if KEY_RETRIG_CALLBACK_EN > 0
		gKeyTblPtr[i].mReTrigCallback = callBack[i][cb];
 8000670:	68e2      	ldr	r2, [r4, #12]
#endif

		gKeyTblPtr[i].mFlags = 0;
 8000672:	741e      	strb	r6, [r3, #16]
		gKeyTblPtr[i].mReTrigCallback = callBack[i][cb];
 8000674:	609a      	str	r2, [r3, #8]
		gKeyTblPtr[i].mPressCallback = callBack[i][cb++];
 8000676:	6922      	ldr	r2, [r4, #16]
 8000678:	615a      	str	r2, [r3, #20]
		gKeyTblPtr[i].mLongCallback = callBack[i][cb++];
 800067a:	6962      	ldr	r2, [r4, #20]
 800067c:	619a      	str	r2, [r3, #24]
		gKeyTblPtr[i].mUpCallback = callBack[i][cb++];
 800067e:	69a2      	ldr	r2, [r4, #24]
 8000680:	621a      	str	r2, [r3, #32]
		gKeyTblPtr[i].mReTrigCallback = callBack[i][cb];
 8000682:	69e2      	ldr	r2, [r4, #28]
 8000684:	61da      	str	r2, [r3, #28]
		gKeyTblPtr[i].mFlags = 0;
 8000686:	2224      	movs	r2, #36	; 0x24
 8000688:	549e      	strb	r6, [r3, r2]
	}

	init_ok = _True;
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <load_key_tbl+0x5c>)
 800068c:	701d      	strb	r5, [r3, #0]
}
 800068e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000690:	20000058 	.word	0x20000058
 8000694:	20000059 	.word	0x20000059
 8000698:	2000005c 	.word	0x2000005c
 800069c:	20000060 	.word	0x20000060
 80006a0:	20000062 	.word	0x20000062

080006a4 <key_scan>:
 */
void key_scan(void)
{
	u8_t keyVal;

	if(init_ok != _True) return;
 80006a4:	4b4d      	ldr	r3, [pc, #308]	; (80007dc <key_scan+0x138>)
{
 80006a6:	b570      	push	{r4, r5, r6, lr}
	if(init_ok != _True) return;
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d000      	beq.n	80006b0 <key_scan+0xc>
			gKeyLastValue = KEY_NULL;//清0
			gKeyCurStatStep = KEY_STATE_STEP_INIT;//回到初始状态
			gKeyTimeCtr = 0;
		}break;
	}
}
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
	keyVal |= (u8_t)(GET_KEY0());
 80006b0:	2090      	movs	r0, #144	; 0x90
 80006b2:	2101      	movs	r1, #1
 80006b4:	05c0      	lsls	r0, r0, #23
 80006b6:	f000 ffbf 	bl	8001638 <HAL_GPIO_ReadPin>
 80006ba:	0004      	movs	r4, r0
	keyVal |= (u8_t)((GET_KEY1()) << 1);
 80006bc:	2090      	movs	r0, #144	; 0x90
 80006be:	2110      	movs	r1, #16
 80006c0:	05c0      	lsls	r0, r0, #23
 80006c2:	f000 ffb9 	bl	8001638 <HAL_GPIO_ReadPin>
 80006c6:	4243      	negs	r3, r0
 80006c8:	4143      	adcs	r3, r0
	switch(gKeyCurStatStep){
 80006ca:	4945      	ldr	r1, [pc, #276]	; (80007e0 <key_scan+0x13c>)
	keyVal |= (u8_t)((GET_KEY1()) << 1);
 80006cc:	005b      	lsls	r3, r3, #1
	switch(gKeyCurStatStep){
 80006ce:	780a      	ldrb	r2, [r1, #0]
	keyVal |= (u8_t)((GET_KEY1()) << 1);
 80006d0:	4323      	orrs	r3, r4
 80006d2:	b2db      	uxtb	r3, r3
	switch(gKeyCurStatStep){
 80006d4:	2a06      	cmp	r2, #6
 80006d6:	d8ea      	bhi.n	80006ae <key_scan+0xa>
 80006d8:	4842      	ldr	r0, [pc, #264]	; (80007e4 <key_scan+0x140>)
 80006da:	0092      	lsls	r2, r2, #2
 80006dc:	5882      	ldr	r2, [r0, r2]
 80006de:	4697      	mov	pc, r2
				if(gKeyLastValue & (1 << i)){//根据按键值清空除KEY_UP外的所有标志位, 并置KEY_UP位
 80006e0:	4a41      	ldr	r2, [pc, #260]	; (80007e8 <key_scan+0x144>)
 80006e2:	7813      	ldrb	r3, [r2, #0]
 80006e4:	07d8      	lsls	r0, r3, #31
 80006e6:	d503      	bpl.n	80006f0 <key_scan+0x4c>
					SET_BITS(gKeyTblPtr[i].mFlags, KEY_UP);
 80006e8:	2440      	movs	r4, #64	; 0x40
					gKeyTblPtr[i].mFlags = 0;
 80006ea:	4840      	ldr	r0, [pc, #256]	; (80007ec <key_scan+0x148>)
					SET_BITS(gKeyTblPtr[i].mFlags, KEY_UP);
 80006ec:	6800      	ldr	r0, [r0, #0]
 80006ee:	7404      	strb	r4, [r0, #16]
				if(gKeyLastValue & (1 << i)){//根据按键值清空除KEY_UP外的所有标志位, 并置KEY_UP位
 80006f0:	079b      	lsls	r3, r3, #30
 80006f2:	d504      	bpl.n	80006fe <key_scan+0x5a>
					gKeyTblPtr[i].mFlags = 0;
 80006f4:	4b3d      	ldr	r3, [pc, #244]	; (80007ec <key_scan+0x148>)
					SET_BITS(gKeyTblPtr[i].mFlags, KEY_UP);
 80006f6:	2440      	movs	r4, #64	; 0x40
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	2324      	movs	r3, #36	; 0x24
 80006fc:	54c4      	strb	r4, [r0, r3]
			gKeyLastValue = KEY_NULL;//清0
 80006fe:	2300      	movs	r3, #0
 8000700:	7013      	strb	r3, [r2, #0]
			gKeyCurStatStep = KEY_STATE_STEP_INIT;//回到初始状态
 8000702:	2201      	movs	r2, #1
 8000704:	700a      	strb	r2, [r1, #0]
			gKeyTimeCtr = 0;
 8000706:	4a3a      	ldr	r2, [pc, #232]	; (80007f0 <key_scan+0x14c>)
 8000708:	8013      	strh	r3, [r2, #0]
		}break;
 800070a:	e7d0      	b.n	80006ae <key_scan+0xa>
			if(KEY_NULL != keyVal){
 800070c:	2b00      	cmp	r3, #0
 800070e:	d05e      	beq.n	80007ce <key_scan+0x12a>
				if(++gKeyTimeCtr > KEY_RETRIG_PERIOD){//连发间隔到
 8000710:	4a37      	ldr	r2, [pc, #220]	; (80007f0 <key_scan+0x14c>)
 8000712:	8811      	ldrh	r1, [r2, #0]
 8000714:	3101      	adds	r1, #1
 8000716:	b289      	uxth	r1, r1
 8000718:	8011      	strh	r1, [r2, #0]
 800071a:	2964      	cmp	r1, #100	; 0x64
 800071c:	d9c7      	bls.n	80006ae <key_scan+0xa>
						if(keyVal & (1 << i))SET_BITS(gKeyTblPtr[i].mFlags, KEY_RETRIG);
 800071e:	07d9      	lsls	r1, r3, #31
 8000720:	d505      	bpl.n	800072e <key_scan+0x8a>
 8000722:	2410      	movs	r4, #16
 8000724:	4931      	ldr	r1, [pc, #196]	; (80007ec <key_scan+0x148>)
 8000726:	6808      	ldr	r0, [r1, #0]
 8000728:	7c01      	ldrb	r1, [r0, #16]
 800072a:	4321      	orrs	r1, r4
 800072c:	7401      	strb	r1, [r0, #16]
 800072e:	079b      	lsls	r3, r3, #30
 8000730:	d506      	bpl.n	8000740 <key_scan+0x9c>
 8000732:	2124      	movs	r1, #36	; 0x24
 8000734:	2410      	movs	r4, #16
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <key_scan+0x148>)
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	5c43      	ldrb	r3, [r0, r1]
 800073c:	4323      	orrs	r3, r4
 800073e:	5443      	strb	r3, [r0, r1]
					gKeyTimeCtr = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	8013      	strh	r3, [r2, #0]
 8000744:	e7b3      	b.n	80006ae <key_scan+0xa>
			if(KEY_NULL != keyVal){
 8000746:	2b00      	cmp	r3, #0
 8000748:	d041      	beq.n	80007ce <key_scan+0x12a>
				if(++gKeyTimeCtr > KEY_LONG_PERIOD){//判断长按的时间到
 800074a:	24fa      	movs	r4, #250	; 0xfa
 800074c:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <key_scan+0x14c>)
 800074e:	00a4      	lsls	r4, r4, #2
 8000750:	8810      	ldrh	r0, [r2, #0]
 8000752:	3001      	adds	r0, #1
 8000754:	b280      	uxth	r0, r0
 8000756:	8010      	strh	r0, [r2, #0]
 8000758:	42a0      	cmp	r0, r4
 800075a:	d9a8      	bls.n	80006ae <key_scan+0xa>
						if(keyVal & (1 << i))SET_BITS(gKeyTblPtr[i].mFlags, KEY_LONG);
 800075c:	07d8      	lsls	r0, r3, #31
 800075e:	d505      	bpl.n	800076c <key_scan+0xc8>
 8000760:	2520      	movs	r5, #32
 8000762:	4822      	ldr	r0, [pc, #136]	; (80007ec <key_scan+0x148>)
 8000764:	6804      	ldr	r4, [r0, #0]
 8000766:	7c20      	ldrb	r0, [r4, #16]
 8000768:	4328      	orrs	r0, r5
 800076a:	7420      	strb	r0, [r4, #16]
 800076c:	079b      	lsls	r3, r3, #30
 800076e:	d506      	bpl.n	800077e <key_scan+0xda>
 8000770:	2024      	movs	r0, #36	; 0x24
 8000772:	2520      	movs	r5, #32
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <key_scan+0x148>)
 8000776:	681c      	ldr	r4, [r3, #0]
 8000778:	5c23      	ldrb	r3, [r4, r0]
 800077a:	432b      	orrs	r3, r5
 800077c:	5423      	strb	r3, [r4, r0]
					gKeyCurStatStep = KEY_STATE_STEP_RETRIG;//切换到下一步进状态
 800077e:	2305      	movs	r3, #5
 8000780:	700b      	strb	r3, [r1, #0]
					gKeyTimeCtr = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	8013      	strh	r3, [r2, #0]
 8000786:	e792      	b.n	80006ae <key_scan+0xa>
			if(KEY_NULL != keyVal){
 8000788:	2b00      	cmp	r3, #0
 800078a:	d023      	beq.n	80007d4 <key_scan+0x130>
					if(keyVal & (1 << i))SET_BITS(gKeyTblPtr[i].mFlags, KEY_DOWN);
 800078c:	07da      	lsls	r2, r3, #31
 800078e:	d506      	bpl.n	800079e <key_scan+0xfa>
 8000790:	4a16      	ldr	r2, [pc, #88]	; (80007ec <key_scan+0x148>)
 8000792:	6810      	ldr	r0, [r2, #0]
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	7c04      	ldrb	r4, [r0, #16]
 8000798:	4252      	negs	r2, r2
 800079a:	4322      	orrs	r2, r4
 800079c:	7402      	strb	r2, [r0, #16]
 800079e:	079a      	lsls	r2, r3, #30
 80007a0:	d507      	bpl.n	80007b2 <key_scan+0x10e>
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <key_scan+0x148>)
 80007a4:	2024      	movs	r0, #36	; 0x24
 80007a6:	6814      	ldr	r4, [r2, #0]
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	5c25      	ldrb	r5, [r4, r0]
 80007ac:	4252      	negs	r2, r2
 80007ae:	432a      	orrs	r2, r5
 80007b0:	5422      	strb	r2, [r4, r0]
				gKeyLastValue = keyVal;//并保存按键值以便KEY_STATE_STEP_RELEASE状态步下可以处理KEY_UP位
 80007b2:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <key_scan+0x144>)
 80007b4:	7013      	strb	r3, [r2, #0]
				gKeyCurStatStep = KEY_STATE_STEP_LONG;//切换到下一步进状态
 80007b6:	2304      	movs	r3, #4
 80007b8:	700b      	strb	r3, [r1, #0]
 80007ba:	e778      	b.n	80006ae <key_scan+0xa>
			gKeyCurStatStep = KEY_STATE_STEP_PRESS;//切换到下一步进状态
 80007bc:	2303      	movs	r3, #3
 80007be:	700b      	strb	r3, [r1, #0]
		}break;
 80007c0:	e775      	b.n	80006ae <key_scan+0xa>
			if(KEY_NULL != keyVal) gKeyCurStatStep = KEY_STATE_STEP_WOBBLE;
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d100      	bne.n	80007c8 <key_scan+0x124>
 80007c6:	e772      	b.n	80006ae <key_scan+0xa>
 80007c8:	2302      	movs	r3, #2
 80007ca:	700b      	strb	r3, [r1, #0]
 80007cc:	e76f      	b.n	80006ae <key_scan+0xa>
				gKeyCurStatStep = KEY_STATE_STEP_RELEASE;
 80007ce:	2306      	movs	r3, #6
 80007d0:	700b      	strb	r3, [r1, #0]
 80007d2:	e76c      	b.n	80006ae <key_scan+0xa>
				gKeyCurStatStep = KEY_STATE_STEP_INIT;
 80007d4:	2301      	movs	r3, #1
 80007d6:	700b      	strb	r3, [r1, #0]
 80007d8:	e769      	b.n	80006ae <key_scan+0xa>
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	20000062 	.word	0x20000062
 80007e0:	20000058 	.word	0x20000058
 80007e4:	080028f0 	.word	0x080028f0
 80007e8:	20000059 	.word	0x20000059
 80007ec:	2000005c 	.word	0x2000005c
 80007f0:	20000060 	.word	0x20000060

080007f4 <key_handler>:
/**
 * @brief 检查各按键的标志位, 满足则触发相应的回调函数. 
 * @NOTE  此函数应放在后台程序中, 若后台程序中其他代码执行较耗时则应将此函数放在定时器中断中
 */
void key_handler(void)
{
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	46ce      	mov	lr, r9
 80007f8:	4647      	mov	r7, r8
	u8_t i;
	u8_t flags;
	
	if(init_ok != _True) return;
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <key_handler+0xa8>)
{
 80007fc:	b580      	push	{r7, lr}
	if(init_ok != _True) return;
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d003      	beq.n	800080c <key_handler+0x18>
			if(gKeyTblPtr[i].mUpCallback) gKeyTblPtr[i].mUpCallback();
		#endif
			CLR_BITS(gKeyTblPtr[i].mFlags, KEY_UP);//clear bit
		}
	}
}
 8000804:	bc0c      	pop	{r2, r3}
 8000806:	4690      	mov	r8, r2
 8000808:	4699      	mov	r9, r3
 800080a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(init_ok != _True) return;
 800080c:	2400      	movs	r4, #0
 800080e:	4d24      	ldr	r5, [pc, #144]	; (80008a0 <key_handler+0xac>)
			CLR_BITS(gKeyTblPtr[i].mFlags, KEY_DOWN);//clear bit
 8000810:	337e      	adds	r3, #126	; 0x7e
 8000812:	6829      	ldr	r1, [r5, #0]
 8000814:	4698      	mov	r8, r3
		if(flags & KEY_RETRIG){
 8000816:	3b6f      	subs	r3, #111	; 0x6f
 8000818:	4699      	mov	r9, r3
		flags = gKeyTblPtr[i].mFlags;
 800081a:	190b      	adds	r3, r1, r4
 800081c:	7c1e      	ldrb	r6, [r3, #16]
		if(flags & KEY_LONG){
 800081e:	2720      	movs	r7, #32
		if(flags & KEY_DOWN){
 8000820:	b270      	sxtb	r0, r6
 8000822:	0032      	movs	r2, r6
 8000824:	2800      	cmp	r0, #0
 8000826:	db2c      	blt.n	8000882 <key_handler+0x8e>
		if(flags & KEY_LONG){
 8000828:	4237      	tst	r7, r6
 800082a:	d008      	beq.n	800083e <key_handler+0x4a>
			if(gKeyTblPtr[i].mLongCallback) gKeyTblPtr[i].mLongCallback();
 800082c:	6858      	ldr	r0, [r3, #4]
 800082e:	2800      	cmp	r0, #0
 8000830:	d003      	beq.n	800083a <key_handler+0x46>
 8000832:	4780      	blx	r0
 8000834:	6829      	ldr	r1, [r5, #0]
 8000836:	190b      	adds	r3, r1, r4
 8000838:	7c1a      	ldrb	r2, [r3, #16]
			CLR_BITS(gKeyTblPtr[i].mFlags, KEY_LONG);//clear bit
 800083a:	43ba      	bics	r2, r7
 800083c:	741a      	strb	r2, [r3, #16]
		if(flags & KEY_RETRIG){
 800083e:	4648      	mov	r0, r9
 8000840:	4230      	tst	r0, r6
 8000842:	d009      	beq.n	8000858 <key_handler+0x64>
			if(gKeyTblPtr[i].mReTrigCallback) gKeyTblPtr[i].mReTrigCallback();
 8000844:	6898      	ldr	r0, [r3, #8]
 8000846:	2800      	cmp	r0, #0
 8000848:	d003      	beq.n	8000852 <key_handler+0x5e>
 800084a:	4780      	blx	r0
 800084c:	6829      	ldr	r1, [r5, #0]
 800084e:	190b      	adds	r3, r1, r4
 8000850:	7c1a      	ldrb	r2, [r3, #16]
			CLR_BITS(gKeyTblPtr[i].mFlags, KEY_RETRIG);//clear bit
 8000852:	4648      	mov	r0, r9
 8000854:	4382      	bics	r2, r0
 8000856:	741a      	strb	r2, [r3, #16]
		if(flags & KEY_UP){
 8000858:	0670      	lsls	r0, r6, #25
 800085a:	d509      	bpl.n	8000870 <key_handler+0x7c>
			if(gKeyTblPtr[i].mUpCallback) gKeyTblPtr[i].mUpCallback();
 800085c:	68d8      	ldr	r0, [r3, #12]
 800085e:	2800      	cmp	r0, #0
 8000860:	d003      	beq.n	800086a <key_handler+0x76>
 8000862:	4780      	blx	r0
 8000864:	6829      	ldr	r1, [r5, #0]
 8000866:	190b      	adds	r3, r1, r4
 8000868:	7c1a      	ldrb	r2, [r3, #16]
			CLR_BITS(gKeyTblPtr[i].mFlags, KEY_UP);//clear bit
 800086a:	2040      	movs	r0, #64	; 0x40
 800086c:	4382      	bics	r2, r0
 800086e:	741a      	strb	r2, [r3, #16]
 8000870:	3414      	adds	r4, #20
	for(i = 0;i < KEY_MAX;i++){
 8000872:	2c28      	cmp	r4, #40	; 0x28
 8000874:	d0c6      	beq.n	8000804 <key_handler+0x10>
		flags = gKeyTblPtr[i].mFlags;
 8000876:	190b      	adds	r3, r1, r4
 8000878:	7c1e      	ldrb	r6, [r3, #16]
		if(flags & KEY_DOWN){
 800087a:	b270      	sxtb	r0, r6
 800087c:	0032      	movs	r2, r6
 800087e:	2800      	cmp	r0, #0
 8000880:	dad2      	bge.n	8000828 <key_handler+0x34>
			if(gKeyTblPtr[i].mPressCallback) gKeyTblPtr[i].mPressCallback();
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	2a00      	cmp	r2, #0
 8000886:	d007      	beq.n	8000898 <key_handler+0xa4>
 8000888:	4790      	blx	r2
 800088a:	6829      	ldr	r1, [r5, #0]
 800088c:	190b      	adds	r3, r1, r4
 800088e:	7c1a      	ldrb	r2, [r3, #16]
			CLR_BITS(gKeyTblPtr[i].mFlags, KEY_DOWN);//clear bit
 8000890:	4640      	mov	r0, r8
 8000892:	4002      	ands	r2, r0
 8000894:	741a      	strb	r2, [r3, #16]
 8000896:	e7c7      	b.n	8000828 <key_handler+0x34>
 8000898:	0032      	movs	r2, r6
 800089a:	e7f9      	b.n	8000890 <key_handler+0x9c>
 800089c:	20000062 	.word	0x20000062
 80008a0:	2000005c 	.word	0x2000005c

080008a4 <key_light_retrig_cb>:
}	

__weak void key_light_retrig_cb(void)
{

}
 80008a4:	4770      	bx	lr
 80008a6:	46c0      	nop			; (mov r8, r8)

080008a8 <key_lock_press_cb>:
{
 80008a8:	b570      	push	{r4, r5, r6, lr}
	if(e18_ms1_ipx.nwk_state == 1 && e18_ms1_ipx_send_flag == 0)
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <key_lock_press_cb+0x7c>)
{
 80008ac:	b086      	sub	sp, #24
	if(e18_ms1_ipx.nwk_state == 1 && e18_ms1_ipx_send_flag == 0)
 80008ae:	785c      	ldrb	r4, [r3, #1]
 80008b0:	2c01      	cmp	r4, #1
 80008b2:	d001      	beq.n	80008b8 <key_lock_press_cb+0x10>
}
 80008b4:	b006      	add	sp, #24
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
	if(e18_ms1_ipx.nwk_state == 1 && e18_ms1_ipx_send_flag == 0)
 80008b8:	4e1b      	ldr	r6, [pc, #108]	; (8000928 <key_lock_press_cb+0x80>)
 80008ba:	7835      	ldrb	r5, [r6, #0]
 80008bc:	2d00      	cmp	r5, #0
 80008be:	d1f9      	bne.n	80008b4 <key_lock_press_cb+0xc>
		buffer[0] = 0xFC;
 80008c0:	23fc      	movs	r3, #252	; 0xfc
 80008c2:	a801      	add	r0, sp, #4
 80008c4:	7003      	strb	r3, [r0, #0]
		buffer[1] = 0x0C;
 80008c6:	3bf0      	subs	r3, #240	; 0xf0
 80008c8:	7043      	strb	r3, [r0, #1]
		buffer[2] = 0x03;
 80008ca:	3b09      	subs	r3, #9
 80008cc:	7083      	strb	r3, [r0, #2]
		buffer[3] = 0x02;
 80008ce:	3b01      	subs	r3, #1
 80008d0:	70c3      	strb	r3, [r0, #3]
		buffer[6] = 0xAF;	//帧头
 80008d2:	33ad      	adds	r3, #173	; 0xad
 80008d4:	7183      	strb	r3, [r0, #6]
		buffer[7] = 0x06;	//长度, 不包括帧头和帧尾
 80008d6:	3ba9      	subs	r3, #169	; 0xa9
		usart1_send_data(buffer, 14);
 80008d8:	210e      	movs	r1, #14
		buffer[7] = 0x06;	//长度, 不包括帧头和帧尾
 80008da:	71c3      	strb	r3, [r0, #7]
		buffer[13] = 0xAD;	//帧尾
 80008dc:	33a7      	adds	r3, #167	; 0xa7
		buffer[4] = 0x00;	//协调器网络短地址固定为0x0000
 80008de:	7105      	strb	r5, [r0, #4]
		buffer[5] = 0x00;
 80008e0:	7145      	strb	r5, [r0, #5]
		buffer[8] = 0x01;	//命令类型
 80008e2:	7204      	strb	r4, [r0, #8]
		buffer[9] = 0x00;	//参数, 无效时置0
 80008e4:	7245      	strb	r5, [r0, #9]
		buffer[10] = 0x00;
 80008e6:	7285      	strb	r5, [r0, #10]
		buffer[11] = 0x00;
 80008e8:	72c5      	strb	r5, [r0, #11]
		buffer[12] = 0x00;
 80008ea:	7305      	strb	r5, [r0, #12]
		buffer[13] = 0xAD;	//帧尾
 80008ec:	7343      	strb	r3, [r0, #13]
		usart1_send_data(buffer, 14);
 80008ee:	f000 fb7f 	bl	8000ff0 <usart1_send_data>
		e18_ms1_ipx_send_key = 0;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <key_lock_press_cb+0x84>)
		led_blink_clear(0);
 80008f4:	2000      	movs	r0, #0
		e18_ms1_ipx_send_key = 0;
 80008f6:	701d      	strb	r5, [r3, #0]
		e18_ms1_ipx_overtime_flag = 0;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <key_lock_press_cb+0x88>)
		e18_ms1_ipx_send_flag = 1;
 80008fa:	7034      	strb	r4, [r6, #0]
		e18_ms1_ipx_overtime_flag = 0;
 80008fc:	701d      	strb	r5, [r3, #0]
		e18_ms1_ipx_overtime_cnt = 0;
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <key_lock_press_cb+0x8c>)
 8000900:	601d      	str	r5, [r3, #0]
		led_blink_clear(0);
 8000902:	f000 f925 	bl	8000b50 <led_blink_clear>
		led_blink(0, 100, 1000);
 8000906:	22fa      	movs	r2, #250	; 0xfa
 8000908:	2164      	movs	r1, #100	; 0x64
 800090a:	0092      	lsls	r2, r2, #2
 800090c:	2000      	movs	r0, #0
 800090e:	f000 f875 	bl	80009fc <led_blink>
		beep_oscillation_clear();
 8000912:	f7ff fce1 	bl	80002d8 <beep_oscillation_clear>
		beep_oscillation(100, 500);
 8000916:	21fa      	movs	r1, #250	; 0xfa
 8000918:	2064      	movs	r0, #100	; 0x64
 800091a:	0049      	lsls	r1, r1, #1
 800091c:	f7ff fc80 	bl	8000220 <beep_oscillation>
}
 8000920:	e7c8      	b.n	80008b4 <key_lock_press_cb+0xc>
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	200000f8 	.word	0x200000f8
 8000928:	20000055 	.word	0x20000055
 800092c:	20000056 	.word	0x20000056
 8000930:	20000054 	.word	0x20000054
 8000934:	20000050 	.word	0x20000050

08000938 <key_light_press_cb>:
{
 8000938:	b570      	push	{r4, r5, r6, lr}
	if(e18_ms1_ipx.nwk_state == 1 && e18_ms1_ipx_send_flag == 0)
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <key_light_press_cb+0x80>)
{
 800093c:	b086      	sub	sp, #24
	if(e18_ms1_ipx.nwk_state == 1 && e18_ms1_ipx_send_flag == 0)
 800093e:	785c      	ldrb	r4, [r3, #1]
 8000940:	2c01      	cmp	r4, #1
 8000942:	d001      	beq.n	8000948 <key_light_press_cb+0x10>
}
 8000944:	b006      	add	sp, #24
 8000946:	bd70      	pop	{r4, r5, r6, pc}
	if(e18_ms1_ipx.nwk_state == 1 && e18_ms1_ipx_send_flag == 0)
 8000948:	4e1c      	ldr	r6, [pc, #112]	; (80009bc <key_light_press_cb+0x84>)
 800094a:	7835      	ldrb	r5, [r6, #0]
 800094c:	2d00      	cmp	r5, #0
 800094e:	d1f9      	bne.n	8000944 <key_light_press_cb+0xc>
		buffer[0] = 0xFC;
 8000950:	23fc      	movs	r3, #252	; 0xfc
		buffer[6] = 0xAF;	//帧头
 8000952:	22af      	movs	r2, #175	; 0xaf
		buffer[0] = 0xFC;
 8000954:	a801      	add	r0, sp, #4
 8000956:	7003      	strb	r3, [r0, #0]
		buffer[1] = 0x0C;
 8000958:	3bf0      	subs	r3, #240	; 0xf0
 800095a:	7043      	strb	r3, [r0, #1]
		buffer[2] = 0x03;
 800095c:	3b09      	subs	r3, #9
 800095e:	7083      	strb	r3, [r0, #2]
		buffer[3] = 0x02;
 8000960:	3b01      	subs	r3, #1
 8000962:	70c3      	strb	r3, [r0, #3]
		buffer[8] = 0x02;	//命令类型
 8000964:	7203      	strb	r3, [r0, #8]
		buffer[11] = 0x3A;	//默认点亮外置灯15s
 8000966:	3338      	adds	r3, #56	; 0x38
 8000968:	72c3      	strb	r3, [r0, #11]
		buffer[12] = 0x98;
 800096a:	335e      	adds	r3, #94	; 0x5e
		usart1_send_data(buffer, 14);
 800096c:	210e      	movs	r1, #14
		buffer[6] = 0xAF;	//帧头
 800096e:	7182      	strb	r2, [r0, #6]
		buffer[12] = 0x98;
 8000970:	7303      	strb	r3, [r0, #12]
		buffer[7] = 0x06;	//长度, 不包括帧头和帧尾
 8000972:	3aa9      	subs	r2, #169	; 0xa9
		buffer[13] = 0xAD;	//帧尾
 8000974:	3315      	adds	r3, #21
		buffer[7] = 0x06;	//长度, 不包括帧头和帧尾
 8000976:	71c2      	strb	r2, [r0, #7]
		buffer[4] = 0x00;	//协调器网络短地址固定为0x0000
 8000978:	7105      	strb	r5, [r0, #4]
		buffer[5] = 0x00;
 800097a:	7145      	strb	r5, [r0, #5]
		buffer[9] = 0x00;	//参数(4byte), 无效时置0
 800097c:	7245      	strb	r5, [r0, #9]
		buffer[10] = 0x00;
 800097e:	7285      	strb	r5, [r0, #10]
		buffer[13] = 0xAD;	//帧尾
 8000980:	7343      	strb	r3, [r0, #13]
		usart1_send_data(buffer, 14);
 8000982:	f000 fb35 	bl	8000ff0 <usart1_send_data>
		e18_ms1_ipx_send_key = 1;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <key_light_press_cb+0x88>)
		led_blink_clear(1);
 8000988:	2001      	movs	r0, #1
		e18_ms1_ipx_send_key = 1;
 800098a:	701c      	strb	r4, [r3, #0]
		e18_ms1_ipx_overtime_flag = 0;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <key_light_press_cb+0x8c>)
		e18_ms1_ipx_send_flag = 1;
 800098e:	7034      	strb	r4, [r6, #0]
		e18_ms1_ipx_overtime_flag = 0;
 8000990:	701d      	strb	r5, [r3, #0]
		e18_ms1_ipx_overtime_cnt = 0;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <key_light_press_cb+0x90>)
 8000994:	601d      	str	r5, [r3, #0]
		led_blink_clear(1);
 8000996:	f000 f8db 	bl	8000b50 <led_blink_clear>
		led_blink(1, 100, 1000);
 800099a:	22fa      	movs	r2, #250	; 0xfa
 800099c:	2164      	movs	r1, #100	; 0x64
 800099e:	0092      	lsls	r2, r2, #2
 80009a0:	2001      	movs	r0, #1
 80009a2:	f000 f82b 	bl	80009fc <led_blink>
		beep_oscillation_clear();
 80009a6:	f7ff fc97 	bl	80002d8 <beep_oscillation_clear>
		beep_oscillation(100, 500);
 80009aa:	21fa      	movs	r1, #250	; 0xfa
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	0049      	lsls	r1, r1, #1
 80009b0:	f7ff fc36 	bl	8000220 <beep_oscillation>
}
 80009b4:	e7c6      	b.n	8000944 <key_light_press_cb+0xc>
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	200000f8 	.word	0x200000f8
 80009bc:	20000055 	.word	0x20000055
 80009c0:	20000056 	.word	0x20000056
 80009c4:	20000054 	.word	0x20000054
 80009c8:	20000050 	.word	0x20000050

080009cc <key_light_release_cb>:
 80009cc:	4770      	bx	lr
 80009ce:	46c0      	nop			; (mov r8, r8)

080009d0 <key_lock_long_cb>:
 80009d0:	4770      	bx	lr
 80009d2:	46c0      	nop			; (mov r8, r8)

080009d4 <key_lock_release_cb>:
 80009d4:	4770      	bx	lr
 80009d6:	46c0      	nop			; (mov r8, r8)

080009d8 <key_lock_retrig_cb>:
 80009d8:	4770      	bx	lr
 80009da:	46c0      	nop			; (mov r8, r8)

080009dc <key_light_long_cb>:
 80009dc:	4770      	bx	lr
 80009de:	46c0      	nop			; (mov r8, r8)

080009e0 <key_gpio_config>:
}
 80009e0:	4770      	bx	lr
 80009e2:	46c0      	nop			; (mov r8, r8)

080009e4 <key_init>:
{
 80009e4:	b510      	push	{r4, lr}
	load_key_tbl(gKeyTbl, gCallback);
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <key_init+0x10>)
 80009e8:	4903      	ldr	r1, [pc, #12]	; (80009f8 <key_init+0x14>)
 80009ea:	f7ff fe2b 	bl	8000644 <load_key_tbl>
}
 80009ee:	2000      	movs	r0, #0
 80009f0:	bd10      	pop	{r4, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000064 	.word	0x20000064
 80009f8:	0800290c 	.word	0x0800290c

080009fc <led_blink>:

//1ms进入定时器, 2ms为一个周期, 最高频率是500Hz
//half_cycle_ms是点亮或熄灭时间, time_ms是闪烁有效时间
//half_cycle_ms=0点亮不闪烁, time_ms=0时间直到宇宙毁灭
void led_blink(uint8_t number, uint32_t half_cycle_ms, uint32_t time_ms)
{
 80009fc:	b510      	push	{r4, lr}
	switch(number)
 80009fe:	2800      	cmp	r0, #0
 8000a00:	d00f      	beq.n	8000a22 <led_blink+0x26>
 8000a02:	2801      	cmp	r0, #1
 8000a04:	d122      	bne.n	8000a4c <led_blink+0x50>
				LED_LOCK_ON();
				led_lock_flag = 1;
			}
		break;
		case 1:
			if(led_light_flag == 0)
 8000a06:	4c16      	ldr	r4, [pc, #88]	; (8000a60 <led_blink+0x64>)
 8000a08:	7823      	ldrb	r3, [r4, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d11e      	bne.n	8000a4c <led_blink+0x50>
			{
				led_light_half_cycle_ms = half_cycle_ms;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <led_blink+0x68>)
 8000a10:	6019      	str	r1, [r3, #0]
				led_light_time_ms = time_ms;
				if(time_ms != 0 && time_ms < led_light_half_cycle_ms) led_light_time_ms = led_light_half_cycle_ms << 1;
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	d01b      	beq.n	8000a4e <led_blink+0x52>
 8000a16:	4291      	cmp	r1, r2
 8000a18:	d919      	bls.n	8000a4e <led_blink+0x52>
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <led_blink+0x6c>)
 8000a1c:	0049      	lsls	r1, r1, #1
 8000a1e:	6019      	str	r1, [r3, #0]
 8000a20:	e017      	b.n	8000a52 <led_blink+0x56>
			if(led_lock_flag == 0)
 8000a22:	4c12      	ldr	r4, [pc, #72]	; (8000a6c <led_blink+0x70>)
 8000a24:	7823      	ldrb	r3, [r4, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d110      	bne.n	8000a4c <led_blink+0x50>
				led_lock_half_cycle_ms = half_cycle_ms;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <led_blink+0x74>)
 8000a2c:	6019      	str	r1, [r3, #0]
				if(time_ms != 0 && time_ms < led_lock_half_cycle_ms) led_lock_time_ms = led_lock_half_cycle_ms << 1;
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	d012      	beq.n	8000a58 <led_blink+0x5c>
 8000a32:	4291      	cmp	r1, r2
 8000a34:	d910      	bls.n	8000a58 <led_blink+0x5c>
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <led_blink+0x78>)
 8000a38:	0049      	lsls	r1, r1, #1
 8000a3a:	6019      	str	r1, [r3, #0]
				LED_LOCK_ON();
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2180      	movs	r1, #128	; 0x80
				LED_LIGHT_ON();
 8000a40:	2090      	movs	r0, #144	; 0x90
 8000a42:	05c0      	lsls	r0, r0, #23
 8000a44:	f000 fdfe 	bl	8001644 <HAL_GPIO_WritePin>
				led_light_flag = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	7023      	strb	r3, [r4, #0]
			}
		break;
	}
}
 8000a4c:	bd10      	pop	{r4, pc}
				led_light_time_ms = time_ms;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <led_blink+0x6c>)
 8000a50:	601a      	str	r2, [r3, #0]
				LED_LIGHT_ON();
 8000a52:	2201      	movs	r2, #1
 8000a54:	2120      	movs	r1, #32
 8000a56:	e7f3      	b.n	8000a40 <led_blink+0x44>
				led_lock_time_ms = time_ms;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <led_blink+0x78>)
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	e7ee      	b.n	8000a3c <led_blink+0x40>
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	20000008 	.word	0x20000008
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	20000098 	.word	0x20000098
 8000a70:	20000010 	.word	0x20000010
 8000a74:	20000014 	.word	0x20000014

08000a78 <led_blink_cnt>:

void led_blink_cnt(void)
{
 8000a78:	b510      	push	{r4, lr}
	if(led_lock_flag == 1)
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <led_blink_cnt+0xb0>)
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	2a01      	cmp	r2, #1
 8000a80:	d02b      	beq.n	8000ada <led_blink_cnt+0x62>
			led_lock_time_cnt = 0;
			LED_LOCK_OFF();
		}
	}

	if(led_light_flag == 1)
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <led_blink_cnt+0xb4>)
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	2a01      	cmp	r2, #1
 8000a88:	d000      	beq.n	8000a8c <led_blink_cnt+0x14>
			led_light_half_cycle_cnt = 0;
			led_light_time_cnt = 0;
			LED_LIGHT_OFF();
		}
	}
}
 8000a8a:	bd10      	pop	{r4, pc}
		if(led_light_time_ms == 0 || ++led_light_time_cnt < led_light_time_ms)
 8000a8c:	4a28      	ldr	r2, [pc, #160]	; (8000b30 <led_blink_cnt+0xb8>)
 8000a8e:	6811      	ldr	r1, [r2, #0]
 8000a90:	2900      	cmp	r1, #0
 8000a92:	d010      	beq.n	8000ab6 <led_blink_cnt+0x3e>
 8000a94:	4827      	ldr	r0, [pc, #156]	; (8000b34 <led_blink_cnt+0xbc>)
 8000a96:	6802      	ldr	r2, [r0, #0]
 8000a98:	3201      	adds	r2, #1
 8000a9a:	6002      	str	r2, [r0, #0]
 8000a9c:	4291      	cmp	r1, r2
 8000a9e:	d80a      	bhi.n	8000ab6 <led_blink_cnt+0x3e>
			led_light_flag = 0;
 8000aa0:	2200      	movs	r2, #0
			led_light_time_cnt = 0;
 8000aa2:	6002      	str	r2, [r0, #0]
			LED_LIGHT_OFF();
 8000aa4:	2090      	movs	r0, #144	; 0x90
			led_light_flag = 0;
 8000aa6:	701a      	strb	r2, [r3, #0]
			led_light_half_cycle_cnt = 0;
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <led_blink_cnt+0xc0>)
			LED_LIGHT_OFF();
 8000aaa:	2120      	movs	r1, #32
 8000aac:	05c0      	lsls	r0, r0, #23
			led_light_half_cycle_cnt = 0;
 8000aae:	601a      	str	r2, [r3, #0]
			LED_LIGHT_OFF();
 8000ab0:	f000 fdc8 	bl	8001644 <HAL_GPIO_WritePin>
}
 8000ab4:	e7e9      	b.n	8000a8a <led_blink_cnt+0x12>
			if(led_light_half_cycle_ms != 0 && ++led_light_half_cycle_cnt > led_light_half_cycle_ms)
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <led_blink_cnt+0xc4>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d0e5      	beq.n	8000a8a <led_blink_cnt+0x12>
 8000abe:	4c1e      	ldr	r4, [pc, #120]	; (8000b38 <led_blink_cnt+0xc0>)
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	6023      	str	r3, [r4, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d2df      	bcs.n	8000a8a <led_blink_cnt+0x12>
				LED_LIGHT_TOGGLE();
 8000aca:	2090      	movs	r0, #144	; 0x90
 8000acc:	2120      	movs	r1, #32
 8000ace:	05c0      	lsls	r0, r0, #23
 8000ad0:	f000 fdbe 	bl	8001650 <HAL_GPIO_TogglePin>
				led_light_half_cycle_cnt = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	6023      	str	r3, [r4, #0]
 8000ad8:	e7d7      	b.n	8000a8a <led_blink_cnt+0x12>
		if(led_lock_time_ms == 0 || ++led_lock_time_cnt < led_lock_time_ms)
 8000ada:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <led_blink_cnt+0xc8>)
 8000adc:	6811      	ldr	r1, [r2, #0]
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d111      	bne.n	8000b06 <led_blink_cnt+0x8e>
			if(led_lock_half_cycle_ms != 0 && ++led_lock_half_cycle_cnt > led_lock_half_cycle_ms)
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <led_blink_cnt+0xcc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0cb      	beq.n	8000a82 <led_blink_cnt+0xa>
 8000aea:	4c17      	ldr	r4, [pc, #92]	; (8000b48 <led_blink_cnt+0xd0>)
 8000aec:	6822      	ldr	r2, [r4, #0]
 8000aee:	3201      	adds	r2, #1
 8000af0:	6022      	str	r2, [r4, #0]
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d2c5      	bcs.n	8000a82 <led_blink_cnt+0xa>
				LED_LOCK_TOGGLE();
 8000af6:	2090      	movs	r0, #144	; 0x90
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	05c0      	lsls	r0, r0, #23
 8000afc:	f000 fda8 	bl	8001650 <HAL_GPIO_TogglePin>
				led_lock_half_cycle_cnt = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	6023      	str	r3, [r4, #0]
 8000b04:	e7bd      	b.n	8000a82 <led_blink_cnt+0xa>
		if(led_lock_time_ms == 0 || ++led_lock_time_cnt < led_lock_time_ms)
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <led_blink_cnt+0xd4>)
 8000b08:	6802      	ldr	r2, [r0, #0]
 8000b0a:	3201      	adds	r2, #1
 8000b0c:	6002      	str	r2, [r0, #0]
 8000b0e:	4291      	cmp	r1, r2
 8000b10:	d8e7      	bhi.n	8000ae2 <led_blink_cnt+0x6a>
			led_lock_flag = 0;
 8000b12:	2200      	movs	r2, #0
			led_lock_time_cnt = 0;
 8000b14:	6002      	str	r2, [r0, #0]
			LED_LOCK_OFF();
 8000b16:	2090      	movs	r0, #144	; 0x90
			led_lock_flag = 0;
 8000b18:	701a      	strb	r2, [r3, #0]
			led_lock_half_cycle_cnt = 0;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <led_blink_cnt+0xd0>)
			LED_LOCK_OFF();
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	05c0      	lsls	r0, r0, #23
			led_lock_half_cycle_cnt = 0;
 8000b20:	601a      	str	r2, [r3, #0]
			LED_LOCK_OFF();
 8000b22:	f000 fd8f 	bl	8001644 <HAL_GPIO_WritePin>
 8000b26:	e7ac      	b.n	8000a82 <led_blink_cnt+0xa>
 8000b28:	20000098 	.word	0x20000098
 8000b2c:	2000008c 	.word	0x2000008c
 8000b30:	2000000c 	.word	0x2000000c
 8000b34:	20000094 	.word	0x20000094
 8000b38:	20000090 	.word	0x20000090
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000014 	.word	0x20000014
 8000b44:	20000010 	.word	0x20000010
 8000b48:	2000009c 	.word	0x2000009c
 8000b4c:	200000a0 	.word	0x200000a0

08000b50 <led_blink_clear>:

void led_blink_clear(uint8_t number)
{
 8000b50:	b510      	push	{r4, lr}
	switch(number)
 8000b52:	2800      	cmp	r0, #0
 8000b54:	d016      	beq.n	8000b84 <led_blink_clear+0x34>
 8000b56:	2801      	cmp	r0, #1
 8000b58:	d113      	bne.n	8000b82 <led_blink_clear+0x32>
			led_lock_half_cycle_cnt = 0;
			led_lock_time_cnt = 0;
			LED_LOCK_OFF();
		break;
		case 1:
			led_light_flag = 0;
 8000b5a:	2300      	movs	r3, #0
			led_light_half_cycle_ms = 500;
 8000b5c:	21fa      	movs	r1, #250	; 0xfa
			led_light_time_ms = 1000;
			led_light_half_cycle_cnt = 0;
			led_light_time_cnt = 0;
			LED_LIGHT_OFF();
 8000b5e:	2090      	movs	r0, #144	; 0x90
			led_light_flag = 0;
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <led_blink_clear+0x5c>)
			led_light_half_cycle_ms = 500;
 8000b62:	0049      	lsls	r1, r1, #1
			led_light_flag = 0;
 8000b64:	7013      	strb	r3, [r2, #0]
			led_light_half_cycle_ms = 500;
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <led_blink_clear+0x60>)
			LED_LIGHT_OFF();
 8000b68:	05c0      	lsls	r0, r0, #23
			led_light_half_cycle_ms = 500;
 8000b6a:	6011      	str	r1, [r2, #0]
			led_light_time_ms = 1000;
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <led_blink_clear+0x64>)
 8000b6e:	1849      	adds	r1, r1, r1
 8000b70:	6011      	str	r1, [r2, #0]
			led_light_half_cycle_cnt = 0;
 8000b72:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <led_blink_clear+0x68>)
			LED_LIGHT_OFF();
 8000b74:	2120      	movs	r1, #32
			led_light_half_cycle_cnt = 0;
 8000b76:	6013      	str	r3, [r2, #0]
			led_light_time_cnt = 0;
 8000b78:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <led_blink_clear+0x6c>)
 8000b7a:	6013      	str	r3, [r2, #0]
			LED_LIGHT_OFF();
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f000 fd61 	bl	8001644 <HAL_GPIO_WritePin>
		break;
	}
}
 8000b82:	bd10      	pop	{r4, pc}
			led_lock_half_cycle_ms = 500;
 8000b84:	22fa      	movs	r2, #250	; 0xfa
			led_lock_flag = 0;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <led_blink_clear+0x70>)
			led_lock_half_cycle_ms = 500;
 8000b88:	0052      	lsls	r2, r2, #1
			led_lock_flag = 0;
 8000b8a:	7018      	strb	r0, [r3, #0]
			led_lock_half_cycle_ms = 500;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <led_blink_clear+0x74>)
			LED_LOCK_OFF();
 8000b8e:	2180      	movs	r1, #128	; 0x80
			led_lock_half_cycle_ms = 500;
 8000b90:	601a      	str	r2, [r3, #0]
			led_lock_time_ms = 1000;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <led_blink_clear+0x78>)
 8000b94:	1892      	adds	r2, r2, r2
 8000b96:	601a      	str	r2, [r3, #0]
			led_lock_half_cycle_cnt = 0;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <led_blink_clear+0x7c>)
			LED_LOCK_OFF();
 8000b9a:	2200      	movs	r2, #0
			led_lock_half_cycle_cnt = 0;
 8000b9c:	6018      	str	r0, [r3, #0]
			led_lock_time_cnt = 0;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <led_blink_clear+0x80>)
 8000ba0:	6018      	str	r0, [r3, #0]
			LED_LOCK_OFF();
 8000ba2:	2090      	movs	r0, #144	; 0x90
 8000ba4:	05c0      	lsls	r0, r0, #23
 8000ba6:	f000 fd4d 	bl	8001644 <HAL_GPIO_WritePin>
		break;
 8000baa:	e7ea      	b.n	8000b82 <led_blink_clear+0x32>
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	2000000c 	.word	0x2000000c
 8000bb8:	20000090 	.word	0x20000090
 8000bbc:	20000094 	.word	0x20000094
 8000bc0:	20000098 	.word	0x20000098
 8000bc4:	20000010 	.word	0x20000010
 8000bc8:	20000014 	.word	0x20000014
 8000bcc:	2000009c 	.word	0x2000009c
 8000bd0:	200000a0 	.word	0x200000a0

08000bd4 <list_init>:
#include "list.h"

void list_init(struct list *head){
	head->m_node.m_prev = &(head->m_node);
 8000bd4:	6000      	str	r0, [r0, #0]
	head->m_node.m_next = &(head->m_node);
 8000bd6:	6040      	str	r0, [r0, #4]
}
 8000bd8:	4770      	bx	lr
 8000bda:	46c0      	nop			; (mov r8, r8)

08000bdc <list_insert_tail>:
void list_insert_front(struct list *head, struct node *newnode){
	_list_insert(newnode, &(head->m_node), head->m_node.m_next);
}

void list_insert_tail(struct list *head, struct node *newnode){
	_list_insert(newnode, head->m_node.m_prev, &(head->m_node));
 8000bdc:	6803      	ldr	r3, [r0, #0]
	next->m_prev = newnode;
 8000bde:	6001      	str	r1, [r0, #0]
	newnode->m_next = next;
 8000be0:	6048      	str	r0, [r1, #4]
	prev->m_next = newnode;
 8000be2:	6059      	str	r1, [r3, #4]
	newnode->m_prev = prev;
 8000be4:	600b      	str	r3, [r1, #0]
}
 8000be6:	4770      	bx	lr

08000be8 <on_tick>:
		HAL_Delay(10);
	}
}

void on_tick(softtimer *timer)
{
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	46c6      	mov	lr, r8
 8000bec:	b500      	push	{lr}
	uint16_t i, len;
	uint8_t buffer[MAXQSIZE];

	if(timer == &usart1_timer)
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <on_tick+0x60>)
{
 8000bf0:	b090      	sub	sp, #64	; 0x40
	if(timer == &usart1_timer)
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d003      	beq.n	8000bfe <on_tick+0x16>
		usart1_rx_size = len;
		memcpy(usart1_rx_buffer, buffer, usart1_rx_size);

		e18_ms1_ipx_protocol_handle(buffer, len);
	}
}
 8000bf6:	b010      	add	sp, #64	; 0x40
 8000bf8:	bc04      	pop	{r2}
 8000bfa:	4690      	mov	r8, r2
 8000bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		timer_stop(&usart1_timer);
 8000bfe:	f000 f8f9 	bl	8000df4 <timer_stop>
		len = length(&usart1_queue);
 8000c02:	4e12      	ldr	r6, [pc, #72]	; (8000c4c <on_tick+0x64>)
 8000c04:	0030      	movs	r0, r6
 8000c06:	f000 f97d 	bl	8000f04 <length>
 8000c0a:	b283      	uxth	r3, r0
 8000c0c:	0007      	movs	r7, r0
 8000c0e:	4698      	mov	r8, r3
		if(len == 0) return ;
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0f0      	beq.n	8000bf6 <on_tick+0xe>
 8000c14:	466c      	mov	r4, sp
 8000c16:	1e5d      	subs	r5, r3, #1
 8000c18:	b2ad      	uxth	r5, r5
 8000c1a:	3501      	adds	r5, #1
 8000c1c:	446d      	add	r5, sp
			dequeue(&usart1_queue, &buffer[i]);
 8000c1e:	0021      	movs	r1, r4
 8000c20:	0030      	movs	r0, r6
 8000c22:	3401      	adds	r4, #1
 8000c24:	f000 f95e 	bl	8000ee4 <dequeue>
		for(i = 0; i < len; i++)
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	d1f8      	bne.n	8000c1e <on_tick+0x36>
		usart1_rx_size = len;
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <on_tick+0x68>)
		memcpy(usart1_rx_buffer, buffer, usart1_rx_size);
 8000c30:	4669      	mov	r1, sp
		usart1_rx_size = len;
 8000c32:	801a      	strh	r2, [r3, #0]
		memcpy(usart1_rx_buffer, buffer, usart1_rx_size);
 8000c34:	043a      	lsls	r2, r7, #16
 8000c36:	0c12      	lsrs	r2, r2, #16
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <on_tick+0x6c>)
 8000c3a:	f001 fe2b 	bl	8002894 <memcpy>
		e18_ms1_ipx_protocol_handle(buffer, len);
 8000c3e:	4641      	mov	r1, r8
 8000c40:	4668      	mov	r0, sp
 8000c42:	f7ff fc31 	bl	80004a8 <e18_ms1_ipx_protocol_handle>
 8000c46:	e7d6      	b.n	8000bf6 <on_tick+0xe>
 8000c48:	20000144 	.word	0x20000144
 8000c4c:	2000013c 	.word	0x2000013c
 8000c50:	200000f4 	.word	0x200000f4
 8000c54:	2000015c 	.word	0x2000015c

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b510      	push	{r4, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5c:	2230      	movs	r2, #48	; 0x30
 8000c5e:	2100      	movs	r1, #0
 8000c60:	a808      	add	r0, sp, #32
 8000c62:	f001 fe20 	bl	80028a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c66:	2210      	movs	r2, #16
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4668      	mov	r0, sp
 8000c6c:	f001 fe1b 	bl	80028a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c70:	2100      	movs	r1, #0
 8000c72:	2210      	movs	r2, #16
 8000c74:	a804      	add	r0, sp, #16
 8000c76:	f001 fe16 	bl	80028a6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7e:	3b09      	subs	r3, #9
 8000c80:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c82:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c84:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c86:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c8a:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8e:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c90:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c92:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f000 fd1a 	bl	80016cc <HAL_RCC_OscConfig>
  {
//    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c98:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9a:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ca8:	f000 ff6a 	bl	8001b80 <HAL_RCC_ClockConfig>
  {
//    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SystemClock_Config+0x6c>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cae:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000cb0:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	009b      	lsls	r3, r3, #2
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000cb6:	9406      	str	r4, [sp, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cb8:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cba:	f001 f85d 	bl	8001d78 <HAL_RCCEx_PeriphCLKConfig>
  {
//    Error_Handler();
  }
}
 8000cbe:	b014      	add	sp, #80	; 0x50
 8000cc0:	bd10      	pop	{r4, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	00010001 	.word	0x00010001

08000cc8 <main>:
{
 8000cc8:	b510      	push	{r4, lr}
	HAL_Init();
 8000cca:	f000 fa11 	bl	80010f0 <HAL_Init>
	SystemClock_Config();
 8000cce:	f7ff ffc3 	bl	8000c58 <SystemClock_Config>
	MX_GPIO_Init();
 8000cd2:	f7ff fc61 	bl	8000598 <MX_GPIO_Init>
	init_queue(&usart1_queue);
 8000cd6:	4816      	ldr	r0, [pc, #88]	; (8000d30 <main+0x68>)
 8000cd8:	f000 f8e4 	bl	8000ea4 <init_queue>
	timer_init();
 8000cdc:	f000 f86c 	bl	8000db8 <timer_init>
	timer_arm(&usart1_timer, 5, on_tick, _False);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <main+0x6c>)
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	4814      	ldr	r0, [pc, #80]	; (8000d38 <main+0x70>)
 8000ce8:	f000 f86e 	bl	8000dc8 <timer_arm>
	usart1_init(115200);
 8000cec:	20e1      	movs	r0, #225	; 0xe1
 8000cee:	0240      	lsls	r0, r0, #9
 8000cf0:	f000 f962 	bl	8000fb8 <usart1_init>
	led_blink(0, 100, 1000);
 8000cf4:	22fa      	movs	r2, #250	; 0xfa
 8000cf6:	2164      	movs	r1, #100	; 0x64
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe7e 	bl	80009fc <led_blink>
	beep_oscillation(50, 1000);
 8000d00:	21fa      	movs	r1, #250	; 0xfa
 8000d02:	2032      	movs	r0, #50	; 0x32
 8000d04:	0089      	lsls	r1, r1, #2
 8000d06:	f7ff fa8b 	bl	8000220 <beep_oscillation>
	key_init();
 8000d0a:	f7ff fe6b 	bl	80009e4 <key_init>
	e18_ms1_ipx_init();
 8000d0e:	f7ff fb15 	bl	800033c <e18_ms1_ipx_init>
	power_init();
 8000d12:	f000 f815 	bl	8000d40 <power_init>
	MX_IWDG_Init();
 8000d16:	f7ff fc77 	bl	8000608 <MX_IWDG_Init>
		iwdg_feed();
 8000d1a:	f7ff fc8b 	bl	8000634 <iwdg_feed>
		key_handler();
 8000d1e:	f7ff fd69 	bl	80007f4 <key_handler>
		e18_ms1_ipx_overtime_alarm();
 8000d22:	f7ff fb97 	bl	8000454 <e18_ms1_ipx_overtime_alarm>
		HAL_Delay(10);
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 fa04 	bl	8001134 <HAL_Delay>
 8000d2c:	e7f5      	b.n	8000d1a <main+0x52>
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	2000013c 	.word	0x2000013c
 8000d34:	08000be9 	.word	0x08000be9
 8000d38:	20000144 	.word	0x20000144

08000d3c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
 8000d3e:	e7fe      	b.n	8000d3e <Error_Handler+0x2>

08000d40 <power_init>:
static uint8_t power_ac_state = 0;

uint8_t power_init(void)
{
	power_ac_flag = 1;
	power_ac_state = POWER_AC_STATE_IN();
 8000d40:	2090      	movs	r0, #144	; 0x90
	power_ac_flag = 1;
 8000d42:	2201      	movs	r2, #1
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <power_init+0x1c>)
{
 8000d46:	b510      	push	{r4, lr}
	power_ac_state = POWER_AC_STATE_IN();
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	05c0      	lsls	r0, r0, #23
	power_ac_flag = 1;
 8000d4c:	701a      	strb	r2, [r3, #0]
	power_ac_state = POWER_AC_STATE_IN();
 8000d4e:	f000 fc73 	bl	8001638 <HAL_GPIO_ReadPin>
 8000d52:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <power_init+0x20>)
 8000d54:	7018      	strb	r0, [r3, #0]

	return 0;
}
 8000d56:	2000      	movs	r0, #0
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	200000a8 	.word	0x200000a8
 8000d60:	200000a9 	.word	0x200000a9

08000d64 <power_ac_state_cnt>:
{
	return power_ac_state;
}

void power_ac_state_cnt(void)
{
 8000d64:	b570      	push	{r4, r5, r6, lr}
	static uint32_t cnt = 0;

	if(power_ac_flag == 1)
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <power_ac_state_cnt+0x48>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d000      	beq.n	8000d70 <power_ac_state_cnt+0xc>
		else
		{
			cnt = 0;
		}
	}
}
 8000d6e:	bd70      	pop	{r4, r5, r6, pc}
		if(POWER_AC_STATE_IN() != power_ac_state)
 8000d70:	2090      	movs	r0, #144	; 0x90
 8000d72:	2140      	movs	r1, #64	; 0x40
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	f000 fc5f 	bl	8001638 <HAL_GPIO_ReadPin>
 8000d7a:	4d0d      	ldr	r5, [pc, #52]	; (8000db0 <power_ac_state_cnt+0x4c>)
 8000d7c:	782b      	ldrb	r3, [r5, #0]
 8000d7e:	4283      	cmp	r3, r0
 8000d80:	d010      	beq.n	8000da4 <power_ac_state_cnt+0x40>
			if(++cnt > 2000)
 8000d82:	22fa      	movs	r2, #250	; 0xfa
 8000d84:	4c0b      	ldr	r4, [pc, #44]	; (8000db4 <power_ac_state_cnt+0x50>)
 8000d86:	00d2      	lsls	r2, r2, #3
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	6023      	str	r3, [r4, #0]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d9ed      	bls.n	8000d6e <power_ac_state_cnt+0xa>
				power_ac_state = POWER_AC_STATE_IN();
 8000d92:	2090      	movs	r0, #144	; 0x90
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	05c0      	lsls	r0, r0, #23
 8000d98:	f000 fc4e 	bl	8001638 <HAL_GPIO_ReadPin>
				cnt = 0;
 8000d9c:	2300      	movs	r3, #0
				power_ac_state = POWER_AC_STATE_IN();
 8000d9e:	7028      	strb	r0, [r5, #0]
				cnt = 0;
 8000da0:	6023      	str	r3, [r4, #0]
 8000da2:	e7e4      	b.n	8000d6e <power_ac_state_cnt+0xa>
			cnt = 0;
 8000da4:	2200      	movs	r2, #0
 8000da6:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <power_ac_state_cnt+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
}
 8000daa:	e7e0      	b.n	8000d6e <power_ac_state_cnt+0xa>
 8000dac:	200000a8 	.word	0x200000a8
 8000db0:	200000a9 	.word	0x200000a9
 8000db4:	200000a4 	.word	0x200000a4

08000db8 <timer_init>:
static struct list g_head;

/**
 *@brief 软件定时器模块初始化
 */
void timer_init(void){
 8000db8:	b510      	push	{r4, lr}
	list_init(&g_head);
 8000dba:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <timer_init+0xc>)
 8000dbc:	f7ff ff0a 	bl	8000bd4 <list_init>
}
 8000dc0:	bd10      	pop	{r4, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	200000ac 	.word	0x200000ac

08000dc8 <timer_arm>:
 *@param tick: 定时时间(定时时间=tick*硬件定时器定时周期)
 *@param cb: 定时到回调函数
 *@param repeat: 定时器是否自动重装计时
 *@retval none
 */
void timer_arm(softtimer *timer, u32_t tick, ontick_cb cb, boolean repeat){
 8000dc8:	b510      	push	{r4, lr}
	timer->m_tick = tick;
 8000dca:	6001      	str	r1, [r0, #0]
	timer->m_backup = tick;	
 8000dcc:	6041      	str	r1, [r0, #4]
	timer->m_ontick = cb;
 8000dce:	60c2      	str	r2, [r0, #12]
	
	timer->m_flags = 0x0000;
	if(repeat) TIMER_SET_BITS(timer->m_flags, Timer_Flag_Mask_Repeat);
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d000      	beq.n	8000dd6 <timer_arm+0xe>
 8000dd4:	2302      	movs	r3, #2
	
	list_insert_tail(&g_head, &(timer->m_node));
 8000dd6:	0001      	movs	r1, r0
	if(repeat) TIMER_SET_BITS(timer->m_flags, Timer_Flag_Mask_Repeat);
 8000dd8:	8103      	strh	r3, [r0, #8]
	list_insert_tail(&g_head, &(timer->m_node));
 8000dda:	3110      	adds	r1, #16
 8000ddc:	4801      	ldr	r0, [pc, #4]	; (8000de4 <timer_arm+0x1c>)
 8000dde:	f7ff fefd 	bl	8000bdc <list_insert_tail>
}
 8000de2:	bd10      	pop	{r4, pc}
 8000de4:	200000ac 	.word	0x200000ac

08000de8 <timer_start>:
 *@brief 启动定时器开始计时
 *@param timer: 定时器结构体指针
 *@retval none
 */
void timer_start(softtimer *timer){
	TIMER_SET_BITS(timer->m_flags, Timer_Flag_Mask_Enable);
 8000de8:	2201      	movs	r2, #1
 8000dea:	8903      	ldrh	r3, [r0, #8]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	8103      	strh	r3, [r0, #8]
}
 8000df0:	4770      	bx	lr
 8000df2:	46c0      	nop			; (mov r8, r8)

08000df4 <timer_stop>:
 *@brief 停止定时器
 *@param timer: 定时器结构体指针
 *@retval none
 */
void timer_stop(softtimer *timer){
	TIMER_RESET_BITS(timer->m_flags, Timer_Flag_Mask_Enable);
 8000df4:	2201      	movs	r2, #1
 8000df6:	8903      	ldrh	r3, [r0, #8]
 8000df8:	4393      	bics	r3, r2
 8000dfa:	8103      	strh	r3, [r0, #8]
	timer->m_tick = timer->m_backup;
 8000dfc:	6843      	ldr	r3, [r0, #4]
 8000dfe:	6003      	str	r3, [r0, #0]
}
 8000e00:	4770      	bx	lr
 8000e02:	46c0      	nop			; (mov r8, r8)

08000e04 <timer_exec>:
/**
 *@brief 执行减一操作, 必须放在硬件定时器中断中
 *@param none
 *@retval none
 */
void timer_exec(void){
 8000e04:	b570      	push	{r4, r5, r6, lr}
	softtimer *ptimer;
	struct node *pnode = g_head.m_node.m_next;
 8000e06:	4c0e      	ldr	r4, [pc, #56]	; (8000e40 <timer_exec+0x3c>)
	while(pnode != &(g_head.m_node)){
		ptimer = LIST_ENTRY(softtimer, m_node, pnode);
		if(TIMER_BITS(ptimer->m_flags, Timer_Flag_Mask_Enable)){
 8000e08:	2501      	movs	r5, #1
	struct node *pnode = g_head.m_node.m_next;
 8000e0a:	6863      	ldr	r3, [r4, #4]
			if(ptimer->m_tick > 0){
				ptimer->m_tick--;
			}
			if(ptimer->m_tick == 0){
				TIMER_SET_BITS(ptimer->m_flags, Timer_Flag_Mask_Expired);
 8000e0c:	2604      	movs	r6, #4
	while(pnode != &(g_head.m_node)){
 8000e0e:	42a3      	cmp	r3, r4
 8000e10:	d105      	bne.n	8000e1e <timer_exec+0x1a>
 8000e12:	e013      	b.n	8000e3c <timer_exec+0x38>
				TIMER_SET_BITS(ptimer->m_flags, Timer_Flag_Mask_Expired);
 8000e14:	4331      	orrs	r1, r6
 8000e16:	8111      	strh	r1, [r2, #8]
			}
		}
		pnode = pnode->m_next;
 8000e18:	685b      	ldr	r3, [r3, #4]
	while(pnode != &(g_head.m_node)){
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d00e      	beq.n	8000e3c <timer_exec+0x38>
		ptimer = LIST_ENTRY(softtimer, m_node, pnode);
 8000e1e:	001a      	movs	r2, r3
 8000e20:	3a10      	subs	r2, #16
		if(TIMER_BITS(ptimer->m_flags, Timer_Flag_Mask_Enable)){
 8000e22:	8911      	ldrh	r1, [r2, #8]
 8000e24:	420d      	tst	r5, r1
 8000e26:	d0f7      	beq.n	8000e18 <timer_exec+0x14>
			if(ptimer->m_tick > 0){
 8000e28:	6810      	ldr	r0, [r2, #0]
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d0f2      	beq.n	8000e14 <timer_exec+0x10>
				ptimer->m_tick--;
 8000e2e:	3801      	subs	r0, #1
 8000e30:	6010      	str	r0, [r2, #0]
			if(ptimer->m_tick == 0){
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d0ee      	beq.n	8000e14 <timer_exec+0x10>
		pnode = pnode->m_next;
 8000e36:	685b      	ldr	r3, [r3, #4]
	while(pnode != &(g_head.m_node)){
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d1f0      	bne.n	8000e1e <timer_exec+0x1a>
	}
}
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	200000ac 	.word	0x200000ac

08000e44 <timer_service>:
/**
 *@brief 在背景函数中周期遍历定时器链表查询定时器是否到期, 并触发到期定时器的回调函数
 *@param none
 *@retval none
 */
void timer_service(void){
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e46:	46ce      	mov	lr, r9
 8000e48:	4647      	mov	r7, r8
	softtimer *ptimer;
	struct node *pnode = g_head.m_node.m_next;
 8000e4a:	4e15      	ldr	r6, [pc, #84]	; (8000ea0 <timer_service+0x5c>)
void timer_service(void){
 8000e4c:	b580      	push	{r7, lr}
	struct node *pnode = g_head.m_node.m_next;
 8000e4e:	6874      	ldr	r4, [r6, #4]
	while(pnode != &(g_head.m_node)){
 8000e50:	42b4      	cmp	r4, r6
 8000e52:	d021      	beq.n	8000e98 <timer_service+0x54>
		ptimer = LIST_ENTRY(softtimer, m_node, pnode);
		if(TIMER_BITS(ptimer->m_flags, Timer_Flag_Mask_Expired)){
			timer_stop(ptimer);
			TIMER_RESET_BITS(ptimer->m_flags, Timer_Flag_Mask_Expired);
 8000e54:	2305      	movs	r3, #5
 8000e56:	4699      	mov	r9, r3
			ptimer->m_ontick(ptimer);
			
			if(TIMER_BITS(ptimer->m_flags, Timer_Flag_Mask_Repeat)){
 8000e58:	3b03      	subs	r3, #3
		if(TIMER_BITS(ptimer->m_flags, Timer_Flag_Mask_Expired)){
 8000e5a:	2704      	movs	r7, #4
			if(TIMER_BITS(ptimer->m_flags, Timer_Flag_Mask_Repeat)){
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	e002      	b.n	8000e66 <timer_service+0x22>
				ptimer->m_tick = ptimer->m_backup;
				timer_start(ptimer);
			}
		}
		pnode = pnode->m_next;
 8000e60:	6864      	ldr	r4, [r4, #4]
	while(pnode != &(g_head.m_node)){
 8000e62:	42b4      	cmp	r4, r6
 8000e64:	d018      	beq.n	8000e98 <timer_service+0x54>
		ptimer = LIST_ENTRY(softtimer, m_node, pnode);
 8000e66:	0025      	movs	r5, r4
 8000e68:	3d10      	subs	r5, #16
		if(TIMER_BITS(ptimer->m_flags, Timer_Flag_Mask_Expired)){
 8000e6a:	892b      	ldrh	r3, [r5, #8]
 8000e6c:	421f      	tst	r7, r3
 8000e6e:	d0f7      	beq.n	8000e60 <timer_service+0x1c>
	timer->m_tick = timer->m_backup;
 8000e70:	686a      	ldr	r2, [r5, #4]
			ptimer->m_ontick(ptimer);
 8000e72:	0028      	movs	r0, r5
	timer->m_tick = timer->m_backup;
 8000e74:	602a      	str	r2, [r5, #0]
			TIMER_RESET_BITS(ptimer->m_flags, Timer_Flag_Mask_Expired);
 8000e76:	464a      	mov	r2, r9
 8000e78:	4393      	bics	r3, r2
 8000e7a:	812b      	strh	r3, [r5, #8]
			ptimer->m_ontick(ptimer);
 8000e7c:	68eb      	ldr	r3, [r5, #12]
 8000e7e:	4798      	blx	r3
			if(TIMER_BITS(ptimer->m_flags, Timer_Flag_Mask_Repeat)){
 8000e80:	4642      	mov	r2, r8
 8000e82:	892b      	ldrh	r3, [r5, #8]
 8000e84:	421a      	tst	r2, r3
 8000e86:	d0eb      	beq.n	8000e60 <timer_service+0x1c>
				ptimer->m_tick = ptimer->m_backup;
 8000e88:	686a      	ldr	r2, [r5, #4]
		pnode = pnode->m_next;
 8000e8a:	6864      	ldr	r4, [r4, #4]
				ptimer->m_tick = ptimer->m_backup;
 8000e8c:	602a      	str	r2, [r5, #0]
	TIMER_SET_BITS(timer->m_flags, Timer_Flag_Mask_Enable);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4313      	orrs	r3, r2
 8000e92:	812b      	strh	r3, [r5, #8]
	while(pnode != &(g_head.m_node)){
 8000e94:	42b4      	cmp	r4, r6
 8000e96:	d1e6      	bne.n	8000e66 <timer_service+0x22>
	}
}
 8000e98:	bc0c      	pop	{r2, r3}
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea0:	200000ac 	.word	0x200000ac

08000ea4 <init_queue>:
 *@brief 初始化队列(为队列分配内存)
 *@param q: 队列指针
 *@retval none
 */
void init_queue(sqqueue *q)
{
 8000ea4:	b570      	push	{r4, r5, r6, lr}
  static ElemType e[MAXQSIZE];
  memset(e, 0, MAXQSIZE * sizeof(ElemType));
 8000ea6:	4d05      	ldr	r5, [pc, #20]	; (8000ebc <init_queue+0x18>)
{
 8000ea8:	0004      	movs	r4, r0
  memset(e, 0, MAXQSIZE * sizeof(ElemType));
 8000eaa:	2240      	movs	r2, #64	; 0x40
 8000eac:	0028      	movs	r0, r5
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f001 fcf9 	bl	80028a6 <memset>

  q->m_base = e;
  q->m_front = 0;
 8000eb4:	2300      	movs	r3, #0
  q->m_base = e;
 8000eb6:	6025      	str	r5, [r4, #0]
  q->m_front = 0;
 8000eb8:	6063      	str	r3, [r4, #4]
  q->m_rear = 0;
}
 8000eba:	bd70      	pop	{r4, r5, r6, pc}
 8000ebc:	200000b4 	.word	0x200000b4

08000ec0 <enqueue>:
 *@retval true: 插入成功, false: 插入失败
 */
boolean enqueue(sqqueue *q, ElemType e)
{
  //队列满
  if((q->m_rear + 1) % MAXQSIZE == q->m_front) return _False;
 8000ec0:	233f      	movs	r3, #63	; 0x3f
{
 8000ec2:	b530      	push	{r4, r5, lr}
  if((q->m_rear + 1) % MAXQSIZE == q->m_front) return _False;
 8000ec4:	88c4      	ldrh	r4, [r0, #6]
 8000ec6:	8885      	ldrh	r5, [r0, #4]
 8000ec8:	1c62      	adds	r2, r4, #1
 8000eca:	401a      	ands	r2, r3
 8000ecc:	42aa      	cmp	r2, r5
 8000ece:	d007      	beq.n	8000ee0 <enqueue+0x20>

  q->m_base[q->m_rear] = e;
 8000ed0:	6802      	ldr	r2, [r0, #0]
 8000ed2:	5511      	strb	r1, [r2, r4]
  q->m_rear = (q->m_rear + 1) % MAXQSIZE;
 8000ed4:	88c2      	ldrh	r2, [r0, #6]
 8000ed6:	3201      	adds	r2, #1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	80c3      	strh	r3, [r0, #6]
  return _True;
 8000edc:	2001      	movs	r0, #1
}
 8000ede:	bd30      	pop	{r4, r5, pc}
  if((q->m_rear + 1) % MAXQSIZE == q->m_front) return _False;
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	e7fc      	b.n	8000ede <enqueue+0x1e>

08000ee4 <dequeue>:
 *@retval true: 成功, false: 失败
 */
boolean dequeue(sqqueue *q, ElemType *eout)
{
  //队列空
  if(q->m_front == q->m_rear) return _False;
 8000ee4:	8883      	ldrh	r3, [r0, #4]
 8000ee6:	88c2      	ldrh	r2, [r0, #6]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d009      	beq.n	8000f00 <dequeue+0x1c>

  *eout = q->m_base[q->m_front];
 8000eec:	6802      	ldr	r2, [r0, #0]
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	700b      	strb	r3, [r1, #0]
  q->m_front = (q->m_front + 1) % MAXQSIZE;
 8000ef2:	233f      	movs	r3, #63	; 0x3f
 8000ef4:	8882      	ldrh	r2, [r0, #4]
 8000ef6:	3201      	adds	r2, #1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	8083      	strh	r3, [r0, #4]
  return _True;
 8000efc:	2001      	movs	r0, #1
}
 8000efe:	4770      	bx	lr
  if(q->m_front == q->m_rear) return _False;
 8000f00:	2000      	movs	r0, #0
 8000f02:	e7fc      	b.n	8000efe <dequeue+0x1a>

08000f04 <length>:
 *@param q: 队列指针
 *@retval 元素个数
 */
u32_t length(sqqueue *q)
{
  return (q->m_rear - q->m_front + MAXQSIZE) % MAXQSIZE;
 8000f04:	88c3      	ldrh	r3, [r0, #6]
 8000f06:	8880      	ldrh	r0, [r0, #4]
 8000f08:	1a1b      	subs	r3, r3, r0
 8000f0a:	203f      	movs	r0, #63	; 0x3f
 8000f0c:	3340      	adds	r3, #64	; 0x40
 8000f0e:	17da      	asrs	r2, r3, #31
 8000f10:	0e92      	lsrs	r2, r2, #26
 8000f12:	189b      	adds	r3, r3, r2
 8000f14:	4018      	ands	r0, r3
 8000f16:	1a80      	subs	r0, r0, r2
}
 8000f18:	4770      	bx	lr
 8000f1a:	46c0      	nop			; (mov r8, r8)

08000f1c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_MspInit+0x2c>)
{
 8000f20:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	6999      	ldr	r1, [r3, #24]
 8000f24:	4311      	orrs	r1, r2
 8000f26:	6199      	str	r1, [r3, #24]
 8000f28:	6999      	ldr	r1, [r3, #24]
 8000f2a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	9200      	str	r2, [sp, #0]
 8000f30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	69da      	ldr	r2, [r3, #28]
 8000f34:	0549      	lsls	r1, r1, #21
 8000f36:	430a      	orrs	r2, r1
 8000f38:	61da      	str	r2, [r3, #28]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	b002      	add	sp, #8
 8000f44:	4770      	bx	lr
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	40021000 	.word	0x40021000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler>
 8000f4e:	46c0      	nop			; (mov r8, r8)

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	e7fe      	b.n	8000f50 <HardFault_Handler>
 8000f52:	46c0      	nop			; (mov r8, r8)

08000f54 <SVC_Handler>:
 8000f54:	4770      	bx	lr
 8000f56:	46c0      	nop			; (mov r8, r8)

08000f58 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f58:	4770      	bx	lr
 8000f5a:	46c0      	nop			; (mov r8, r8)

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5e:	f000 f8d7 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000f62:	f000 f953 	bl	800120c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bd10      	pop	{r4, pc}

08000f68 <USART1_IRQHandler>:
/******************************************************************************/
/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f68:	b530      	push	{r4, r5, lr}
	uint8_t rxgetch;
	extern softtimer usart1_timer;
	extern sqqueue usart1_queue;

  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET)
 8000f6a:	4c0f      	ldr	r4, [pc, #60]	; (8000fa8 <USART1_IRQHandler+0x40>)
{
 8000f6c:	b083      	sub	sp, #12
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET)
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	069b      	lsls	r3, r3, #26
 8000f74:	d513      	bpl.n	8000f9e <USART1_IRQHandler+0x36>
	{
		HAL_UART_Receive(&huart1, &rxgetch, 1, 1000);
 8000f76:	466b      	mov	r3, sp
 8000f78:	1ddd      	adds	r5, r3, #7
 8000f7a:	23fa      	movs	r3, #250	; 0xfa
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	0029      	movs	r1, r5
 8000f82:	0020      	movs	r0, r4
 8000f84:	f001 f876 	bl	8002074 <HAL_UART_Receive>
		enqueue(&usart1_queue, (ElemType)rxgetch);
 8000f88:	7829      	ldrb	r1, [r5, #0]
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <USART1_IRQHandler+0x44>)
 8000f8c:	f7ff ff98 	bl	8000ec0 <enqueue>
		timer_stop(&usart1_timer);
 8000f90:	4d07      	ldr	r5, [pc, #28]	; (8000fb0 <USART1_IRQHandler+0x48>)
 8000f92:	0028      	movs	r0, r5
 8000f94:	f7ff ff2e 	bl	8000df4 <timer_stop>
		timer_start(&usart1_timer);
 8000f98:	0028      	movs	r0, r5
 8000f9a:	f7ff ff25 	bl	8000de8 <timer_start>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f001 f95a 	bl	8002258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd30      	pop	{r4, r5, pc}
 8000fa8:	2000019c 	.word	0x2000019c
 8000fac:	2000013c 	.word	0x2000013c
 8000fb0:	20000144 	.word	0x20000144

08000fb4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fb4:	4770      	bx	lr
 8000fb6:	46c0      	nop			; (mov r8, r8)

08000fb8 <usart1_init>:
}

/* USART1 init function */

void usart1_init(uint32_t baud)
{
 8000fb8:	b510      	push	{r4, lr}

  huart1.Instance = USART1;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <usart1_init+0x30>)
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <usart1_init+0x34>)
  huart1.Init.BaudRate = baud;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fbe:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8000fc0:	6023      	str	r3, [r4, #0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	2300      	movs	r3, #0
  huart1.Init.BaudRate = baud;
 8000fc4:	6060      	str	r0, [r4, #4]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc6:	0020      	movs	r0, r4
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc8:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fca:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fcc:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fce:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd0:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd2:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd4:	6223      	str	r3, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd6:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd8:	f001 fb52 	bl	8002680 <HAL_UART_Init>
  {
//    Error_Handler();
  }
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000fdc:	2120      	movs	r1, #32
 8000fde:	6822      	ldr	r2, [r4, #0]
 8000fe0:	6813      	ldr	r3, [r2, #0]
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bd10      	pop	{r4, pc}
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	2000019c 	.word	0x2000019c

08000ff0 <usart1_send_data>:

uint8_t usart1_send_data(uint8_t *pdata, uint16_t size)
{
	return HAL_UART_Transmit(&huart1, pdata,  size, 1000);
 8000ff0:	23fa      	movs	r3, #250	; 0xfa
{
 8000ff2:	b510      	push	{r4, lr}
 8000ff4:	000a      	movs	r2, r1
	return HAL_UART_Transmit(&huart1, pdata,  size, 1000);
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	0001      	movs	r1, r0
 8000ffa:	4802      	ldr	r0, [pc, #8]	; (8001004 <usart1_send_data+0x14>)
 8000ffc:	f000 ff4e 	bl	8001e9c <HAL_UART_Transmit>
}
 8001000:	bd10      	pop	{r4, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	2000019c 	.word	0x2000019c

08001008 <usart1_receive_data>:
{
	return HAL_UART_Transmit(&huart1, (uint8_t*)pdata, strlen((char*)pdata), 1000);
}

uint16_t usart1_receive_data(uint8_t *pdata)
{
 8001008:	b570      	push	{r4, r5, r6, lr}
	uint16_t size = 0;;

	if(usart1_rx_size)
 800100a:	4d06      	ldr	r5, [pc, #24]	; (8001024 <usart1_receive_data+0x1c>)
 800100c:	882c      	ldrh	r4, [r5, #0]
 800100e:	2c00      	cmp	r4, #0
 8001010:	d005      	beq.n	800101e <usart1_receive_data+0x16>
	{
		size = usart1_rx_size;
		memcpy(pdata, usart1_rx_buffer, size);
 8001012:	0022      	movs	r2, r4
 8001014:	4904      	ldr	r1, [pc, #16]	; (8001028 <usart1_receive_data+0x20>)
 8001016:	f001 fc3d 	bl	8002894 <memcpy>
		usart1_rx_size = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	802b      	strh	r3, [r5, #0]
	}

	return size;
}
 800101e:	0020      	movs	r0, r4
 8001020:	bd70      	pop	{r4, r5, r6, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	200000f4 	.word	0x200000f4
 8001028:	2000015c 	.word	0x2000015c

0800102c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800102c:	b510      	push	{r4, lr}
 800102e:	0004      	movs	r4, r0
 8001030:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	2214      	movs	r2, #20
 8001034:	2100      	movs	r1, #0
 8001036:	a803      	add	r0, sp, #12
 8001038:	f001 fc35 	bl	80028a6 <memset>
  if(uartHandle->Instance==USART1)
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_UART_MspInit+0x70>)
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d001      	beq.n	8001048 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001044:	b008      	add	sp, #32
 8001046:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001048:	2080      	movs	r0, #128	; 0x80
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_UART_MspInit+0x74>)
 800104c:	01c0      	lsls	r0, r0, #7
 800104e:	6999      	ldr	r1, [r3, #24]
 8001050:	4301      	orrs	r1, r0
 8001052:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001056:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 800105a:	4002      	ands	r2, r0
 800105c:	9201      	str	r2, [sp, #4]
 800105e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	430a      	orrs	r2, r1
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	400b      	ands	r3, r1
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001072:	230c      	movs	r3, #12
 8001074:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	3b0a      	subs	r3, #10
 8001078:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107a:	3301      	adds	r3, #1
 800107c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001080:	3b02      	subs	r3, #2
 8001082:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f000 f9ce 	bl	8001424 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	2100      	movs	r1, #0
 800108c:	201b      	movs	r0, #27
 800108e:	f000 f863 	bl	8001158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001092:	201b      	movs	r0, #27
 8001094:	f000 f892 	bl	80011bc <HAL_NVIC_EnableIRQ>
}
 8001098:	e7d4      	b.n	8001044 <HAL_UART_MspInit+0x18>
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	40013800 	.word	0x40013800
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b510      	push	{r4, lr}
 80010a6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	20fa      	movs	r0, #250	; 0xfa
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_InitTick+0x40>)
 80010ac:	0080      	lsls	r0, r0, #2
 80010ae:	7819      	ldrb	r1, [r3, #0]
 80010b0:	f7ff f82a 	bl	8000108 <__udivsi3>
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_InitTick+0x44>)
 80010b6:	0001      	movs	r1, r0
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	f7ff f825 	bl	8000108 <__udivsi3>
 80010be:	f000 f889 	bl	80011d4 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d101      	bne.n	80010cc <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c8:	2c03      	cmp	r4, #3
 80010ca:	d901      	bls.n	80010d0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	0021      	movs	r1, r4
 80010d4:	3801      	subs	r0, #1
 80010d6:	f000 f83f 	bl	8001158 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <HAL_InitTick+0x48>)
 80010dc:	601c      	str	r4, [r3, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	e7f4      	b.n	80010cc <HAL_InitTick+0x28>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	2000001c 	.word	0x2000001c
 80010e8:	20000018 	.word	0x20000018
 80010ec:	20000020 	.word	0x20000020

080010f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	2110      	movs	r1, #16
 80010f2:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_Init+0x1c>)
{
 80010f4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f6:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fa:	430b      	orrs	r3, r1
 80010fc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	f7ff ffd1 	bl	80010a4 <HAL_InitTick>
  HAL_MspInit();
 8001102:	f7ff ff0b 	bl	8000f1c <HAL_MspInit>
}
 8001106:	2000      	movs	r0, #0
 8001108:	bd10      	pop	{r4, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001110:	4a03      	ldr	r2, [pc, #12]	; (8001120 <HAL_IncTick+0x10>)
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_IncTick+0x14>)
 8001114:	6811      	ldr	r1, [r2, #0]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	185b      	adds	r3, r3, r1
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	4770      	bx	lr
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	20000220 	.word	0x20000220
 8001124:	2000001c 	.word	0x2000001c

08001128 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001128:	4b01      	ldr	r3, [pc, #4]	; (8001130 <HAL_GetTick+0x8>)
 800112a:	6818      	ldr	r0, [r3, #0]
}
 800112c:	4770      	bx	lr
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	20000220 	.word	0x20000220

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff fff6 	bl	8001128 <HAL_GetTick>
 800113c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	1c63      	adds	r3, r4, #1
 8001140:	d002      	beq.n	8001148 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_Delay+0x20>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	1b40      	subs	r0, r0, r5
 800114e:	4284      	cmp	r4, r0
 8001150:	d8fa      	bhi.n	8001148 <HAL_Delay+0x14>
  {
  }
}
 8001152:	bd70      	pop	{r4, r5, r6, pc}
 8001154:	2000001c 	.word	0x2000001c

08001158 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001158:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800115a:	2800      	cmp	r0, #0
 800115c:	db14      	blt.n	8001188 <HAL_NVIC_SetPriority+0x30>
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_NVIC_SetPriority+0x5c>)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001160:	2203      	movs	r2, #3
 8001162:	469c      	mov	ip, r3
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	0885      	lsrs	r5, r0, #2
 8001168:	4010      	ands	r0, r2
 800116a:	001a      	movs	r2, r3
 800116c:	26c0      	movs	r6, #192	; 0xc0
 800116e:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001170:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001172:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001174:	400b      	ands	r3, r1
 8001176:	4083      	lsls	r3, r0
 8001178:	00ad      	lsls	r5, r5, #2
 800117a:	4465      	add	r5, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117c:	00b6      	lsls	r6, r6, #2
 800117e:	59ac      	ldr	r4, [r5, r6]
 8001180:	4394      	bics	r4, r2
 8001182:	4323      	orrs	r3, r4
 8001184:	51ab      	str	r3, [r5, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001186:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001188:	220f      	movs	r2, #15
 800118a:	b2c0      	uxtb	r0, r0
 800118c:	4002      	ands	r2, r0
 800118e:	3a08      	subs	r2, #8
 8001190:	0892      	lsrs	r2, r2, #2
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_NVIC_SetPriority+0x60>)
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	2403      	movs	r4, #3
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	4020      	ands	r0, r4
 800119e:	0014      	movs	r4, r2
 80011a0:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011a2:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a4:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011a6:	4011      	ands	r1, r2
 80011a8:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011aa:	69dd      	ldr	r5, [r3, #28]
 80011ac:	43a5      	bics	r5, r4
 80011ae:	4329      	orrs	r1, r5
 80011b0:	61d9      	str	r1, [r3, #28]
 80011b2:	e7e8      	b.n	8001186 <HAL_NVIC_SetPriority+0x2e>
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80011bc:	2800      	cmp	r0, #0
 80011be:	db05      	blt.n	80011cc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c0:	231f      	movs	r3, #31
 80011c2:	4018      	ands	r0, r3
 80011c4:	3b1e      	subs	r3, #30
 80011c6:	4083      	lsls	r3, r0
 80011c8:	4a01      	ldr	r2, [pc, #4]	; (80011d0 <HAL_NVIC_EnableIRQ+0x14>)
 80011ca:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011cc:	4770      	bx	lr
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_SYSTICK_Config+0x2c>)
 80011d6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d80e      	bhi.n	80011fc <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011de:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e0:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e6:	6a03      	ldr	r3, [r0, #32]
 80011e8:	0609      	lsls	r1, r1, #24
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	430b      	orrs	r3, r1
 80011f0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f2:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f8:	3307      	adds	r3, #7
 80011fa:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011fc:	4770      	bx	lr
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	00ffffff 	.word	0x00ffffff
 8001204:	e000e010 	.word	0xe000e010
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800120c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800120e:	f7ff f885 	bl	800031c <HAL_SYSTICK_Callback>
}
 8001212:	bd10      	pop	{r4, pc}

08001214 <HAL_DMA_Abort>:
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001214:	2321      	movs	r3, #33	; 0x21
{
 8001216:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001218:	5cc2      	ldrb	r2, [r0, r3]
 800121a:	2a02      	cmp	r2, #2
 800121c:	d006      	beq.n	800122c <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001220:	3b1d      	subs	r3, #29
 8001222:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001224:	331c      	adds	r3, #28
 8001226:	54c2      	strb	r2, [r0, r3]
    
    return HAL_ERROR;
 8001228:	2001      	movs	r0, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 800122a:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800122c:	240e      	movs	r4, #14
 800122e:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001230:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001232:	6811      	ldr	r1, [r2, #0]
 8001234:	43a1      	bics	r1, r4
 8001236:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001238:	2101      	movs	r1, #1
 800123a:	6814      	ldr	r4, [r2, #0]
 800123c:	438c      	bics	r4, r1
 800123e:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001240:	000c      	movs	r4, r1
 8001242:	40ac      	lsls	r4, r5
 8001244:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001246:	6054      	str	r4, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8001248:	54c1      	strb	r1, [r0, r3]
  __HAL_UNLOCK(hdma);
 800124a:	2200      	movs	r2, #0
 800124c:	2320      	movs	r3, #32
 800124e:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001250:	2000      	movs	r0, #0
 8001252:	e7ea      	b.n	800122a <HAL_DMA_Abort+0x16>

08001254 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001254:	2321      	movs	r3, #33	; 0x21
{  
 8001256:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001258:	5cc2      	ldrb	r2, [r0, r3]
 800125a:	2a02      	cmp	r2, #2
 800125c:	d003      	beq.n	8001266 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125e:	3b1d      	subs	r3, #29
 8001260:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001262:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001264:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001266:	240e      	movs	r4, #14
 8001268:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800126a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800126c:	6811      	ldr	r1, [r2, #0]
 800126e:	43a1      	bics	r1, r4
 8001270:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001272:	2101      	movs	r1, #1
 8001274:	6814      	ldr	r4, [r2, #0]
 8001276:	438c      	bics	r4, r1
 8001278:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800127a:	000c      	movs	r4, r1
 800127c:	40ac      	lsls	r4, r5
 800127e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001280:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001282:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001284:	2200      	movs	r2, #0
 8001286:	2320      	movs	r3, #32
 8001288:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 800128a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8001290:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001292:	2000      	movs	r0, #0
 8001294:	e7e6      	b.n	8001264 <HAL_DMA_Abort_IT+0x10>
 8001296:	2000      	movs	r0, #0
 8001298:	e7e4      	b.n	8001264 <HAL_DMA_Abort_IT+0x10>
 800129a:	46c0      	nop			; (mov r8, r8)

0800129c <HAL_FLASH_EndOfOperationCallback>:
 800129c:	4770      	bx	lr
 800129e:	46c0      	nop			; (mov r8, r8)

080012a0 <HAL_FLASH_OperationErrorCallback>:
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80012a0:	4770      	bx	lr
 80012a2:	46c0      	nop			; (mov r8, r8)

080012a4 <HAL_FLASH_IRQHandler>:
{
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012a6:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <HAL_FLASH_IRQHandler+0x150>)
    addresstmp = pFlash.Address;
 80012a8:	4c53      	ldr	r4, [pc, #332]	; (80013f8 <HAL_FLASH_IRQHandler+0x154>)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	06d2      	lsls	r2, r2, #27
 80012ae:	d41a      	bmi.n	80012e6 <HAL_FLASH_IRQHandler+0x42>
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	075b      	lsls	r3, r3, #29
 80012b4:	d417      	bmi.n	80012e6 <HAL_FLASH_IRQHandler+0x42>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80012b6:	2320      	movs	r3, #32
 80012b8:	4d4e      	ldr	r5, [pc, #312]	; (80013f4 <HAL_FLASH_IRQHandler+0x150>)
 80012ba:	68ea      	ldr	r2, [r5, #12]
 80012bc:	4213      	tst	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_FLASH_IRQHandler+0x24>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012c0:	60eb      	str	r3, [r5, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80012c2:	7823      	ldrb	r3, [r4, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d12f      	bne.n	8001328 <HAL_FLASH_IRQHandler+0x84>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80012c8:	7823      	ldrb	r3, [r4, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d109      	bne.n	80012e4 <HAL_FLASH_IRQHandler+0x40>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80012d0:	2007      	movs	r0, #7
 80012d2:	4a48      	ldr	r2, [pc, #288]	; (80013f4 <HAL_FLASH_IRQHandler+0x150>)
 80012d4:	6911      	ldr	r1, [r2, #16]
 80012d6:	4381      	bics	r1, r0
 80012d8:	6111      	str	r1, [r2, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80012da:	6911      	ldr	r1, [r2, #16]
 80012dc:	4847      	ldr	r0, [pc, #284]	; (80013fc <HAL_FLASH_IRQHandler+0x158>)
 80012de:	4001      	ands	r1, r0
 80012e0:	6111      	str	r1, [r2, #16]
    __HAL_UNLOCK(&pFlash);
 80012e2:	7623      	strb	r3, [r4, #24]
}
 80012e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.Address = 0xFFFFFFFFU;
 80012e6:	2301      	movs	r3, #1
 80012e8:	425b      	negs	r3, r3
    addresstmp = pFlash.Address;
 80012ea:	68a0      	ldr	r0, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 80012ec:	60a3      	str	r3, [r4, #8]
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <HAL_FLASH_IRQHandler+0x150>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	06db      	lsls	r3, r3, #27
 80012f4:	d411      	bmi.n	800131a <HAL_FLASH_IRQHandler+0x76>
 80012f6:	2104      	movs	r1, #4
  uint32_t flags = 0U;
 80012f8:	2300      	movs	r3, #0
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
    flags |= FLASH_FLAG_WRPERR;
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012fa:	4a3e      	ldr	r2, [pc, #248]	; (80013f4 <HAL_FLASH_IRQHandler+0x150>)
 80012fc:	68d2      	ldr	r2, [r2, #12]
 80012fe:	0752      	lsls	r2, r2, #29
 8001300:	d504      	bpl.n	800130c <HAL_FLASH_IRQHandler+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001302:	2201      	movs	r2, #1
 8001304:	69e3      	ldr	r3, [r4, #28]
 8001306:	4313      	orrs	r3, r2
 8001308:	61e3      	str	r3, [r4, #28]
    flags |= FLASH_FLAG_PGERR;
 800130a:	000b      	movs	r3, r1
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800130c:	4a39      	ldr	r2, [pc, #228]	; (80013f4 <HAL_FLASH_IRQHandler+0x150>)
 800130e:	60d3      	str	r3, [r2, #12]
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001310:	f7ff ffc6 	bl	80012a0 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	7023      	strb	r3, [r4, #0]
 8001318:	e7cd      	b.n	80012b6 <HAL_FLASH_IRQHandler+0x12>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800131a:	2202      	movs	r2, #2
 800131c:	69e3      	ldr	r3, [r4, #28]
 800131e:	2114      	movs	r1, #20
 8001320:	4313      	orrs	r3, r2
 8001322:	61e3      	str	r3, [r4, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001324:	2310      	movs	r3, #16
 8001326:	e7e8      	b.n	80012fa <HAL_FLASH_IRQHandler+0x56>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8001328:	7823      	ldrb	r3, [r4, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d022      	beq.n	8001374 <HAL_FLASH_IRQHandler+0xd0>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800132e:	7823      	ldrb	r3, [r4, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d050      	beq.n	80013d6 <HAL_FLASH_IRQHandler+0x132>
        pFlash.DataRemaining--;
 8001334:	6863      	ldr	r3, [r4, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 800133a:	6863      	ldr	r3, [r4, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d02f      	beq.n	80013a0 <HAL_FLASH_IRQHandler+0xfc>
          pFlash.Address += 2;
 8001340:	68a3      	ldr	r3, [r4, #8]
 8001342:	3302      	adds	r3, #2
 8001344:	60a3      	str	r3, [r4, #8]
          addresstmp = pFlash.Address;
 8001346:	68a6      	ldr	r6, [r4, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 8001348:	6920      	ldr	r0, [r4, #16]
 800134a:	6961      	ldr	r1, [r4, #20]
 800134c:	0c0b      	lsrs	r3, r1, #16
 800134e:	040f      	lsls	r7, r1, #16
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001350:	2101      	movs	r1, #1
          pFlash.Data = (pFlash.Data >> 16U);
 8001352:	0c02      	lsrs	r2, r0, #16
 8001354:	433a      	orrs	r2, r7
 8001356:	6122      	str	r2, [r4, #16]
 8001358:	6163      	str	r3, [r4, #20]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800135a:	692a      	ldr	r2, [r5, #16]
 800135c:	438a      	bics	r2, r1
 800135e:	612a      	str	r2, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001360:	6922      	ldr	r2, [r4, #16]
 8001362:	6963      	ldr	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001364:	2300      	movs	r3, #0
 8001366:	61e3      	str	r3, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001368:	692b      	ldr	r3, [r5, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 800136a:	b292      	uxth	r2, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800136c:	430b      	orrs	r3, r1
 800136e:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8001370:	8032      	strh	r2, [r6, #0]
 8001372:	e7a9      	b.n	80012c8 <HAL_FLASH_IRQHandler+0x24>
        pFlash.DataRemaining--;
 8001374:	6863      	ldr	r3, [r4, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6063      	str	r3, [r4, #4]
        if(pFlash.DataRemaining != 0U)
 800137a:	6863      	ldr	r3, [r4, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01f      	beq.n	80013c0 <HAL_FLASH_IRQHandler+0x11c>
          addresstmp = pFlash.Address;
 8001380:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001382:	f7ff ff8b 	bl	800129c <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	469c      	mov	ip, r3
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800138c:	2202      	movs	r2, #2
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 800138e:	68a0      	ldr	r0, [r4, #8]
 8001390:	4460      	add	r0, ip
          pFlash.Address = addresstmp;
 8001392:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001394:	692b      	ldr	r3, [r5, #16]
 8001396:	4393      	bics	r3, r2
 8001398:	612b      	str	r3, [r5, #16]
          FLASH_PageErase(addresstmp);
 800139a:	f000 f831 	bl	8001400 <FLASH_PageErase>
 800139e:	e793      	b.n	80012c8 <HAL_FLASH_IRQHandler+0x24>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80013a0:	7823      	ldrb	r3, [r4, #0]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d021      	beq.n	80013ea <HAL_FLASH_IRQHandler+0x146>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80013a6:	7823      	ldrb	r3, [r4, #0]
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80013a8:	68a0      	ldr	r0, [r4, #8]
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d00f      	beq.n	80013ce <HAL_FLASH_IRQHandler+0x12a>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80013ae:	3806      	subs	r0, #6
 80013b0:	f7ff ff74 	bl	800129c <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 80013b4:	2301      	movs	r3, #1
 80013b6:	425b      	negs	r3, r3
 80013b8:	60a3      	str	r3, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	7023      	strb	r3, [r4, #0]
 80013be:	e783      	b.n	80012c8 <HAL_FLASH_IRQHandler+0x24>
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80013c0:	2001      	movs	r0, #1
 80013c2:	4240      	negs	r0, r0
 80013c4:	60a0      	str	r0, [r4, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80013c6:	7023      	strb	r3, [r4, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80013c8:	f7ff ff68 	bl	800129c <HAL_FLASH_EndOfOperationCallback>
 80013cc:	e77c      	b.n	80012c8 <HAL_FLASH_IRQHandler+0x24>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80013ce:	3802      	subs	r0, #2
 80013d0:	f7ff ff64 	bl	800129c <HAL_FLASH_EndOfOperationCallback>
 80013d4:	e7ee      	b.n	80013b4 <HAL_FLASH_IRQHandler+0x110>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013d6:	2204      	movs	r2, #4
 80013d8:	692b      	ldr	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0);
 80013da:	2000      	movs	r0, #0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013dc:	4393      	bics	r3, r2
 80013de:	612b      	str	r3, [r5, #16]
          HAL_FLASH_EndOfOperationCallback(0);
 80013e0:	f7ff ff5c 	bl	800129c <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	7023      	strb	r3, [r4, #0]
 80013e8:	e76e      	b.n	80012c8 <HAL_FLASH_IRQHandler+0x24>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80013ea:	68a0      	ldr	r0, [r4, #8]
 80013ec:	f7ff ff56 	bl	800129c <HAL_FLASH_EndOfOperationCallback>
 80013f0:	e7e0      	b.n	80013b4 <HAL_FLASH_IRQHandler+0x110>
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40022000 	.word	0x40022000
 80013f8:	20000228 	.word	0x20000228
 80013fc:	ffffebff 	.word	0xffffebff

08001400 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001400:	2200      	movs	r2, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001402:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <FLASH_PageErase+0x1c>)
 8001406:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <FLASH_PageErase+0x20>)
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	430a      	orrs	r2, r1
 800140e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001410:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	313e      	adds	r1, #62	; 0x3e
 8001416:	430a      	orrs	r2, r1
 8001418:	611a      	str	r2, [r3, #16]
}
 800141a:	4770      	bx	lr
 800141c:	20000228 	.word	0x20000228
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	4645      	mov	r5, r8
 8001428:	46de      	mov	lr, fp
 800142a:	4657      	mov	r7, sl
 800142c:	464e      	mov	r6, r9
 800142e:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001430:	680b      	ldr	r3, [r1, #0]
{ 
 8001432:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	469c      	mov	ip, r3
 8001436:	2500      	movs	r5, #0
 8001438:	2200      	movs	r2, #0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d100      	bne.n	8001440 <HAL_GPIO_Init+0x1c>
 800143e:	e0da      	b.n	80015f6 <HAL_GPIO_Init+0x1d2>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	4b77      	ldr	r3, [pc, #476]	; (8001620 <HAL_GPIO_Init+0x1fc>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001442:	4666      	mov	r6, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001444:	469b      	mov	fp, r3
        temp = EXTI->IMR;
 8001446:	4b77      	ldr	r3, [pc, #476]	; (8001624 <HAL_GPIO_Init+0x200>)
 8001448:	9101      	str	r1, [sp, #4]
 800144a:	469a      	mov	sl, r3
 800144c:	e067      	b.n	800151e <HAL_GPIO_Init+0xfa>
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800144e:	2303      	movs	r3, #3
 8001450:	40ab      	lsls	r3, r5
 8001452:	43df      	mvns	r7, r3
      temp = GPIOx->PUPDR;
 8001454:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001456:	9b01      	ldr	r3, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001458:	403c      	ands	r4, r7
 800145a:	46a4      	mov	ip, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800145c:	689c      	ldr	r4, [r3, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800145e:	9702      	str	r7, [sp, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001460:	40ac      	lsls	r4, r5
 8001462:	4667      	mov	r7, ip
 8001464:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8001466:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 8001468:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800146a:	9b02      	ldr	r3, [sp, #8]
 800146c:	4023      	ands	r3, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800146e:	2403      	movs	r4, #3
 8001470:	400c      	ands	r4, r1
 8001472:	40ac      	lsls	r4, r5
 8001474:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8001476:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	055b      	lsls	r3, r3, #21
 800147c:	4219      	tst	r1, r3
 800147e:	d049      	beq.n	8001514 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	465b      	mov	r3, fp
 8001482:	2401      	movs	r4, #1
 8001484:	699b      	ldr	r3, [r3, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001486:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001488:	4323      	orrs	r3, r4
 800148a:	465c      	mov	r4, fp
 800148c:	61a3      	str	r3, [r4, #24]
 800148e:	69a3      	ldr	r3, [r4, #24]
 8001490:	2401      	movs	r4, #1
 8001492:	4023      	ands	r3, r4
 8001494:	4c64      	ldr	r4, [pc, #400]	; (8001628 <HAL_GPIO_Init+0x204>)
 8001496:	9305      	str	r3, [sp, #20]
 8001498:	46a4      	mov	ip, r4
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800149a:	2403      	movs	r4, #3
 800149c:	4014      	ands	r4, r2
 800149e:	00a4      	lsls	r4, r4, #2
 80014a0:	40a7      	lsls	r7, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	9b05      	ldr	r3, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 80014a4:	0893      	lsrs	r3, r2, #2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4463      	add	r3, ip
 80014aa:	689e      	ldr	r6, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ac:	43be      	bics	r6, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ae:	2790      	movs	r7, #144	; 0x90
 80014b0:	05ff      	lsls	r7, r7, #23
 80014b2:	42b8      	cmp	r0, r7
 80014b4:	d100      	bne.n	80014b8 <HAL_GPIO_Init+0x94>
 80014b6:	e0a5      	b.n	8001604 <HAL_GPIO_Init+0x1e0>
 80014b8:	4f5c      	ldr	r7, [pc, #368]	; (800162c <HAL_GPIO_Init+0x208>)
 80014ba:	42b8      	cmp	r0, r7
 80014bc:	d100      	bne.n	80014c0 <HAL_GPIO_Init+0x9c>
 80014be:	e0a3      	b.n	8001608 <HAL_GPIO_Init+0x1e4>
 80014c0:	4f5b      	ldr	r7, [pc, #364]	; (8001630 <HAL_GPIO_Init+0x20c>)
 80014c2:	42b8      	cmp	r0, r7
 80014c4:	d100      	bne.n	80014c8 <HAL_GPIO_Init+0xa4>
 80014c6:	e0a3      	b.n	8001610 <HAL_GPIO_Init+0x1ec>
 80014c8:	4f5a      	ldr	r7, [pc, #360]	; (8001634 <HAL_GPIO_Init+0x210>)
 80014ca:	42b8      	cmp	r0, r7
 80014cc:	d100      	bne.n	80014d0 <HAL_GPIO_Init+0xac>
 80014ce:	e0a3      	b.n	8001618 <HAL_GPIO_Init+0x1f4>
 80014d0:	2705      	movs	r7, #5
 80014d2:	40a7      	lsls	r7, r4
 80014d4:	003c      	movs	r4, r7
 80014d6:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d8:	609c      	str	r4, [r3, #8]
        temp = EXTI->IMR;
 80014da:	4653      	mov	r3, sl
        temp &= ~(iocurrent);
 80014dc:	464c      	mov	r4, r9
        temp = EXTI->IMR;
 80014de:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 80014e0:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e2:	03cc      	lsls	r4, r1, #15
 80014e4:	d46e      	bmi.n	80015c4 <HAL_GPIO_Init+0x1a0>
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80014e6:	4654      	mov	r4, sl
        temp &= ~(iocurrent);
 80014e8:	4033      	ands	r3, r6
        EXTI->IMR = temp;
 80014ea:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 80014ec:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ee:	038b      	lsls	r3, r1, #14
 80014f0:	d46f      	bmi.n	80015d2 <HAL_GPIO_Init+0x1ae>
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80014f2:	4653      	mov	r3, sl
        temp &= ~(iocurrent);
 80014f4:	4034      	ands	r4, r6
        EXTI->EMR = temp;
 80014f6:	605c      	str	r4, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f8:	689c      	ldr	r4, [r3, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fa:	02cb      	lsls	r3, r1, #11
 80014fc:	d470      	bmi.n	80015e0 <HAL_GPIO_Init+0x1bc>
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80014fe:	4653      	mov	r3, sl
        temp &= ~(iocurrent);
 8001500:	4034      	ands	r4, r6
        EXTI->RTSR = temp;
 8001502:	609c      	str	r4, [r3, #8]

        temp = EXTI->FTSR;
 8001504:	68db      	ldr	r3, [r3, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001506:	0289      	lsls	r1, r1, #10
 8001508:	d471      	bmi.n	80015ee <HAL_GPIO_Init+0x1ca>
        temp &= ~(iocurrent);
 800150a:	4033      	ands	r3, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800150c:	4651      	mov	r1, sl
 800150e:	60cb      	str	r3, [r1, #12]
 8001510:	9b01      	ldr	r3, [sp, #4]
 8001512:	681e      	ldr	r6, [r3, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	0033      	movs	r3, r6
      }
    }

    position++;
 8001516:	3201      	adds	r2, #1
 8001518:	3502      	adds	r5, #2
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	40d3      	lsrs	r3, r2
 800151c:	d06b      	beq.n	80015f6 <HAL_GPIO_Init+0x1d2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800151e:	2401      	movs	r4, #1
 8001520:	0033      	movs	r3, r6
 8001522:	4094      	lsls	r4, r2
 8001524:	4023      	ands	r3, r4
 8001526:	4699      	mov	r9, r3
    if (iocurrent != 0x00u)
 8001528:	d0f4      	beq.n	8001514 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	2710      	movs	r7, #16
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	000b      	movs	r3, r1
 8001532:	43bb      	bics	r3, r7
 8001534:	4698      	mov	r8, r3
 8001536:	3b01      	subs	r3, #1
 8001538:	2b01      	cmp	r3, #1
 800153a:	d888      	bhi.n	800144e <HAL_GPIO_Init+0x2a>
        temp = GPIOx->OSPEEDR;
 800153c:	6883      	ldr	r3, [r0, #8]
 800153e:	469c      	mov	ip, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001540:	2303      	movs	r3, #3
 8001542:	40ab      	lsls	r3, r5
 8001544:	4667      	mov	r7, ip
 8001546:	43db      	mvns	r3, r3
 8001548:	401f      	ands	r7, r3
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	003b      	movs	r3, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800154e:	9f01      	ldr	r7, [sp, #4]
 8001550:	68ff      	ldr	r7, [r7, #12]
 8001552:	40af      	lsls	r7, r5
 8001554:	46bc      	mov	ip, r7
 8001556:	001f      	movs	r7, r3
 8001558:	4663      	mov	r3, ip
 800155a:	431f      	orrs	r7, r3
        GPIOx->OSPEEDR = temp;
 800155c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800155e:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001560:	001f      	movs	r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001562:	2301      	movs	r3, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001564:	43a7      	bics	r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001566:	090c      	lsrs	r4, r1, #4
 8001568:	401c      	ands	r4, r3
 800156a:	4094      	lsls	r4, r2
 800156c:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 800156e:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001570:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001572:	9b02      	ldr	r3, [sp, #8]
 8001574:	401c      	ands	r4, r3
 8001576:	46a4      	mov	ip, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	689c      	ldr	r4, [r3, #8]
 800157c:	4663      	mov	r3, ip
 800157e:	40ac      	lsls	r4, r5
 8001580:	431c      	orrs	r4, r3
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001582:	4643      	mov	r3, r8
      GPIOx->PUPDR = temp;
 8001584:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001586:	2b02      	cmp	r3, #2
 8001588:	d000      	beq.n	800158c <HAL_GPIO_Init+0x168>
 800158a:	e76d      	b.n	8001468 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3u];
 800158c:	08d4      	lsrs	r4, r2, #3
 800158e:	00a4      	lsls	r4, r4, #2
 8001590:	1904      	adds	r4, r0, r4
 8001592:	6a23      	ldr	r3, [r4, #32]
 8001594:	9403      	str	r4, [sp, #12]
 8001596:	4698      	mov	r8, r3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001598:	2307      	movs	r3, #7
 800159a:	001f      	movs	r7, r3
 800159c:	4017      	ands	r7, r2
 800159e:	00bb      	lsls	r3, r7, #2
 80015a0:	270f      	movs	r7, #15
 80015a2:	4644      	mov	r4, r8
 80015a4:	409f      	lsls	r7, r3
 80015a6:	469c      	mov	ip, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015a8:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015aa:	43bc      	bics	r4, r7
 80015ac:	46a0      	mov	r8, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ae:	691c      	ldr	r4, [r3, #16]
 80015b0:	4663      	mov	r3, ip
 80015b2:	409c      	lsls	r4, r3
 80015b4:	46a4      	mov	ip, r4
 80015b6:	4644      	mov	r4, r8
 80015b8:	4663      	mov	r3, ip
 80015ba:	431c      	orrs	r4, r3
        GPIOx->AFR[position >> 3u] = temp;
 80015bc:	0023      	movs	r3, r4
 80015be:	9c03      	ldr	r4, [sp, #12]
 80015c0:	6223      	str	r3, [r4, #32]
 80015c2:	e751      	b.n	8001468 <HAL_GPIO_Init+0x44>
          temp |= iocurrent;
 80015c4:	464c      	mov	r4, r9
 80015c6:	4323      	orrs	r3, r4
        EXTI->IMR = temp;
 80015c8:	4654      	mov	r4, sl
 80015ca:	6023      	str	r3, [r4, #0]
        temp = EXTI->EMR;
 80015cc:	6864      	ldr	r4, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ce:	038b      	lsls	r3, r1, #14
 80015d0:	d58f      	bpl.n	80014f2 <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 80015d2:	464b      	mov	r3, r9
 80015d4:	431c      	orrs	r4, r3
        EXTI->EMR = temp;
 80015d6:	4653      	mov	r3, sl
 80015d8:	605c      	str	r4, [r3, #4]
        temp = EXTI->RTSR;
 80015da:	689c      	ldr	r4, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015dc:	02cb      	lsls	r3, r1, #11
 80015de:	d58e      	bpl.n	80014fe <HAL_GPIO_Init+0xda>
          temp |= iocurrent;
 80015e0:	464b      	mov	r3, r9
 80015e2:	431c      	orrs	r4, r3
        EXTI->RTSR = temp;
 80015e4:	4653      	mov	r3, sl
 80015e6:	609c      	str	r4, [r3, #8]
        temp = EXTI->FTSR;
 80015e8:	68db      	ldr	r3, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ea:	0289      	lsls	r1, r1, #10
 80015ec:	d58d      	bpl.n	800150a <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 80015ee:	4649      	mov	r1, r9
 80015f0:	4319      	orrs	r1, r3
 80015f2:	000b      	movs	r3, r1
 80015f4:	e78a      	b.n	800150c <HAL_GPIO_Init+0xe8>
  } 
}
 80015f6:	b007      	add	sp, #28
 80015f8:	bc3c      	pop	{r2, r3, r4, r5}
 80015fa:	4690      	mov	r8, r2
 80015fc:	4699      	mov	r9, r3
 80015fe:	46a2      	mov	sl, r4
 8001600:	46ab      	mov	fp, r5
 8001602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001604:	2400      	movs	r4, #0
 8001606:	e766      	b.n	80014d6 <HAL_GPIO_Init+0xb2>
 8001608:	2701      	movs	r7, #1
 800160a:	40a7      	lsls	r7, r4
 800160c:	003c      	movs	r4, r7
 800160e:	e762      	b.n	80014d6 <HAL_GPIO_Init+0xb2>
 8001610:	2702      	movs	r7, #2
 8001612:	40a7      	lsls	r7, r4
 8001614:	003c      	movs	r4, r7
 8001616:	e75e      	b.n	80014d6 <HAL_GPIO_Init+0xb2>
 8001618:	2703      	movs	r7, #3
 800161a:	40a7      	lsls	r7, r4
 800161c:	003c      	movs	r4, r7
 800161e:	e75a      	b.n	80014d6 <HAL_GPIO_Init+0xb2>
 8001620:	40021000 	.word	0x40021000
 8001624:	40010400 	.word	0x40010400
 8001628:	40010000 	.word	0x40010000
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800
 8001634:	48000c00 	.word	0x48000c00

08001638 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001638:	6900      	ldr	r0, [r0, #16]
 800163a:	4008      	ands	r0, r1
 800163c:	1e41      	subs	r1, r0, #1
 800163e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001640:	b2c0      	uxtb	r0, r0
  }
 8001642:	4770      	bx	lr

08001644 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001644:	2a00      	cmp	r2, #0
 8001646:	d101      	bne.n	800164c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001648:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800164a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164c:	6181      	str	r1, [r0, #24]
 800164e:	e7fc      	b.n	800164a <HAL_GPIO_WritePin+0x6>

08001650 <HAL_GPIO_TogglePin>:

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001650:	000b      	movs	r3, r1
  odr = GPIOx->ODR;
 8001652:	6942      	ldr	r2, [r0, #20]
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001654:	4013      	ands	r3, r2
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	4391      	bics	r1, r2
 800165a:	4319      	orrs	r1, r3
 800165c:	6181      	str	r1, [r0, #24]
}
 800165e:	4770      	bx	lr

08001660 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001660:	b570      	push	{r4, r5, r6, lr}
 8001662:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001664:	d01e      	beq.n	80016a4 <HAL_IWDG_Init+0x44>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001666:	6803      	ldr	r3, [r0, #0]
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_IWDG_Init+0x50>)
 800166a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_IWDG_Init+0x54>)
 800166e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001670:	6842      	ldr	r2, [r0, #4]
 8001672:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001674:	6882      	ldr	r2, [r0, #8]
 8001676:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001678:	f7ff fd56 	bl	8001128 <HAL_GetTick>
 800167c:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800167e:	e004      	b.n	800168a <HAL_IWDG_Init+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001680:	f7ff fd52 	bl	8001128 <HAL_GetTick>
 8001684:	1b40      	subs	r0, r0, r5
 8001686:	2826      	cmp	r0, #38	; 0x26
 8001688:	d80a      	bhi.n	80016a0 <HAL_IWDG_Init+0x40>
  while (hiwdg->Instance->SR != 0x00u)
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	2a00      	cmp	r2, #0
 8001690:	d1f6      	bne.n	8001680 <HAL_IWDG_Init+0x20>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001692:	6919      	ldr	r1, [r3, #16]
 8001694:	68e2      	ldr	r2, [r4, #12]
 8001696:	4291      	cmp	r1, r2
 8001698:	d006      	beq.n	80016a8 <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800169c:	611a      	str	r2, [r3, #16]
}
 800169e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80016a0:	2003      	movs	r0, #3
 80016a2:	e7fc      	b.n	800169e <HAL_IWDG_Init+0x3e>
    return HAL_ERROR;
 80016a4:	2001      	movs	r0, #1
 80016a6:	e7fa      	b.n	800169e <HAL_IWDG_Init+0x3e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80016a8:	4a03      	ldr	r2, [pc, #12]	; (80016b8 <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 80016aa:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e7f6      	b.n	800169e <HAL_IWDG_Init+0x3e>
 80016b0:	0000cccc 	.word	0x0000cccc
 80016b4:	00005555 	.word	0x00005555
 80016b8:	0000aaaa 	.word	0x0000aaaa

080016bc <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80016bc:	6803      	ldr	r3, [r0, #0]
 80016be:	4a02      	ldr	r2, [pc, #8]	; (80016c8 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 80016c0:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	4770      	bx	lr
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	0000aaaa 	.word	0x0000aaaa

080016cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	46ce      	mov	lr, r9
 80016d0:	4647      	mov	r7, r8
 80016d2:	b580      	push	{r7, lr}
 80016d4:	0004      	movs	r4, r0
 80016d6:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	2800      	cmp	r0, #0
 80016da:	d100      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
 80016dc:	e0e8      	b.n	80018b0 <HAL_RCC_OscConfig+0x1e4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	6803      	ldr	r3, [r0, #0]
 80016e0:	07da      	lsls	r2, r3, #31
 80016e2:	d52f      	bpl.n	8001744 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016e4:	220c      	movs	r2, #12
 80016e6:	48c4      	ldr	r0, [pc, #784]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80016e8:	6841      	ldr	r1, [r0, #4]
 80016ea:	4011      	ands	r1, r2
 80016ec:	2904      	cmp	r1, #4
 80016ee:	d100      	bne.n	80016f2 <HAL_RCC_OscConfig+0x26>
 80016f0:	e132      	b.n	8001958 <HAL_RCC_OscConfig+0x28c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f2:	6841      	ldr	r1, [r0, #4]
 80016f4:	400a      	ands	r2, r1
 80016f6:	2a08      	cmp	r2, #8
 80016f8:	d100      	bne.n	80016fc <HAL_RCC_OscConfig+0x30>
 80016fa:	e129      	b.n	8001950 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	6863      	ldr	r3, [r4, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d100      	bne.n	8001704 <HAL_RCC_OscConfig+0x38>
 8001702:	e163      	b.n	80019cc <HAL_RCC_OscConfig+0x300>
 8001704:	2b00      	cmp	r3, #0
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x3e>
 8001708:	e0f7      	b.n	80018fa <HAL_RCC_OscConfig+0x22e>
 800170a:	2b05      	cmp	r3, #5
 800170c:	d100      	bne.n	8001710 <HAL_RCC_OscConfig+0x44>
 800170e:	e202      	b.n	8001b16 <HAL_RCC_OscConfig+0x44a>
 8001710:	4bb9      	ldr	r3, [pc, #740]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001712:	49ba      	ldr	r1, [pc, #744]	; (80019fc <HAL_RCC_OscConfig+0x330>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	400a      	ands	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	49b8      	ldr	r1, [pc, #736]	; (8001a00 <HAL_RCC_OscConfig+0x334>)
 800171e:	400a      	ands	r2, r1
 8001720:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fd01 	bl	8001128 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001728:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4eb3      	ldr	r6, [pc, #716]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800172c:	02ad      	lsls	r5, r5, #10
 800172e:	e005      	b.n	800173c <HAL_RCC_OscConfig+0x70>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fcfa 	bl	8001128 <HAL_GetTick>
 8001734:	1bc0      	subs	r0, r0, r7
 8001736:	2864      	cmp	r0, #100	; 0x64
 8001738:	d900      	bls.n	800173c <HAL_RCC_OscConfig+0x70>
 800173a:	e107      	b.n	800194c <HAL_RCC_OscConfig+0x280>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173c:	6833      	ldr	r3, [r6, #0]
 800173e:	422b      	tst	r3, r5
 8001740:	d0f6      	beq.n	8001730 <HAL_RCC_OscConfig+0x64>
 8001742:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001744:	079a      	lsls	r2, r3, #30
 8001746:	d529      	bpl.n	800179c <HAL_RCC_OscConfig+0xd0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001748:	220c      	movs	r2, #12
 800174a:	49ab      	ldr	r1, [pc, #684]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800174c:	6848      	ldr	r0, [r1, #4]
 800174e:	4202      	tst	r2, r0
 8001750:	d100      	bne.n	8001754 <HAL_RCC_OscConfig+0x88>
 8001752:	e0a6      	b.n	80018a2 <HAL_RCC_OscConfig+0x1d6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001754:	6848      	ldr	r0, [r1, #4]
 8001756:	4002      	ands	r2, r0
 8001758:	2a08      	cmp	r2, #8
 800175a:	d100      	bne.n	800175e <HAL_RCC_OscConfig+0x92>
 800175c:	e09d      	b.n	800189a <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175e:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4da5      	ldr	r5, [pc, #660]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001762:	2b00      	cmp	r3, #0
 8001764:	d100      	bne.n	8001768 <HAL_RCC_OscConfig+0x9c>
 8001766:	e11e      	b.n	80019a6 <HAL_RCC_OscConfig+0x2da>
        __HAL_RCC_HSI_ENABLE();
 8001768:	2201      	movs	r2, #1
 800176a:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800176e:	4313      	orrs	r3, r2
 8001770:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001772:	f7ff fcd9 	bl	8001128 <HAL_GetTick>
 8001776:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001778:	e005      	b.n	8001786 <HAL_RCC_OscConfig+0xba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff fcd5 	bl	8001128 <HAL_GetTick>
 800177e:	1bc0      	subs	r0, r0, r7
 8001780:	2802      	cmp	r0, #2
 8001782:	d900      	bls.n	8001786 <HAL_RCC_OscConfig+0xba>
 8001784:	e0e2      	b.n	800194c <HAL_RCC_OscConfig+0x280>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	421e      	tst	r6, r3
 800178a:	d0f6      	beq.n	800177a <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	21f8      	movs	r1, #248	; 0xf8
 800178e:	682a      	ldr	r2, [r5, #0]
 8001790:	6923      	ldr	r3, [r4, #16]
 8001792:	438a      	bics	r2, r1
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4313      	orrs	r3, r2
 8001798:	602b      	str	r3, [r5, #0]
 800179a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179c:	071a      	lsls	r2, r3, #28
 800179e:	d42d      	bmi.n	80017fc <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a0:	075a      	lsls	r2, r3, #29
 80017a2:	d544      	bpl.n	800182e <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80017a6:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a8:	4b93      	ldr	r3, [pc, #588]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	0552      	lsls	r2, r2, #21
 80017ac:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80017ae:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b0:	4211      	tst	r1, r2
 80017b2:	d108      	bne.n	80017c6 <HAL_RCC_OscConfig+0xfa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	69d9      	ldr	r1, [r3, #28]
 80017b6:	4311      	orrs	r1, r2
 80017b8:	61d9      	str	r1, [r3, #28]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	401a      	ands	r2, r3
 80017be:	9201      	str	r2, [sp, #4]
 80017c0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	2780      	movs	r7, #128	; 0x80
 80017c8:	4e8e      	ldr	r6, [pc, #568]	; (8001a04 <HAL_RCC_OscConfig+0x338>)
 80017ca:	007f      	lsls	r7, r7, #1
 80017cc:	6833      	ldr	r3, [r6, #0]
 80017ce:	423b      	tst	r3, r7
 80017d0:	d100      	bne.n	80017d4 <HAL_RCC_OscConfig+0x108>
 80017d2:	e0ab      	b.n	800192c <HAL_RCC_OscConfig+0x260>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d4:	68a3      	ldr	r3, [r4, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d100      	bne.n	80017dc <HAL_RCC_OscConfig+0x110>
 80017da:	e122      	b.n	8001a22 <HAL_RCC_OscConfig+0x356>
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d100      	bne.n	80017e2 <HAL_RCC_OscConfig+0x116>
 80017e0:	e0c4      	b.n	800196c <HAL_RCC_OscConfig+0x2a0>
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d100      	bne.n	80017e8 <HAL_RCC_OscConfig+0x11c>
 80017e6:	e138      	b.n	8001a5a <HAL_RCC_OscConfig+0x38e>
 80017e8:	2101      	movs	r1, #1
 80017ea:	4b83      	ldr	r3, [pc, #524]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	438a      	bics	r2, r1
 80017f0:	621a      	str	r2, [r3, #32]
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	3103      	adds	r1, #3
 80017f6:	438a      	bics	r2, r1
 80017f8:	621a      	str	r2, [r3, #32]
 80017fa:	e116      	b.n	8001a2a <HAL_RCC_OscConfig+0x35e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fc:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 80017fe:	4d7e      	ldr	r5, [pc, #504]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	2b00      	cmp	r3, #0
 8001802:	d05b      	beq.n	80018bc <HAL_RCC_OscConfig+0x1f0>
      __HAL_RCC_LSI_ENABLE();
 8001804:	2201      	movs	r2, #1
 8001806:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001808:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800180a:	4313      	orrs	r3, r2
 800180c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800180e:	f7ff fc8b 	bl	8001128 <HAL_GetTick>
 8001812:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001814:	e005      	b.n	8001822 <HAL_RCC_OscConfig+0x156>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff fc87 	bl	8001128 <HAL_GetTick>
 800181a:	1bc0      	subs	r0, r0, r7
 800181c:	2802      	cmp	r0, #2
 800181e:	d900      	bls.n	8001822 <HAL_RCC_OscConfig+0x156>
 8001820:	e094      	b.n	800194c <HAL_RCC_OscConfig+0x280>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001822:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001824:	421e      	tst	r6, r3
 8001826:	d0f6      	beq.n	8001816 <HAL_RCC_OscConfig+0x14a>
 8001828:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182a:	075a      	lsls	r2, r3, #29
 800182c:	d4ba      	bmi.n	80017a4 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800182e:	06db      	lsls	r3, r3, #27
 8001830:	d512      	bpl.n	8001858 <HAL_RCC_OscConfig+0x18c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001832:	6963      	ldr	r3, [r4, #20]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d100      	bne.n	800183a <HAL_RCC_OscConfig+0x16e>
 8001838:	e179      	b.n	8001b2e <HAL_RCC_OscConfig+0x462>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800183a:	3305      	adds	r3, #5
 800183c:	d000      	beq.n	8001840 <HAL_RCC_OscConfig+0x174>
 800183e:	e0cc      	b.n	80019da <HAL_RCC_OscConfig+0x30e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001840:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001842:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8001844:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001846:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001848:	438b      	bics	r3, r1
 800184a:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800184c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800184e:	69a3      	ldr	r3, [r4, #24]
 8001850:	4381      	bics	r1, r0
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	430b      	orrs	r3, r1
 8001856:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001858:	6a23      	ldr	r3, [r4, #32]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d01b      	beq.n	8001896 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185e:	220c      	movs	r2, #12
 8001860:	4d65      	ldr	r5, [pc, #404]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001862:	6869      	ldr	r1, [r5, #4]
 8001864:	400a      	ands	r2, r1
 8001866:	2a08      	cmp	r2, #8
 8001868:	d100      	bne.n	800186c <HAL_RCC_OscConfig+0x1a0>
 800186a:	e100      	b.n	8001a6e <HAL_RCC_OscConfig+0x3a2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800186c:	2b02      	cmp	r3, #2
 800186e:	d100      	bne.n	8001872 <HAL_RCC_OscConfig+0x1a6>
 8001870:	e119      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	4a64      	ldr	r2, [pc, #400]	; (8001a08 <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001878:	4013      	ands	r3, r2
 800187a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800187c:	f7ff fc54 	bl	8001128 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001880:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 8001882:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	e004      	b.n	8001890 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fc4f 	bl	8001128 <HAL_GetTick>
 800188a:	1b80      	subs	r0, r0, r6
 800188c:	2802      	cmp	r0, #2
 800188e:	d85d      	bhi.n	800194c <HAL_RCC_OscConfig+0x280>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	4223      	tst	r3, r4
 8001894:	d1f7      	bne.n	8001886 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }

  return HAL_OK;
 8001896:	2000      	movs	r0, #0
 8001898:	e00b      	b.n	80018b2 <HAL_RCC_OscConfig+0x1e6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800189a:	684a      	ldr	r2, [r1, #4]
 800189c:	03d2      	lsls	r2, r2, #15
 800189e:	d500      	bpl.n	80018a2 <HAL_RCC_OscConfig+0x1d6>
 80018a0:	e75d      	b.n	800175e <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4a55      	ldr	r2, [pc, #340]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	0792      	lsls	r2, r2, #30
 80018a8:	d51b      	bpl.n	80018e2 <HAL_RCC_OscConfig+0x216>
 80018aa:	68e2      	ldr	r2, [r4, #12]
 80018ac:	2a01      	cmp	r2, #1
 80018ae:	d018      	beq.n	80018e2 <HAL_RCC_OscConfig+0x216>
        return HAL_ERROR;
 80018b0:	2001      	movs	r0, #1
}
 80018b2:	b003      	add	sp, #12
 80018b4:	bc0c      	pop	{r2, r3}
 80018b6:	4690      	mov	r8, r2
 80018b8:	4699      	mov	r9, r3
 80018ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80018bc:	2201      	movs	r2, #1
 80018be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80018c2:	4393      	bics	r3, r2
 80018c4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80018c6:	f7ff fc2f 	bl	8001128 <HAL_GetTick>
 80018ca:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	e004      	b.n	80018d8 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fc2b 	bl	8001128 <HAL_GetTick>
 80018d2:	1bc0      	subs	r0, r0, r7
 80018d4:	2802      	cmp	r0, #2
 80018d6:	d839      	bhi.n	800194c <HAL_RCC_OscConfig+0x280>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80018da:	421e      	tst	r6, r3
 80018dc:	d1f7      	bne.n	80018ce <HAL_RCC_OscConfig+0x202>
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	e7a3      	b.n	800182a <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	25f8      	movs	r5, #248	; 0xf8
 80018e4:	4844      	ldr	r0, [pc, #272]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	6922      	ldr	r2, [r4, #16]
 80018e8:	6801      	ldr	r1, [r0, #0]
 80018ea:	00d2      	lsls	r2, r2, #3
 80018ec:	43a9      	bics	r1, r5
 80018ee:	430a      	orrs	r2, r1
 80018f0:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f2:	071a      	lsls	r2, r3, #28
 80018f4:	d400      	bmi.n	80018f8 <HAL_RCC_OscConfig+0x22c>
 80018f6:	e753      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 80018f8:	e780      	b.n	80017fc <HAL_RCC_OscConfig+0x130>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fa:	4d3f      	ldr	r5, [pc, #252]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	4a3f      	ldr	r2, [pc, #252]	; (80019fc <HAL_RCC_OscConfig+0x330>)
 80018fe:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001900:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001902:	4013      	ands	r3, r2
 8001904:	602b      	str	r3, [r5, #0]
 8001906:	682b      	ldr	r3, [r5, #0]
 8001908:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <HAL_RCC_OscConfig+0x334>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190c:	4013      	ands	r3, r2
 800190e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001910:	f7ff fc0a 	bl	8001128 <HAL_GetTick>
 8001914:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	e004      	b.n	8001922 <HAL_RCC_OscConfig+0x256>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fc06 	bl	8001128 <HAL_GetTick>
 800191c:	1bc0      	subs	r0, r0, r7
 800191e:	2864      	cmp	r0, #100	; 0x64
 8001920:	d814      	bhi.n	800194c <HAL_RCC_OscConfig+0x280>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	682b      	ldr	r3, [r5, #0]
 8001924:	4233      	tst	r3, r6
 8001926:	d1f7      	bne.n	8001918 <HAL_RCC_OscConfig+0x24c>
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	e70b      	b.n	8001744 <HAL_RCC_OscConfig+0x78>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192c:	6833      	ldr	r3, [r6, #0]
 800192e:	433b      	orrs	r3, r7
 8001930:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001932:	f7ff fbf9 	bl	8001128 <HAL_GetTick>
 8001936:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e004      	b.n	8001944 <HAL_RCC_OscConfig+0x278>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff fbf5 	bl	8001128 <HAL_GetTick>
 800193e:	1b40      	subs	r0, r0, r5
 8001940:	2864      	cmp	r0, #100	; 0x64
 8001942:	d803      	bhi.n	800194c <HAL_RCC_OscConfig+0x280>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	6833      	ldr	r3, [r6, #0]
 8001946:	423b      	tst	r3, r7
 8001948:	d0f7      	beq.n	800193a <HAL_RCC_OscConfig+0x26e>
 800194a:	e743      	b.n	80017d4 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 800194c:	2003      	movs	r0, #3
 800194e:	e7b0      	b.n	80018b2 <HAL_RCC_OscConfig+0x1e6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001950:	6842      	ldr	r2, [r0, #4]
 8001952:	03d2      	lsls	r2, r2, #15
 8001954:	d400      	bmi.n	8001958 <HAL_RCC_OscConfig+0x28c>
 8001956:	e6d1      	b.n	80016fc <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	0392      	lsls	r2, r2, #14
 800195e:	d400      	bmi.n	8001962 <HAL_RCC_OscConfig+0x296>
 8001960:	e6f0      	b.n	8001744 <HAL_RCC_OscConfig+0x78>
 8001962:	6862      	ldr	r2, [r4, #4]
 8001964:	2a00      	cmp	r2, #0
 8001966:	d000      	beq.n	800196a <HAL_RCC_OscConfig+0x29e>
 8001968:	e6ec      	b.n	8001744 <HAL_RCC_OscConfig+0x78>
 800196a:	e7a1      	b.n	80018b0 <HAL_RCC_OscConfig+0x1e4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	2201      	movs	r2, #1
 800196e:	4e22      	ldr	r6, [pc, #136]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001972:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	4d25      	ldr	r5, [pc, #148]	; (8001a0c <HAL_RCC_OscConfig+0x340>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001976:	4393      	bics	r3, r2
 8001978:	6233      	str	r3, [r6, #32]
 800197a:	6a33      	ldr	r3, [r6, #32]
 800197c:	3203      	adds	r2, #3
 800197e:	4393      	bics	r3, r2
 8001980:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001982:	f7ff fbd1 	bl	8001128 <HAL_GetTick>
 8001986:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	e005      	b.n	8001996 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff fbcd 	bl	8001128 <HAL_GetTick>
 800198e:	464b      	mov	r3, r9
 8001990:	1ac0      	subs	r0, r0, r3
 8001992:	42a8      	cmp	r0, r5
 8001994:	d8da      	bhi.n	800194c <HAL_RCC_OscConfig+0x280>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001996:	6a33      	ldr	r3, [r6, #32]
 8001998:	421f      	tst	r7, r3
 800199a:	d1f6      	bne.n	800198a <HAL_RCC_OscConfig+0x2be>
    if(pwrclkchanged == SET)
 800199c:	4643      	mov	r3, r8
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d054      	beq.n	8001a4c <HAL_RCC_OscConfig+0x380>
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	e743      	b.n	800182e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80019a6:	2201      	movs	r2, #1
 80019a8:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80019ac:	4393      	bics	r3, r2
 80019ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019b0:	f7ff fbba 	bl	8001128 <HAL_GetTick>
 80019b4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e004      	b.n	80019c2 <HAL_RCC_OscConfig+0x2f6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff fbb6 	bl	8001128 <HAL_GetTick>
 80019bc:	1bc0      	subs	r0, r0, r7
 80019be:	2802      	cmp	r0, #2
 80019c0:	d8c4      	bhi.n	800194c <HAL_RCC_OscConfig+0x280>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	421e      	tst	r6, r3
 80019c6:	d1f7      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2ec>
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	e6e7      	b.n	800179c <HAL_RCC_OscConfig+0xd0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	025b      	lsls	r3, r3, #9
 80019d2:	6811      	ldr	r1, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e6a3      	b.n	8001722 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 80019da:	2204      	movs	r2, #4
 80019dc:	4d06      	ldr	r5, [pc, #24]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019de:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80019e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019e2:	4313      	orrs	r3, r2
 80019e4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80019e6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019e8:	3a03      	subs	r2, #3
 80019ea:	4393      	bics	r3, r2
 80019ec:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80019ee:	f7ff fb9b 	bl	8001128 <HAL_GetTick>
 80019f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019f4:	e011      	b.n	8001a1a <HAL_RCC_OscConfig+0x34e>
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	40021000 	.word	0x40021000
 80019fc:	fffeffff 	.word	0xfffeffff
 8001a00:	fffbffff 	.word	0xfffbffff
 8001a04:	40007000 	.word	0x40007000
 8001a08:	feffffff 	.word	0xfeffffff
 8001a0c:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a10:	f7ff fb8a 	bl	8001128 <HAL_GetTick>
 8001a14:	1bc0      	subs	r0, r0, r7
 8001a16:	2802      	cmp	r0, #2
 8001a18:	d898      	bhi.n	800194c <HAL_RCC_OscConfig+0x280>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a1c:	421e      	tst	r6, r3
 8001a1e:	d1f7      	bne.n	8001a10 <HAL_RCC_OscConfig+0x344>
 8001a20:	e71a      	b.n	8001858 <HAL_RCC_OscConfig+0x18c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a22:	4952      	ldr	r1, [pc, #328]	; (8001b6c <HAL_RCC_OscConfig+0x4a0>)
 8001a24:	6a0a      	ldr	r2, [r1, #32]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fb7d 	bl	8001128 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2e:	4f4f      	ldr	r7, [pc, #316]	; (8001b6c <HAL_RCC_OscConfig+0x4a0>)
      tickstart = HAL_GetTick();
 8001a30:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	4d4e      	ldr	r5, [pc, #312]	; (8001b70 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	e005      	b.n	8001a44 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fb76 	bl	8001128 <HAL_GetTick>
 8001a3c:	464b      	mov	r3, r9
 8001a3e:	1ac0      	subs	r0, r0, r3
 8001a40:	42a8      	cmp	r0, r5
 8001a42:	d883      	bhi.n	800194c <HAL_RCC_OscConfig+0x280>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	421e      	tst	r6, r3
 8001a48:	d0f6      	beq.n	8001a38 <HAL_RCC_OscConfig+0x36c>
 8001a4a:	e7a7      	b.n	800199c <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4a47      	ldr	r2, [pc, #284]	; (8001b6c <HAL_RCC_OscConfig+0x4a0>)
 8001a4e:	4949      	ldr	r1, [pc, #292]	; (8001b74 <HAL_RCC_OscConfig+0x4a8>)
 8001a50:	69d3      	ldr	r3, [r2, #28]
 8001a52:	400b      	ands	r3, r1
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	e6e9      	b.n	800182e <HAL_RCC_OscConfig+0x162>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_OscConfig+0x4a0>)
 8001a5e:	6a1a      	ldr	r2, [r3, #32]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	621a      	str	r2, [r3, #32]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	3903      	subs	r1, #3
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]
 8001a6c:	e7dd      	b.n	8001a2a <HAL_RCC_OscConfig+0x35e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d100      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3a8>
 8001a72:	e71d      	b.n	80018b0 <HAL_RCC_OscConfig+0x1e4>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001a76:	686a      	ldr	r2, [r5, #4]
        pll_config2 = RCC->CFGR2;
 8001a78:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	4013      	ands	r3, r2
        return HAL_ERROR;
 8001a80:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	42ab      	cmp	r3, r5
 8001a84:	d000      	beq.n	8001a88 <HAL_RCC_OscConfig+0x3bc>
 8001a86:	e714      	b.n	80018b2 <HAL_RCC_OscConfig+0x1e6>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a88:	230f      	movs	r3, #15
 8001a8a:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a8e:	428b      	cmp	r3, r1
 8001a90:	d000      	beq.n	8001a94 <HAL_RCC_OscConfig+0x3c8>
 8001a92:	e70e      	b.n	80018b2 <HAL_RCC_OscConfig+0x1e6>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a94:	20f0      	movs	r0, #240	; 0xf0
 8001a96:	0380      	lsls	r0, r0, #14
 8001a98:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a9c:	1a10      	subs	r0, r2, r0
 8001a9e:	1e42      	subs	r2, r0, #1
 8001aa0:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 8001aa2:	b2c0      	uxtb	r0, r0
 8001aa4:	e705      	b.n	80018b2 <HAL_RCC_OscConfig+0x1e6>
        __HAL_RCC_PLL_DISABLE();
 8001aa6:	682b      	ldr	r3, [r5, #0]
 8001aa8:	4a33      	ldr	r2, [pc, #204]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aaa:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4013      	ands	r3, r2
 8001aae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fb3a 	bl	8001128 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001ab6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	e005      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3fa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fb35 	bl	8001128 <HAL_GetTick>
 8001abe:	1bc0      	subs	r0, r0, r7
 8001ac0:	2802      	cmp	r0, #2
 8001ac2:	d900      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x3fa>
 8001ac4:	e742      	b.n	800194c <HAL_RCC_OscConfig+0x280>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac6:	682b      	ldr	r3, [r5, #0]
 8001ac8:	4233      	tst	r3, r6
 8001aca:	d1f6      	bne.n	8001aba <HAL_RCC_OscConfig+0x3ee>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001acc:	220f      	movs	r2, #15
 8001ace:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001ad0:	4393      	bics	r3, r2
 8001ad2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001ad8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001adc:	686a      	ldr	r2, [r5, #4]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	4926      	ldr	r1, [pc, #152]	; (8001b7c <HAL_RCC_OscConfig+0x4b0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae2:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	682a      	ldr	r2, [r5, #0]
 8001aee:	045b      	lsls	r3, r3, #17
 8001af0:	4313      	orrs	r3, r2
 8001af2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001af4:	f7ff fb18 	bl	8001128 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af8:	4d1c      	ldr	r5, [pc, #112]	; (8001b6c <HAL_RCC_OscConfig+0x4a0>)
        tickstart = HAL_GetTick();
 8001afa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	04a4      	lsls	r4, r4, #18
 8001afe:	e005      	b.n	8001b0c <HAL_RCC_OscConfig+0x440>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff fb12 	bl	8001128 <HAL_GetTick>
 8001b04:	1b80      	subs	r0, r0, r6
 8001b06:	2802      	cmp	r0, #2
 8001b08:	d900      	bls.n	8001b0c <HAL_RCC_OscConfig+0x440>
 8001b0a:	e71f      	b.n	800194c <HAL_RCC_OscConfig+0x280>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0c:	682b      	ldr	r3, [r5, #0]
 8001b0e:	4223      	tst	r3, r4
 8001b10:	d0f6      	beq.n	8001b00 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 8001b12:	2000      	movs	r0, #0
 8001b14:	e6cd      	b.n	80018b2 <HAL_RCC_OscConfig+0x1e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_RCC_OscConfig+0x4a0>)
 8001b1a:	02d2      	lsls	r2, r2, #11
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	0252      	lsls	r2, r2, #9
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e5f9      	b.n	8001722 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b2e:	2104      	movs	r1, #4
 8001b30:	4d0e      	ldr	r5, [pc, #56]	; (8001b6c <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b32:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b34:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b36:	430a      	orrs	r2, r1
 8001b38:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001b3a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001b40:	f7ff faf2 	bl	8001128 <HAL_GetTick>
 8001b44:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b46:	e005      	b.n	8001b54 <HAL_RCC_OscConfig+0x488>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b48:	f7ff faee 	bl	8001128 <HAL_GetTick>
 8001b4c:	1bc0      	subs	r0, r0, r7
 8001b4e:	2802      	cmp	r0, #2
 8001b50:	d900      	bls.n	8001b54 <HAL_RCC_OscConfig+0x488>
 8001b52:	e6fb      	b.n	800194c <HAL_RCC_OscConfig+0x280>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b54:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b56:	421e      	tst	r6, r3
 8001b58:	d0f6      	beq.n	8001b48 <HAL_RCC_OscConfig+0x47c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b5a:	21f8      	movs	r1, #248	; 0xf8
 8001b5c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b5e:	69a3      	ldr	r3, [r4, #24]
 8001b60:	438a      	bics	r2, r1
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	636b      	str	r3, [r5, #52]	; 0x34
 8001b68:	e676      	b.n	8001858 <HAL_RCC_OscConfig+0x18c>
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	00001388 	.word	0x00001388
 8001b74:	efffffff 	.word	0xefffffff
 8001b78:	feffffff 	.word	0xfeffffff
 8001b7c:	ffc2ffff 	.word	0xffc2ffff

08001b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	46ce      	mov	lr, r9
 8001b84:	4647      	mov	r7, r8
 8001b86:	b580      	push	{r7, lr}
 8001b88:	0004      	movs	r4, r0
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	000d      	movs	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d00d      	beq.n	8001bae <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b92:	2301      	movs	r3, #1
 8001b94:	494d      	ldr	r1, [pc, #308]	; (8001ccc <HAL_RCC_ClockConfig+0x14c>)
 8001b96:	680a      	ldr	r2, [r1, #0]
 8001b98:	401a      	ands	r2, r3
 8001b9a:	42aa      	cmp	r2, r5
 8001b9c:	d20d      	bcs.n	8001bba <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	680a      	ldr	r2, [r1, #0]
 8001ba0:	439a      	bics	r2, r3
 8001ba2:	432a      	orrs	r2, r5
 8001ba4:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	680a      	ldr	r2, [r1, #0]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	429d      	cmp	r5, r3
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 8001bae:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001bb0:	b009      	add	sp, #36	; 0x24
 8001bb2:	bc0c      	pop	{r2, r3}
 8001bb4:	4690      	mov	r8, r2
 8001bb6:	4699      	mov	r9, r3
 8001bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	079a      	lsls	r2, r3, #30
 8001bbe:	d50e      	bpl.n	8001bde <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	d505      	bpl.n	8001bd0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bc4:	22e0      	movs	r2, #224	; 0xe0
 8001bc6:	4942      	ldr	r1, [pc, #264]	; (8001cd0 <HAL_RCC_ClockConfig+0x150>)
 8001bc8:	00d2      	lsls	r2, r2, #3
 8001bca:	6848      	ldr	r0, [r1, #4]
 8001bcc:	4302      	orrs	r2, r0
 8001bce:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	20f0      	movs	r0, #240	; 0xf0
 8001bd2:	493f      	ldr	r1, [pc, #252]	; (8001cd0 <HAL_RCC_ClockConfig+0x150>)
 8001bd4:	684a      	ldr	r2, [r1, #4]
 8001bd6:	4382      	bics	r2, r0
 8001bd8:	68a0      	ldr	r0, [r4, #8]
 8001bda:	4302      	orrs	r2, r0
 8001bdc:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	07db      	lsls	r3, r3, #31
 8001be0:	d521      	bpl.n	8001c26 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_ClockConfig+0x150>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be8:	2a01      	cmp	r2, #1
 8001bea:	d067      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x13c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bec:	2a02      	cmp	r2, #2
 8001bee:	d060      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x132>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	079b      	lsls	r3, r3, #30
 8001bf2:	d5dc      	bpl.n	8001bae <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	4e36      	ldr	r6, [pc, #216]	; (8001cd0 <HAL_RCC_ClockConfig+0x150>)
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf8:	270c      	movs	r7, #12
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfa:	6873      	ldr	r3, [r6, #4]
 8001bfc:	438b      	bics	r3, r1
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c02:	f7ff fa91 	bl	8001128 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_RCC_ClockConfig+0x154>)
    tickstart = HAL_GetTick();
 8001c08:	4681      	mov	r9, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0a:	4698      	mov	r8, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0c:	e005      	b.n	8001c1a <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0e:	f7ff fa8b 	bl	8001128 <HAL_GetTick>
 8001c12:	464b      	mov	r3, r9
 8001c14:	1ac0      	subs	r0, r0, r3
 8001c16:	4540      	cmp	r0, r8
 8001c18:	d84e      	bhi.n	8001cb8 <HAL_RCC_ClockConfig+0x138>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	6872      	ldr	r2, [r6, #4]
 8001c1c:	6863      	ldr	r3, [r4, #4]
 8001c1e:	403a      	ands	r2, r7
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d1f3      	bne.n	8001c0e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c26:	2101      	movs	r1, #1
 8001c28:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <HAL_RCC_ClockConfig+0x14c>)
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	429d      	cmp	r5, r3
 8001c30:	d205      	bcs.n	8001c3e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	6813      	ldr	r3, [r2, #0]
 8001c34:	438b      	bics	r3, r1
 8001c36:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	4219      	tst	r1, r3
 8001c3c:	d1b7      	bne.n	8001bae <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	075b      	lsls	r3, r3, #29
 8001c42:	d506      	bpl.n	8001c52 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4a22      	ldr	r2, [pc, #136]	; (8001cd0 <HAL_RCC_ClockConfig+0x150>)
 8001c46:	4924      	ldr	r1, [pc, #144]	; (8001cd8 <HAL_RCC_ClockConfig+0x158>)
 8001c48:	6853      	ldr	r3, [r2, #4]
 8001c4a:	400b      	ands	r3, r1
 8001c4c:	68e1      	ldr	r1, [r4, #12]
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCC_ClockConfig+0x15c>)
 8001c54:	466a      	mov	r2, sp
 8001c56:	0018      	movs	r0, r3
 8001c58:	c870      	ldmia	r0!, {r4, r5, r6}
 8001c5a:	c270      	stmia	r2!, {r4, r5, r6}
 8001c5c:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c5e:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c60:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c62:	aa04      	add	r2, sp, #16
 8001c64:	0010      	movs	r0, r2
 8001c66:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001c68:	c070      	stmia	r0!, {r4, r5, r6}
 8001c6a:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001c6c:	4d18      	ldr	r5, [pc, #96]	; (8001cd0 <HAL_RCC_ClockConfig+0x150>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c6e:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c70:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001c72:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c74:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 8001c76:	4003      	ands	r3, r0
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d10b      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x114>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c7c:	3307      	adds	r3, #7
 8001c7e:	0c84      	lsrs	r4, r0, #18
 8001c80:	401c      	ands	r4, r3
 8001c82:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c84:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001c86:	400b      	ands	r3, r1
 8001c88:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c8a:	03c3      	lsls	r3, r0, #15
 8001c8c:	d419      	bmi.n	8001cc2 <HAL_RCC_ClockConfig+0x142>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c8e:	4814      	ldr	r0, [pc, #80]	; (8001ce0 <HAL_RCC_ClockConfig+0x160>)
 8001c90:	4360      	muls	r0, r4
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_ClockConfig+0x116>
      sysclockfreq = HSE_VALUE;
 8001c94:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_RCC_ClockConfig+0x150>)
 8001c98:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <HAL_RCC_ClockConfig+0x168>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	0f1b      	lsrs	r3, r3, #28
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
 8001ca2:	40d8      	lsrs	r0, r3
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_RCC_ClockConfig+0x16c>)
 8001ca6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff f9fb 	bl	80010a4 <HAL_InitTick>
  return HAL_OK;
 8001cae:	2000      	movs	r0, #0
 8001cb0:	e77e      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x30>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	d49e      	bmi.n	8001bf4 <HAL_RCC_ClockConfig+0x74>
 8001cb6:	e77a      	b.n	8001bae <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8001cb8:	2003      	movs	r0, #3
 8001cba:	e779      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x30>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbc:	039b      	lsls	r3, r3, #14
 8001cbe:	d499      	bmi.n	8001bf4 <HAL_RCC_ClockConfig+0x74>
 8001cc0:	e775      	b.n	8001bae <HAL_RCC_ClockConfig+0x2e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cc2:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <HAL_RCC_ClockConfig+0x164>)
 8001cc4:	f7fe fa20 	bl	8000108 <__udivsi3>
 8001cc8:	4360      	muls	r0, r4
 8001cca:	e7e4      	b.n	8001c96 <HAL_RCC_ClockConfig+0x116>
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	00001388 	.word	0x00001388
 8001cd8:	fffff8ff 	.word	0xfffff8ff
 8001cdc:	080028d0 	.word	0x080028d0
 8001ce0:	003d0900 	.word	0x003d0900
 8001ce4:	007a1200 	.word	0x007a1200
 8001ce8:	0800292c 	.word	0x0800292c
 8001cec:	20000018 	.word	0x20000018

08001cf0 <HAL_RCC_GetSysClockFreq>:
{
 8001cf0:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x58>)
{
 8001cf4:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	466a      	mov	r2, sp
 8001cfa:	c870      	ldmia	r0!, {r4, r5, r6}
 8001cfc:	c270      	stmia	r2!, {r4, r5, r6}
 8001cfe:	6800      	ldr	r0, [r0, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d00:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d02:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d04:	aa04      	add	r2, sp, #16
 8001d06:	0010      	movs	r0, r2
 8001d08:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001d0a:	c070      	stmia	r0!, {r4, r5, r6}
 8001d0c:	681b      	ldr	r3, [r3, #0]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d0e:	4669      	mov	r1, sp
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d10:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d12:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001d14:	480d      	ldr	r0, [pc, #52]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001d16:	6844      	ldr	r4, [r0, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	4023      	ands	r3, r4
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d10b      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x46>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d1e:	3307      	adds	r3, #7
 8001d20:	0ca5      	lsrs	r5, r4, #18
 8001d22:	401d      	ands	r5, r3
 8001d24:	5d4d      	ldrb	r5, [r1, r5]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d26:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001d28:	400b      	ands	r3, r1
 8001d2a:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d2c:	03e3      	lsls	r3, r4, #15
 8001d2e:	d405      	bmi.n	8001d3c <HAL_RCC_GetSysClockFreq+0x4c>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x60>)
 8001d32:	4368      	muls	r0, r5
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x48>
      sysclockfreq = HSE_VALUE;
 8001d36:	4807      	ldr	r0, [pc, #28]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d38:	b008      	add	sp, #32
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x64>)
 8001d3e:	f7fe f9e3 	bl	8000108 <__udivsi3>
 8001d42:	4368      	muls	r0, r5
 8001d44:	e7f8      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x48>
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	080028d0 	.word	0x080028d0
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	003d0900 	.word	0x003d0900
 8001d54:	007a1200 	.word	0x007a1200

08001d58 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	055b      	lsls	r3, r3, #21
 8001d60:	0f5b      	lsrs	r3, r3, #29
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	4a03      	ldr	r2, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d66:	6810      	ldr	r0, [r2, #0]
 8001d68:	40d8      	lsrs	r0, r3
}    
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	0800293c 	.word	0x0800293c
 8001d74:	20000018 	.word	0x20000018

08001d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	46ce      	mov	lr, r9
 8001d7c:	4647      	mov	r7, r8
 8001d7e:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d80:	6803      	ldr	r3, [r0, #0]
{
 8001d82:	b083      	sub	sp, #12
 8001d84:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d86:	03da      	lsls	r2, r3, #15
 8001d88:	d539      	bpl.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8a:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001d8c:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001d90:	0552      	lsls	r2, r2, #21
 8001d92:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001d94:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4211      	tst	r1, r2
 8001d98:	d108      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x34>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	69d9      	ldr	r1, [r3, #28]
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	61d9      	str	r1, [r3, #28]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	401a      	ands	r2, r3
 8001da4:	9201      	str	r2, [sp, #4]
 8001da6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	2680      	movs	r6, #128	; 0x80
 8001dae:	4d36      	ldr	r5, [pc, #216]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001db0:	0076      	lsls	r6, r6, #1
 8001db2:	682b      	ldr	r3, [r5, #0]
 8001db4:	4233      	tst	r3, r6
 8001db6:	d04c      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xda>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001db8:	21c0      	movs	r1, #192	; 0xc0
 8001dba:	4d32      	ldr	r5, [pc, #200]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001dbc:	0089      	lsls	r1, r1, #2
 8001dbe:	6a2a      	ldr	r2, [r5, #32]
 8001dc0:	400a      	ands	r2, r1
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dc2:	d044      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8001dc4:	6860      	ldr	r0, [r4, #4]
 8001dc6:	4001      	ands	r1, r0
 8001dc8:	428a      	cmp	r2, r1
 8001dca:	d00e      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dcc:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dce:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dd0:	6a2e      	ldr	r6, [r5, #32]
 8001dd2:	0252      	lsls	r2, r2, #9
 8001dd4:	4332      	orrs	r2, r6
 8001dd6:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd8:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dda:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x114>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ddc:	4e2c      	ldr	r6, [pc, #176]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dde:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001de0:	4032      	ands	r2, r6
 8001de2:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001de4:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001de6:	07cb      	lsls	r3, r1, #31
 8001de8:	d422      	bmi.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dea:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001dec:	4927      	ldr	r1, [pc, #156]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001dee:	6a13      	ldr	r3, [r2, #32]
 8001df0:	400b      	ands	r3, r1
 8001df2:	4303      	orrs	r3, r0
 8001df4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001df6:	4643      	mov	r3, r8
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d03a      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001dfc:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dfe:	07da      	lsls	r2, r3, #31
 8001e00:	d40e      	bmi.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e02:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e04:	069b      	lsls	r3, r3, #26
 8001e06:	d506      	bpl.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e08:	2110      	movs	r1, #16
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001e0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e0e:	438b      	bics	r3, r1
 8001e10:	68e1      	ldr	r1, [r4, #12]
 8001e12:	430b      	orrs	r3, r1
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001e16:	b003      	add	sp, #12
 8001e18:	bc0c      	pop	{r2, r3}
 8001e1a:	4690      	mov	r8, r2
 8001e1c:	4699      	mov	r9, r3
 8001e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e20:	2003      	movs	r0, #3
 8001e22:	4918      	ldr	r1, [pc, #96]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001e24:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001e26:	4382      	bics	r2, r0
 8001e28:	68a0      	ldr	r0, [r4, #8]
 8001e2a:	4302      	orrs	r2, r0
 8001e2c:	630a      	str	r2, [r1, #48]	; 0x30
 8001e2e:	e7e8      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        tickstart = HAL_GetTick();
 8001e30:	f7ff f97a 	bl	8001128 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
        tickstart = HAL_GetTick();
 8001e36:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	e004      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff f973 	bl	8001128 <HAL_GetTick>
 8001e42:	1bc0      	subs	r0, r0, r7
 8001e44:	4548      	cmp	r0, r9
 8001e46:	d81a      	bhi.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	6a2b      	ldr	r3, [r5, #32]
 8001e4a:	421e      	tst	r6, r3
 8001e4c:	d0f7      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8001e4e:	6860      	ldr	r0, [r4, #4]
 8001e50:	e7cb      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e52:	682b      	ldr	r3, [r5, #0]
 8001e54:	4333      	orrs	r3, r6
 8001e56:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001e58:	f7ff f966 	bl	8001128 <HAL_GetTick>
 8001e5c:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	e004      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0xf2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e60:	f7ff f962 	bl	8001128 <HAL_GetTick>
 8001e64:	1bc0      	subs	r0, r0, r7
 8001e66:	2864      	cmp	r0, #100	; 0x64
 8001e68:	d809      	bhi.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	682b      	ldr	r3, [r5, #0]
 8001e6c:	4233      	tst	r3, r6
 8001e6e:	d0f7      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e70:	e7a2      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e72:	69d3      	ldr	r3, [r2, #28]
 8001e74:	4908      	ldr	r1, [pc, #32]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e76:	400b      	ands	r3, r1
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	e7bf      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x86>
          return HAL_TIMEOUT;
 8001e7e:	2003      	movs	r0, #3
 8001e80:	e7c9      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	fffffcff 	.word	0xfffffcff
 8001e90:	fffeffff 	.word	0xfffeffff
 8001e94:	00001388 	.word	0x00001388
 8001e98:	efffffff 	.word	0xefffffff

08001e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9e:	4657      	mov	r7, sl
 8001ea0:	464e      	mov	r6, r9
 8001ea2:	4645      	mov	r5, r8
 8001ea4:	46de      	mov	lr, fp
 8001ea6:	b5e0      	push	{r5, r6, r7, lr}
 8001ea8:	001f      	movs	r7, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eaa:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8001eac:	0005      	movs	r5, r0
 8001eae:	b083      	sub	sp, #12
 8001eb0:	000e      	movs	r6, r1
 8001eb2:	0014      	movs	r4, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001eb4:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d006      	beq.n	8001ec8 <HAL_UART_Transmit+0x2c>
  }
}
 8001eba:	b003      	add	sp, #12
 8001ebc:	bc3c      	pop	{r2, r3, r4, r5}
 8001ebe:	4690      	mov	r8, r2
 8001ec0:	4699      	mov	r9, r3
 8001ec2:	46a2      	mov	sl, r4
 8001ec4:	46ab      	mov	fp, r5
 8001ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d100      	bne.n	8001ece <HAL_UART_Transmit+0x32>
 8001ecc:	e08d      	b.n	8001fea <HAL_UART_Transmit+0x14e>
      return  HAL_ERROR;
 8001ece:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001ed0:	2a00      	cmp	r2, #0
 8001ed2:	d0f2      	beq.n	8001eba <HAL_UART_Transmit+0x1e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	68aa      	ldr	r2, [r5, #8]
 8001ed8:	015b      	lsls	r3, r3, #5
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d100      	bne.n	8001ee0 <HAL_UART_Transmit+0x44>
 8001ede:	e07c      	b.n	8001fda <HAL_UART_Transmit+0x13e>
    __HAL_LOCK(huart);
 8001ee0:	2374      	movs	r3, #116	; 0x74
 8001ee2:	5cea      	ldrb	r2, [r5, r3]
    return HAL_BUSY;
 8001ee4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001ee6:	2a01      	cmp	r2, #1
 8001ee8:	d0e7      	beq.n	8001eba <HAL_UART_Transmit+0x1e>
 8001eea:	2201      	movs	r2, #1
 8001eec:	54ea      	strb	r2, [r5, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eee:	2200      	movs	r2, #0
 8001ef0:	330c      	adds	r3, #12
 8001ef2:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ef4:	3b5f      	subs	r3, #95	; 0x5f
 8001ef6:	67ab      	str	r3, [r5, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001ef8:	f7ff f916 	bl	8001128 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001efc:	2350      	movs	r3, #80	; 0x50
      pdata16bits = NULL;
 8001efe:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 8001f00:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 8001f02:	3302      	adds	r3, #2
 8001f04:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f06:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8001f08:	9201      	str	r2, [sp, #4]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f0a:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 8001f0c:	4682      	mov	sl, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f0e:	015b      	lsls	r3, r3, #5
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d100      	bne.n	8001f16 <HAL_UART_Transmit+0x7a>
 8001f14:	e0a4      	b.n	8002060 <HAL_UART_Transmit+0x1c4>
    __HAL_UNLOCK(huart);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2374      	movs	r3, #116	; 0x74
 8001f1a:	54ea      	strb	r2, [r5, r3]
    while (huart->TxXferCount > 0U)
 8001f1c:	3b22      	subs	r3, #34	; 0x22
 8001f1e:	5aeb      	ldrh	r3, [r5, r3]
 8001f20:	682a      	ldr	r2, [r5, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d017      	beq.n	8001f56 <HAL_UART_Transmit+0xba>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f26:	2304      	movs	r3, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f28:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f2a:	469b      	mov	fp, r3
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4699      	mov	r9, r3
 8001f32:	1c7b      	adds	r3, r7, #1
 8001f34:	d11f      	bne.n	8001f76 <HAL_UART_Transmit+0xda>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f36:	69d3      	ldr	r3, [r2, #28]
 8001f38:	421c      	tst	r4, r3
 8001f3a:	d0fc      	beq.n	8001f36 <HAL_UART_Transmit+0x9a>
      if (pdata8bits == NULL)
 8001f3c:	2e00      	cmp	r6, #0
 8001f3e:	d043      	beq.n	8001fc8 <HAL_UART_Transmit+0x12c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f40:	7833      	ldrb	r3, [r6, #0]
        pdata8bits++;
 8001f42:	3601      	adds	r6, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f44:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001f46:	2152      	movs	r1, #82	; 0x52
 8001f48:	5a6b      	ldrh	r3, [r5, r1]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	526b      	strh	r3, [r5, r1]
    while (huart->TxXferCount > 0U)
 8001f50:	5a6b      	ldrh	r3, [r5, r1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ea      	bne.n	8001f2c <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f56:	2340      	movs	r3, #64	; 0x40
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f58:	2680      	movs	r6, #128	; 0x80
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f5a:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f5c:	3b3c      	subs	r3, #60	; 0x3c
 8001f5e:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f60:	0136      	lsls	r6, r6, #4
 8001f62:	1c7b      	adds	r3, r7, #1
 8001f64:	d143      	bne.n	8001fee <HAL_UART_Transmit+0x152>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f66:	2140      	movs	r1, #64	; 0x40
 8001f68:	69d3      	ldr	r3, [r2, #28]
 8001f6a:	4219      	tst	r1, r3
 8001f6c:	d0fc      	beq.n	8001f68 <HAL_UART_Transmit+0xcc>
    huart->gState = HAL_UART_STATE_READY;
 8001f6e:	2320      	movs	r3, #32
    return HAL_OK;
 8001f70:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8001f72:	67ab      	str	r3, [r5, #120]	; 0x78
    return HAL_OK;
 8001f74:	e7a1      	b.n	8001eba <HAL_UART_Transmit+0x1e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f76:	69d3      	ldr	r3, [r2, #28]
 8001f78:	4023      	ands	r3, r4
 8001f7a:	4698      	mov	r8, r3
 8001f7c:	d1de      	bne.n	8001f3c <HAL_UART_Transmit+0xa0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7ff f8d3 	bl	8001128 <HAL_GetTick>
 8001f82:	4653      	mov	r3, sl
 8001f84:	1ac0      	subs	r0, r0, r3
 8001f86:	4287      	cmp	r7, r0
 8001f88:	d358      	bcc.n	800203c <HAL_UART_Transmit+0x1a0>
 8001f8a:	2f00      	cmp	r7, #0
 8001f8c:	d056      	beq.n	800203c <HAL_UART_Transmit+0x1a0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f8e:	4659      	mov	r1, fp
 8001f90:	682a      	ldr	r2, [r5, #0]
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	4219      	tst	r1, r3
 8001f96:	d0cc      	beq.n	8001f32 <HAL_UART_Transmit+0x96>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f98:	4649      	mov	r1, r9
 8001f9a:	69d3      	ldr	r3, [r2, #28]
 8001f9c:	420b      	tst	r3, r1
 8001f9e:	d0c8      	beq.n	8001f32 <HAL_UART_Transmit+0x96>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fa0:	6211      	str	r1, [r2, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	4932      	ldr	r1, [pc, #200]	; (8002070 <HAL_UART_Transmit+0x1d4>)
        return HAL_TIMEOUT;
 8001fa6:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fa8:	400b      	ands	r3, r1
 8001faa:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fac:	6893      	ldr	r3, [r2, #8]
 8001fae:	31a3      	adds	r1, #163	; 0xa3
 8001fb0:	31ff      	adds	r1, #255	; 0xff
 8001fb2:	438b      	bics	r3, r1
 8001fb4:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001fb6:	2320      	movs	r3, #32
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001fb8:	2280      	movs	r2, #128	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8001fba:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001fbc:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001fbe:	50ab      	str	r3, [r5, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001fc0:	4642      	mov	r2, r8
 8001fc2:	3354      	adds	r3, #84	; 0x54
 8001fc4:	54ea      	strb	r2, [r5, r3]
 8001fc6:	e778      	b.n	8001eba <HAL_UART_Transmit+0x1e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fc8:	9901      	ldr	r1, [sp, #4]
 8001fca:	880b      	ldrh	r3, [r1, #0]
 8001fcc:	05db      	lsls	r3, r3, #23
 8001fce:	0ddb      	lsrs	r3, r3, #23
 8001fd0:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8001fd2:	000b      	movs	r3, r1
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	e7b5      	b.n	8001f46 <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fda:	692b      	ldr	r3, [r5, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d000      	beq.n	8001fe2 <HAL_UART_Transmit+0x146>
 8001fe0:	e77e      	b.n	8001ee0 <HAL_UART_Transmit+0x44>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fe2:	4201      	tst	r1, r0
 8001fe4:	d100      	bne.n	8001fe8 <HAL_UART_Transmit+0x14c>
 8001fe6:	e77b      	b.n	8001ee0 <HAL_UART_Transmit+0x44>
 8001fe8:	e767      	b.n	8001eba <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e765      	b.n	8001eba <HAL_UART_Transmit+0x1e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fee:	4643      	mov	r3, r8
 8001ff0:	69d4      	ldr	r4, [r2, #28]
 8001ff2:	401c      	ands	r4, r3
 8001ff4:	d1bb      	bne.n	8001f6e <HAL_UART_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7ff f897 	bl	8001128 <HAL_GetTick>
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	1ac0      	subs	r0, r0, r3
 8001ffe:	4287      	cmp	r7, r0
 8002000:	d31c      	bcc.n	800203c <HAL_UART_Transmit+0x1a0>
 8002002:	2f00      	cmp	r7, #0
 8002004:	d01a      	beq.n	800203c <HAL_UART_Transmit+0x1a0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002006:	4649      	mov	r1, r9
 8002008:	682a      	ldr	r2, [r5, #0]
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	4219      	tst	r1, r3
 800200e:	d0a8      	beq.n	8001f62 <HAL_UART_Transmit+0xc6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002010:	69d3      	ldr	r3, [r2, #28]
 8002012:	4233      	tst	r3, r6
 8002014:	d0a5      	beq.n	8001f62 <HAL_UART_Transmit+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002016:	6216      	str	r6, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002018:	6813      	ldr	r3, [r2, #0]
 800201a:	4915      	ldr	r1, [pc, #84]	; (8002070 <HAL_UART_Transmit+0x1d4>)
      return HAL_TIMEOUT;
 800201c:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800201e:	400b      	ands	r3, r1
 8002020:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002022:	6893      	ldr	r3, [r2, #8]
 8002024:	31a3      	adds	r1, #163	; 0xa3
 8002026:	31ff      	adds	r1, #255	; 0xff
 8002028:	438b      	bics	r3, r1
 800202a:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800202c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800202e:	2280      	movs	r2, #128	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8002030:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002032:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002034:	50ab      	str	r3, [r5, r2]
          __HAL_UNLOCK(huart);
 8002036:	3354      	adds	r3, #84	; 0x54
 8002038:	54ec      	strb	r4, [r5, r3]
 800203a:	e73e      	b.n	8001eba <HAL_UART_Transmit+0x1e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800203c:	682b      	ldr	r3, [r5, #0]
 800203e:	490c      	ldr	r1, [pc, #48]	; (8002070 <HAL_UART_Transmit+0x1d4>)
 8002040:	681a      	ldr	r2, [r3, #0]
      return HAL_TIMEOUT;
 8002042:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002044:	400a      	ands	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	31a3      	adds	r1, #163	; 0xa3
 800204c:	31ff      	adds	r1, #255	; 0xff
 800204e:	438a      	bics	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002052:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8002054:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8002056:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002058:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800205a:	3354      	adds	r3, #84	; 0x54
 800205c:	54ea      	strb	r2, [r5, r3]
 800205e:	e72c      	b.n	8001eba <HAL_UART_Transmit+0x1e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002060:	692b      	ldr	r3, [r5, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d000      	beq.n	8002068 <HAL_UART_Transmit+0x1cc>
 8002066:	e756      	b.n	8001f16 <HAL_UART_Transmit+0x7a>
 8002068:	9601      	str	r6, [sp, #4]
      pdata8bits  = NULL;
 800206a:	2600      	movs	r6, #0
 800206c:	e753      	b.n	8001f16 <HAL_UART_Transmit+0x7a>
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	fffffe5f 	.word	0xfffffe5f

08002074 <HAL_UART_Receive>:
{
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	4657      	mov	r7, sl
 8002078:	464e      	mov	r6, r9
 800207a:	4645      	mov	r5, r8
 800207c:	46de      	mov	lr, fp
 800207e:	b5e0      	push	{r5, r6, r7, lr}
 8002080:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002082:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8002084:	0005      	movs	r5, r0
 8002086:	b083      	sub	sp, #12
 8002088:	000e      	movs	r6, r1
 800208a:	0014      	movs	r4, r2
    return HAL_BUSY;
 800208c:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800208e:	2b20      	cmp	r3, #32
 8002090:	d006      	beq.n	80020a0 <HAL_UART_Receive+0x2c>
}
 8002092:	b003      	add	sp, #12
 8002094:	bc3c      	pop	{r2, r3, r4, r5}
 8002096:	4690      	mov	r8, r2
 8002098:	4699      	mov	r9, r3
 800209a:	46a2      	mov	sl, r4
 800209c:	46ab      	mov	fp, r5
 800209e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 80020a0:	2900      	cmp	r1, #0
 80020a2:	d100      	bne.n	80020a6 <HAL_UART_Receive+0x32>
 80020a4:	e099      	b.n	80021da <HAL_UART_Receive+0x166>
      return  HAL_ERROR;
 80020a6:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	d0f2      	beq.n	8002092 <HAL_UART_Receive+0x1e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	68aa      	ldr	r2, [r5, #8]
 80020b0:	015b      	lsls	r3, r3, #5
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d100      	bne.n	80020b8 <HAL_UART_Receive+0x44>
 80020b6:	e088      	b.n	80021ca <HAL_UART_Receive+0x156>
    __HAL_LOCK(huart);
 80020b8:	2374      	movs	r3, #116	; 0x74
 80020ba:	5cea      	ldrb	r2, [r5, r3]
    return HAL_BUSY;
 80020bc:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80020be:	2a01      	cmp	r2, #1
 80020c0:	d0e7      	beq.n	8002092 <HAL_UART_Receive+0x1e>
 80020c2:	2201      	movs	r2, #1
 80020c4:	54ea      	strb	r2, [r5, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	4698      	mov	r8, r3
 80020ca:	4642      	mov	r2, r8
 80020cc:	3380      	adds	r3, #128	; 0x80
 80020ce:	50ea      	str	r2, [r5, r3]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020d0:	3b5e      	subs	r3, #94	; 0x5e
 80020d2:	67eb      	str	r3, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020d4:	662a      	str	r2, [r5, #96]	; 0x60
    tickstart = HAL_GetTick();
 80020d6:	f7ff f827 	bl	8001128 <HAL_GetTick>
    huart->RxXferSize  = Size;
 80020da:	2358      	movs	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80020dc:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 80020de:	52ec      	strh	r4, [r5, r3]
    huart->RxXferCount = Size;
 80020e0:	3302      	adds	r3, #2
 80020e2:	52ec      	strh	r4, [r5, r3]
    UART_MASK_COMPUTATION(huart);
 80020e4:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80020e6:	4683      	mov	fp, r0
    UART_MASK_COMPUTATION(huart);
 80020e8:	0152      	lsls	r2, r2, #5
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d100      	bne.n	80020f0 <HAL_UART_Receive+0x7c>
 80020ee:	e094      	b.n	800221a <HAL_UART_Receive+0x1a6>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d000      	beq.n	80020f6 <HAL_UART_Receive+0x82>
 80020f4:	e085      	b.n	8002202 <HAL_UART_Receive+0x18e>
 80020f6:	692b      	ldr	r3, [r5, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d100      	bne.n	80020fe <HAL_UART_Receive+0x8a>
 80020fc:	e087      	b.n	800220e <HAL_UART_Receive+0x19a>
 80020fe:	235c      	movs	r3, #92	; 0x5c
 8002100:	227f      	movs	r2, #127	; 0x7f
 8002102:	52ea      	strh	r2, [r5, r3]
 8002104:	3323      	adds	r3, #35	; 0x23
 8002106:	469a      	mov	sl, r3
      pdata16bits = NULL;
 8002108:	2300      	movs	r3, #0
 800210a:	9301      	str	r3, [sp, #4]
    __HAL_UNLOCK(huart);
 800210c:	2374      	movs	r3, #116	; 0x74
 800210e:	2200      	movs	r2, #0
 8002110:	54ea      	strb	r2, [r5, r3]
    while (huart->RxXferCount > 0U)
 8002112:	3b1a      	subs	r3, #26
 8002114:	5aeb      	ldrh	r3, [r5, r3]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d053      	beq.n	80021c2 <HAL_UART_Receive+0x14e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211a:	2420      	movs	r4, #32
 800211c:	682a      	ldr	r2, [r5, #0]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	4699      	mov	r9, r3
 8002124:	1c7b      	adds	r3, r7, #1
 8002126:	d113      	bne.n	8002150 <HAL_UART_Receive+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002128:	69d3      	ldr	r3, [r2, #28]
 800212a:	421c      	tst	r4, r3
 800212c:	d0fc      	beq.n	8002128 <HAL_UART_Receive+0xb4>
      if (pdata8bits == NULL)
 800212e:	2e00      	cmp	r6, #0
 8002130:	d038      	beq.n	80021a4 <HAL_UART_Receive+0x130>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002132:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8002134:	4652      	mov	r2, sl
 8002136:	4013      	ands	r3, r2
      huart->RxXferCount--;
 8002138:	225a      	movs	r2, #90	; 0x5a
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800213a:	7033      	strb	r3, [r6, #0]
      huart->RxXferCount--;
 800213c:	5aab      	ldrh	r3, [r5, r2]
        pdata8bits++;
 800213e:	3601      	adds	r6, #1
      huart->RxXferCount--;
 8002140:	3b01      	subs	r3, #1
 8002142:	b29b      	uxth	r3, r3
 8002144:	52ab      	strh	r3, [r5, r2]
    while (huart->RxXferCount > 0U)
 8002146:	5aab      	ldrh	r3, [r5, r2]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d03a      	beq.n	80021c2 <HAL_UART_Receive+0x14e>
 800214c:	682a      	ldr	r2, [r5, #0]
 800214e:	e7e6      	b.n	800211e <HAL_UART_Receive+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002150:	69d3      	ldr	r3, [r2, #28]
 8002152:	4023      	ands	r3, r4
 8002154:	4698      	mov	r8, r3
 8002156:	d1ea      	bne.n	800212e <HAL_UART_Receive+0xba>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002158:	f7fe ffe6 	bl	8001128 <HAL_GetTick>
 800215c:	465b      	mov	r3, fp
 800215e:	1ac0      	subs	r0, r0, r3
 8002160:	4287      	cmp	r7, r0
 8002162:	d33c      	bcc.n	80021de <HAL_UART_Receive+0x16a>
 8002164:	2f00      	cmp	r7, #0
 8002166:	d03a      	beq.n	80021de <HAL_UART_Receive+0x16a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002168:	2104      	movs	r1, #4
 800216a:	682a      	ldr	r2, [r5, #0]
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	4219      	tst	r1, r3
 8002170:	d0d8      	beq.n	8002124 <HAL_UART_Receive+0xb0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002172:	4649      	mov	r1, r9
 8002174:	69d3      	ldr	r3, [r2, #28]
 8002176:	420b      	tst	r3, r1
 8002178:	d0d4      	beq.n	8002124 <HAL_UART_Receive+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800217a:	6211      	str	r1, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800217c:	6813      	ldr	r3, [r2, #0]
 800217e:	492c      	ldr	r1, [pc, #176]	; (8002230 <HAL_UART_Receive+0x1bc>)
        return HAL_TIMEOUT;
 8002180:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002182:	400b      	ands	r3, r1
 8002184:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002186:	6893      	ldr	r3, [r2, #8]
 8002188:	31a3      	adds	r1, #163	; 0xa3
 800218a:	31ff      	adds	r1, #255	; 0xff
 800218c:	438b      	bics	r3, r1
 800218e:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002190:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002192:	2220      	movs	r2, #32
          huart->gState = HAL_UART_STATE_READY;
 8002194:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002196:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002198:	3360      	adds	r3, #96	; 0x60
 800219a:	50ea      	str	r2, [r5, r3]
          __HAL_UNLOCK(huart);
 800219c:	4642      	mov	r2, r8
 800219e:	3b0c      	subs	r3, #12
 80021a0:	54ea      	strb	r2, [r5, r3]
 80021a2:	e776      	b.n	8002092 <HAL_UART_Receive+0x1e>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80021a4:	4651      	mov	r1, sl
 80021a6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 80021a8:	400b      	ands	r3, r1
 80021aa:	9901      	ldr	r1, [sp, #4]
 80021ac:	800b      	strh	r3, [r1, #0]
        pdata16bits++;
 80021ae:	1c8b      	adds	r3, r1, #2
      huart->RxXferCount--;
 80021b0:	215a      	movs	r1, #90	; 0x5a
        pdata16bits++;
 80021b2:	9301      	str	r3, [sp, #4]
      huart->RxXferCount--;
 80021b4:	5a6b      	ldrh	r3, [r5, r1]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	526b      	strh	r3, [r5, r1]
    while (huart->RxXferCount > 0U)
 80021bc:	5a6b      	ldrh	r3, [r5, r1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ad      	bne.n	800211e <HAL_UART_Receive+0xaa>
    huart->RxState = HAL_UART_STATE_READY;
 80021c2:	2320      	movs	r3, #32
    return HAL_OK;
 80021c4:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 80021c6:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 80021c8:	e763      	b.n	8002092 <HAL_UART_Receive+0x1e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ca:	692b      	ldr	r3, [r5, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d000      	beq.n	80021d2 <HAL_UART_Receive+0x15e>
 80021d0:	e772      	b.n	80020b8 <HAL_UART_Receive+0x44>
      if ((((uint32_t)pData) & 1U) != 0U)
 80021d2:	4201      	tst	r1, r0
 80021d4:	d100      	bne.n	80021d8 <HAL_UART_Receive+0x164>
 80021d6:	e76f      	b.n	80020b8 <HAL_UART_Receive+0x44>
 80021d8:	e75b      	b.n	8002092 <HAL_UART_Receive+0x1e>
      return  HAL_ERROR;
 80021da:	2001      	movs	r0, #1
 80021dc:	e759      	b.n	8002092 <HAL_UART_Receive+0x1e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021de:	682b      	ldr	r3, [r5, #0]
 80021e0:	4913      	ldr	r1, [pc, #76]	; (8002230 <HAL_UART_Receive+0x1bc>)
 80021e2:	681a      	ldr	r2, [r3, #0]
        return HAL_TIMEOUT;
 80021e4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021e6:	400a      	ands	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	31a3      	adds	r1, #163	; 0xa3
 80021ee:	31ff      	adds	r1, #255	; 0xff
 80021f0:	438a      	bics	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80021f4:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80021f6:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 80021f8:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80021fa:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80021fc:	3354      	adds	r3, #84	; 0x54
 80021fe:	54ea      	strb	r2, [r5, r3]
 8002200:	e747      	b.n	8002092 <HAL_UART_Receive+0x1e>
    UART_MASK_COMPUTATION(huart);
 8002202:	235c      	movs	r3, #92	; 0x5c
 8002204:	4642      	mov	r2, r8
 8002206:	52ea      	strh	r2, [r5, r3]
 8002208:	2300      	movs	r3, #0
 800220a:	469a      	mov	sl, r3
 800220c:	e77c      	b.n	8002108 <HAL_UART_Receive+0x94>
 800220e:	235c      	movs	r3, #92	; 0x5c
 8002210:	22ff      	movs	r2, #255	; 0xff
 8002212:	52ea      	strh	r2, [r5, r3]
 8002214:	33a3      	adds	r3, #163	; 0xa3
 8002216:	469a      	mov	sl, r3
 8002218:	e776      	b.n	8002108 <HAL_UART_Receive+0x94>
 800221a:	692b      	ldr	r3, [r5, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f6      	bne.n	800220e <HAL_UART_Receive+0x19a>
 8002220:	225c      	movs	r2, #92	; 0x5c
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_UART_Receive+0x1c0>)
 8002224:	9601      	str	r6, [sp, #4]
 8002226:	52ab      	strh	r3, [r5, r2]
 8002228:	469a      	mov	sl, r3
      pdata8bits  = NULL;
 800222a:	2600      	movs	r6, #0
 800222c:	e76e      	b.n	800210c <HAL_UART_Receive+0x98>
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	fffffe5f 	.word	0xfffffe5f
 8002234:	000001ff 	.word	0x000001ff

08002238 <HAL_UART_TxCpltCallback>:
 8002238:	4770      	bx	lr
 800223a:	46c0      	nop			; (mov r8, r8)

0800223c <HAL_UART_ErrorCallback>:
 800223c:	4770      	bx	lr
 800223e:	46c0      	nop			; (mov r8, r8)

08002240 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	225a      	movs	r2, #90	; 0x5a
{
 8002244:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002246:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002248:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800224a:	3a08      	subs	r2, #8
 800224c:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800224e:	f7ff fff5 	bl	800223c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002252:	bd10      	pop	{r4, pc}

08002254 <HAL_UARTEx_RxEventCallback>:
}
 8002254:	4770      	bx	lr
 8002256:	46c0      	nop			; (mov r8, r8)

08002258 <HAL_UART_IRQHandler>:
{
 8002258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225a:	46ce      	mov	lr, r9
 800225c:	4647      	mov	r7, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800225e:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002260:	4d93      	ldr	r5, [pc, #588]	; (80024b0 <HAL_UART_IRQHandler+0x258>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002262:	69da      	ldr	r2, [r3, #28]
{
 8002264:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002266:	6819      	ldr	r1, [r3, #0]
{
 8002268:	b580      	push	{r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800226a:	6898      	ldr	r0, [r3, #8]
  if (errorflags == 0U)
 800226c:	422a      	tst	r2, r5
 800226e:	d100      	bne.n	8002272 <HAL_UART_IRQHandler+0x1a>
 8002270:	e071      	b.n	8002356 <HAL_UART_IRQHandler+0xfe>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002272:	2501      	movs	r5, #1
 8002274:	4028      	ands	r0, r5
 8002276:	d100      	bne.n	800227a <HAL_UART_IRQHandler+0x22>
 8002278:	e076      	b.n	8002368 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800227a:	2501      	movs	r5, #1
 800227c:	4215      	tst	r5, r2
 800227e:	d006      	beq.n	800228e <HAL_UART_IRQHandler+0x36>
 8002280:	05ce      	lsls	r6, r1, #23
 8002282:	d504      	bpl.n	800228e <HAL_UART_IRQHandler+0x36>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002284:	2780      	movs	r7, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002286:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002288:	59e6      	ldr	r6, [r4, r7]
 800228a:	4335      	orrs	r5, r6
 800228c:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800228e:	2502      	movs	r5, #2
 8002290:	4215      	tst	r5, r2
 8002292:	d100      	bne.n	8002296 <HAL_UART_IRQHandler+0x3e>
 8002294:	e08a      	b.n	80023ac <HAL_UART_IRQHandler+0x154>
 8002296:	2800      	cmp	r0, #0
 8002298:	d008      	beq.n	80022ac <HAL_UART_IRQHandler+0x54>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800229a:	2780      	movs	r7, #128	; 0x80
 800229c:	2604      	movs	r6, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800229e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022a0:	59e5      	ldr	r5, [r4, r7]
 80022a2:	4335      	orrs	r5, r6
 80022a4:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022a6:	4216      	tst	r6, r2
 80022a8:	d000      	beq.n	80022ac <HAL_UART_IRQHandler+0x54>
 80022aa:	e085      	b.n	80023b8 <HAL_UART_IRQHandler+0x160>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022ac:	0715      	lsls	r5, r2, #28
 80022ae:	d505      	bpl.n	80022bc <HAL_UART_IRQHandler+0x64>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022b0:	068d      	lsls	r5, r1, #26
 80022b2:	d500      	bpl.n	80022b6 <HAL_UART_IRQHandler+0x5e>
 80022b4:	e0c2      	b.n	800243c <HAL_UART_IRQHandler+0x1e4>
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d000      	beq.n	80022bc <HAL_UART_IRQHandler+0x64>
 80022ba:	e0bf      	b.n	800243c <HAL_UART_IRQHandler+0x1e4>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80022bc:	2080      	movs	r0, #128	; 0x80
 80022be:	0100      	lsls	r0, r0, #4
 80022c0:	4202      	tst	r2, r0
 80022c2:	d007      	beq.n	80022d4 <HAL_UART_IRQHandler+0x7c>
 80022c4:	014d      	lsls	r5, r1, #5
 80022c6:	d505      	bpl.n	80022d4 <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80022c8:	2580      	movs	r5, #128	; 0x80
 80022ca:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022cc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80022ce:	5960      	ldr	r0, [r4, r5]
 80022d0:	4330      	orrs	r0, r6
 80022d2:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022d4:	2080      	movs	r0, #128	; 0x80
 80022d6:	5820      	ldr	r0, [r4, r0]
 80022d8:	2800      	cmp	r0, #0
 80022da:	d038      	beq.n	800234e <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80022dc:	2020      	movs	r0, #32
 80022de:	4210      	tst	r0, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_UART_IRQHandler+0x9a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022e2:	4208      	tst	r0, r1
 80022e4:	d005      	beq.n	80022f2 <HAL_UART_IRQHandler+0x9a>
        if (huart->RxISR != NULL)
 80022e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_UART_IRQHandler+0x9a>
          huart->RxISR(huart);
 80022ec:	0020      	movs	r0, r4
 80022ee:	4790      	blx	r2
 80022f0:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80022f2:	2580      	movs	r5, #128	; 0x80
 80022f4:	5961      	ldr	r1, [r4, r5]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	0652      	lsls	r2, r2, #25
 80022fa:	d403      	bmi.n	8002304 <HAL_UART_IRQHandler+0xac>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80022fc:	2628      	movs	r6, #40	; 0x28
 80022fe:	400e      	ands	r6, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002300:	d100      	bne.n	8002304 <HAL_UART_IRQHandler+0xac>
 8002302:	e0af      	b.n	8002464 <HAL_UART_IRQHandler+0x20c>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	496b      	ldr	r1, [pc, #428]	; (80024b4 <HAL_UART_IRQHandler+0x25c>)
 8002308:	400a      	ands	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	3123      	adds	r1, #35	; 0x23
 8002310:	31ff      	adds	r1, #255	; 0xff
 8002312:	438a      	bics	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002316:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002318:	2a01      	cmp	r2, #1
 800231a:	d100      	bne.n	800231e <HAL_UART_IRQHandler+0xc6>
 800231c:	e099      	b.n	8002452 <HAL_UART_IRQHandler+0x1fa>
  huart->RxState = HAL_UART_STATE_READY;
 800231e:	2220      	movs	r2, #32
 8002320:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002322:	2200      	movs	r2, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002324:	2140      	movs	r1, #64	; 0x40
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002326:	6622      	str	r2, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8002328:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	4211      	tst	r1, r2
 800232e:	d100      	bne.n	8002332 <HAL_UART_IRQHandler+0xda>
 8002330:	e08b      	b.n	800244a <HAL_UART_IRQHandler+0x1f2>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002332:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002334:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002336:	438a      	bics	r2, r1
 8002338:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800233a:	2800      	cmp	r0, #0
 800233c:	d100      	bne.n	8002340 <HAL_UART_IRQHandler+0xe8>
 800233e:	e084      	b.n	800244a <HAL_UART_IRQHandler+0x1f2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002340:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_UART_IRQHandler+0x260>)
 8002342:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002344:	f7fe ff86 	bl	8001254 <HAL_DMA_Abort_IT>
 8002348:	2800      	cmp	r0, #0
 800234a:	d000      	beq.n	800234e <HAL_UART_IRQHandler+0xf6>
 800234c:	e086      	b.n	800245c <HAL_UART_IRQHandler+0x204>
}
 800234e:	bc0c      	pop	{r2, r3}
 8002350:	4690      	mov	r8, r2
 8002352:	4699      	mov	r9, r3
 8002354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002356:	2020      	movs	r0, #32
 8002358:	4210      	tst	r0, r2
 800235a:	d009      	beq.n	8002370 <HAL_UART_IRQHandler+0x118>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800235c:	4208      	tst	r0, r1
 800235e:	d007      	beq.n	8002370 <HAL_UART_IRQHandler+0x118>
      if (huart->RxISR != NULL)
 8002360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11f      	bne.n	80023a6 <HAL_UART_IRQHandler+0x14e>
 8002366:	e7f2      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002368:	4d54      	ldr	r5, [pc, #336]	; (80024bc <HAL_UART_IRQHandler+0x264>)
 800236a:	4229      	tst	r1, r5
 800236c:	d000      	beq.n	8002370 <HAL_UART_IRQHandler+0x118>
 800236e:	e784      	b.n	800227a <HAL_UART_IRQHandler+0x22>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002370:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002372:	2d01      	cmp	r5, #1
 8002374:	d028      	beq.n	80023c8 <HAL_UART_IRQHandler+0x170>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002376:	2080      	movs	r0, #128	; 0x80
 8002378:	4210      	tst	r0, r2
 800237a:	d10f      	bne.n	800239c <HAL_UART_IRQHandler+0x144>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800237c:	2040      	movs	r0, #64	; 0x40
 800237e:	4210      	tst	r0, r2
 8002380:	d0e5      	beq.n	800234e <HAL_UART_IRQHandler+0xf6>
 8002382:	4208      	tst	r0, r1
 8002384:	d0e3      	beq.n	800234e <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4382      	bics	r2, r0
 800238a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800238c:	2320      	movs	r3, #32
 800238e:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002390:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002392:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002394:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8002396:	f7ff ff4f 	bl	8002238 <HAL_UART_TxCpltCallback>
 800239a:	e7d8      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800239c:	4208      	tst	r0, r1
 800239e:	d0ed      	beq.n	800237c <HAL_UART_IRQHandler+0x124>
    if (huart->TxISR != NULL)
 80023a0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0d3      	beq.n	800234e <HAL_UART_IRQHandler+0xf6>
      huart->TxISR(huart);
 80023a6:	0020      	movs	r0, r4
 80023a8:	4798      	blx	r3
 80023aa:	e7d0      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023ac:	0755      	lsls	r5, r2, #29
 80023ae:	d400      	bmi.n	80023b2 <HAL_UART_IRQHandler+0x15a>
 80023b0:	e77c      	b.n	80022ac <HAL_UART_IRQHandler+0x54>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d100      	bne.n	80023b8 <HAL_UART_IRQHandler+0x160>
 80023b6:	e779      	b.n	80022ac <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023b8:	2504      	movs	r5, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023ba:	2680      	movs	r6, #128	; 0x80
 80023bc:	2702      	movs	r7, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023be:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023c0:	59a5      	ldr	r5, [r4, r6]
 80023c2:	433d      	orrs	r5, r7
 80023c4:	51a5      	str	r5, [r4, r6]
 80023c6:	e771      	b.n	80022ac <HAL_UART_IRQHandler+0x54>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80023c8:	2610      	movs	r6, #16
 80023ca:	4216      	tst	r6, r2
 80023cc:	d0d3      	beq.n	8002376 <HAL_UART_IRQHandler+0x11e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80023ce:	420e      	tst	r6, r1
 80023d0:	d0d1      	beq.n	8002376 <HAL_UART_IRQHandler+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d2:	2140      	movs	r1, #64	; 0x40
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80023d4:	621e      	str	r6, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	400a      	ands	r2, r1
 80023da:	d048      	beq.n	800246e <HAL_UART_IRQHandler+0x216>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023dc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80023de:	6802      	ldr	r2, [r0, #0]
 80023e0:	6852      	ldr	r2, [r2, #4]
 80023e2:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80023e4:	2a00      	cmp	r2, #0
 80023e6:	d0b2      	beq.n	800234e <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80023e8:	2758      	movs	r7, #88	; 0x58
 80023ea:	46b8      	mov	r8, r7
 80023ec:	5be7      	ldrh	r7, [r4, r7]
 80023ee:	46b9      	mov	r9, r7
 80023f0:	42ba      	cmp	r2, r7
 80023f2:	d2ac      	bcs.n	800234e <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 80023f4:	275a      	movs	r7, #90	; 0x5a
 80023f6:	53e2      	strh	r2, [r4, r7]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023f8:	6982      	ldr	r2, [r0, #24]
 80023fa:	2a20      	cmp	r2, #32
 80023fc:	d015      	beq.n	800242a <HAL_UART_IRQHandler+0x1d2>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4f2f      	ldr	r7, [pc, #188]	; (80024c0 <HAL_UART_IRQHandler+0x268>)
 8002402:	403a      	ands	r2, r7
 8002404:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	43aa      	bics	r2, r5
 800240a:	609a      	str	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	438a      	bics	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8002412:	2220      	movs	r2, #32
 8002414:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002416:	2200      	movs	r2, #0
 8002418:	6622      	str	r2, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	43b2      	bics	r2, r6
 800241e:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002420:	f7fe fef8 	bl	8001214 <HAL_DMA_Abort>
 8002424:	4643      	mov	r3, r8
 8002426:	5ae3      	ldrh	r3, [r4, r3]
 8002428:	4699      	mov	r9, r3
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800242a:	235a      	movs	r3, #90	; 0x5a
 800242c:	5ae1      	ldrh	r1, [r4, r3]
 800242e:	464b      	mov	r3, r9
 8002430:	1a59      	subs	r1, r3, r1
 8002432:	b289      	uxth	r1, r1
 8002434:	0020      	movs	r0, r4
 8002436:	f7ff ff0d 	bl	8002254 <HAL_UARTEx_RxEventCallback>
 800243a:	e788      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800243c:	2608      	movs	r6, #8
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800243e:	2580      	movs	r5, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002440:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002442:	5960      	ldr	r0, [r4, r5]
 8002444:	4330      	orrs	r0, r6
 8002446:	5160      	str	r0, [r4, r5]
 8002448:	e738      	b.n	80022bc <HAL_UART_IRQHandler+0x64>
            HAL_UART_ErrorCallback(huart);
 800244a:	0020      	movs	r0, r4
 800244c:	f7ff fef6 	bl	800223c <HAL_UART_ErrorCallback>
 8002450:	e77d      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	310f      	adds	r1, #15
 8002456:	438a      	bics	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e760      	b.n	800231e <HAL_UART_IRQHandler+0xc6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800245c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800245e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002460:	4798      	blx	r3
 8002462:	e774      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8002464:	0020      	movs	r0, r4
 8002466:	f7ff fee9 	bl	800223c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246a:	5166      	str	r6, [r4, r5]
 800246c:	e76f      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800246e:	205a      	movs	r0, #90	; 0x5a
 8002470:	5a21      	ldrh	r1, [r4, r0]
      if (  (huart->RxXferCount > 0U)
 8002472:	5a20      	ldrh	r0, [r4, r0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002474:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8002476:	2800      	cmp	r0, #0
 8002478:	d100      	bne.n	800247c <HAL_UART_IRQHandler+0x224>
 800247a:	e768      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800247c:	2058      	movs	r0, #88	; 0x58
 800247e:	5a20      	ldrh	r0, [r4, r0]
 8002480:	1a41      	subs	r1, r0, r1
 8002482:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8002484:	2900      	cmp	r1, #0
 8002486:	d100      	bne.n	800248a <HAL_UART_IRQHandler+0x232>
 8002488:	e761      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	4f09      	ldr	r7, [pc, #36]	; (80024b4 <HAL_UART_IRQHandler+0x25c>)
 800248e:	4038      	ands	r0, r7
 8002490:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002492:	6898      	ldr	r0, [r3, #8]
 8002494:	43a8      	bics	r0, r5
 8002496:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8002498:	2020      	movs	r0, #32
 800249a:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800249c:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 800249e:	6662      	str	r2, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024a0:	681a      	ldr	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024a2:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024a4:	43b2      	bics	r2, r6
 80024a6:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024a8:	f7ff fed4 	bl	8002254 <HAL_UARTEx_RxEventCallback>
 80024ac:	e74f      	b.n	800234e <HAL_UART_IRQHandler+0xf6>
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	0000080f 	.word	0x0000080f
 80024b4:	fffffedf 	.word	0xfffffedf
 80024b8:	08002241 	.word	0x08002241
 80024bc:	04000120 	.word	0x04000120
 80024c0:	fffffeff 	.word	0xfffffeff

080024c4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80024c6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024c8:	07da      	lsls	r2, r3, #31
 80024ca:	d506      	bpl.n	80024da <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024cc:	6801      	ldr	r1, [r0, #0]
 80024ce:	4c28      	ldr	r4, [pc, #160]	; (8002570 <UART_AdvFeatureConfig+0xac>)
 80024d0:	684a      	ldr	r2, [r1, #4]
 80024d2:	4022      	ands	r2, r4
 80024d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80024d6:	4322      	orrs	r2, r4
 80024d8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024da:	079a      	lsls	r2, r3, #30
 80024dc:	d506      	bpl.n	80024ec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024de:	6801      	ldr	r1, [r0, #0]
 80024e0:	4c24      	ldr	r4, [pc, #144]	; (8002574 <UART_AdvFeatureConfig+0xb0>)
 80024e2:	684a      	ldr	r2, [r1, #4]
 80024e4:	4022      	ands	r2, r4
 80024e6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80024e8:	4322      	orrs	r2, r4
 80024ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024ec:	075a      	lsls	r2, r3, #29
 80024ee:	d506      	bpl.n	80024fe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024f0:	6801      	ldr	r1, [r0, #0]
 80024f2:	4c21      	ldr	r4, [pc, #132]	; (8002578 <UART_AdvFeatureConfig+0xb4>)
 80024f4:	684a      	ldr	r2, [r1, #4]
 80024f6:	4022      	ands	r2, r4
 80024f8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80024fa:	4322      	orrs	r2, r4
 80024fc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024fe:	071a      	lsls	r2, r3, #28
 8002500:	d506      	bpl.n	8002510 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002502:	6801      	ldr	r1, [r0, #0]
 8002504:	4c1d      	ldr	r4, [pc, #116]	; (800257c <UART_AdvFeatureConfig+0xb8>)
 8002506:	684a      	ldr	r2, [r1, #4]
 8002508:	4022      	ands	r2, r4
 800250a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800250c:	4322      	orrs	r2, r4
 800250e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002510:	06da      	lsls	r2, r3, #27
 8002512:	d506      	bpl.n	8002522 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002514:	6801      	ldr	r1, [r0, #0]
 8002516:	4c1a      	ldr	r4, [pc, #104]	; (8002580 <UART_AdvFeatureConfig+0xbc>)
 8002518:	688a      	ldr	r2, [r1, #8]
 800251a:	4022      	ands	r2, r4
 800251c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800251e:	4322      	orrs	r2, r4
 8002520:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002522:	069a      	lsls	r2, r3, #26
 8002524:	d506      	bpl.n	8002534 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002526:	6801      	ldr	r1, [r0, #0]
 8002528:	4c16      	ldr	r4, [pc, #88]	; (8002584 <UART_AdvFeatureConfig+0xc0>)
 800252a:	688a      	ldr	r2, [r1, #8]
 800252c:	4022      	ands	r2, r4
 800252e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002530:	4322      	orrs	r2, r4
 8002532:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002534:	065a      	lsls	r2, r3, #25
 8002536:	d50a      	bpl.n	800254e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002538:	6801      	ldr	r1, [r0, #0]
 800253a:	4d13      	ldr	r5, [pc, #76]	; (8002588 <UART_AdvFeatureConfig+0xc4>)
 800253c:	684a      	ldr	r2, [r1, #4]
 800253e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002540:	402a      	ands	r2, r5
 8002542:	4322      	orrs	r2, r4
 8002544:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	0352      	lsls	r2, r2, #13
 800254a:	4294      	cmp	r4, r2
 800254c:	d009      	beq.n	8002562 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800254e:	061b      	lsls	r3, r3, #24
 8002550:	d506      	bpl.n	8002560 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002552:	6802      	ldr	r2, [r0, #0]
 8002554:	490d      	ldr	r1, [pc, #52]	; (800258c <UART_AdvFeatureConfig+0xc8>)
 8002556:	6853      	ldr	r3, [r2, #4]
 8002558:	400b      	ands	r3, r1
 800255a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800255c:	430b      	orrs	r3, r1
 800255e:	6053      	str	r3, [r2, #4]
}
 8002560:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002562:	684a      	ldr	r2, [r1, #4]
 8002564:	4c0a      	ldr	r4, [pc, #40]	; (8002590 <UART_AdvFeatureConfig+0xcc>)
 8002566:	4022      	ands	r2, r4
 8002568:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800256a:	4322      	orrs	r2, r4
 800256c:	604a      	str	r2, [r1, #4]
 800256e:	e7ee      	b.n	800254e <UART_AdvFeatureConfig+0x8a>
 8002570:	fffdffff 	.word	0xfffdffff
 8002574:	fffeffff 	.word	0xfffeffff
 8002578:	fffbffff 	.word	0xfffbffff
 800257c:	ffff7fff 	.word	0xffff7fff
 8002580:	ffffefff 	.word	0xffffefff
 8002584:	ffffdfff 	.word	0xffffdfff
 8002588:	ffefffff 	.word	0xffefffff
 800258c:	fff7ffff 	.word	0xfff7ffff
 8002590:	ff9fffff 	.word	0xff9fffff

08002594 <UART_CheckIdleState>:
{
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002596:	2200      	movs	r2, #0
 8002598:	2380      	movs	r3, #128	; 0x80
{
 800259a:	46ce      	mov	lr, r9
 800259c:	4647      	mov	r7, r8
 800259e:	0005      	movs	r5, r0
 80025a0:	b580      	push	{r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a2:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80025a4:	f7fe fdc0 	bl	8001128 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025a8:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80025aa:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	0712      	lsls	r2, r2, #28
 80025b0:	d40e      	bmi.n	80025d0 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	0752      	lsls	r2, r2, #29
 80025b6:	d436      	bmi.n	8002626 <UART_CheckIdleState+0x92>
  huart->gState = HAL_UART_STATE_READY;
 80025b8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80025ba:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 80025bc:	67ab      	str	r3, [r5, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80025be:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c0:	2300      	movs	r3, #0
  __HAL_UNLOCK(huart);
 80025c2:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c4:	662b      	str	r3, [r5, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80025c6:	54ab      	strb	r3, [r5, r2]
}
 80025c8:	bc0c      	pop	{r2, r3}
 80025ca:	4690      	mov	r8, r2
 80025cc:	4699      	mov	r9, r3
 80025ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d0:	4a29      	ldr	r2, [pc, #164]	; (8002678 <UART_CheckIdleState+0xe4>)
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d2:	2780      	movs	r7, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d4:	4690      	mov	r8, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025d6:	2204      	movs	r2, #4
 80025d8:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025da:	03bf      	lsls	r7, r7, #14
 80025dc:	69dc      	ldr	r4, [r3, #28]
 80025de:	403c      	ands	r4, r7
 80025e0:	d1e7      	bne.n	80025b2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e2:	f7fe fda1 	bl	8001128 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025e6:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e8:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ea:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ec:	4540      	cmp	r0, r8
 80025ee:	d833      	bhi.n	8002658 <UART_CheckIdleState+0xc4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025f0:	4649      	mov	r1, r9
 80025f2:	4211      	tst	r1, r2
 80025f4:	d0f2      	beq.n	80025dc <UART_CheckIdleState+0x48>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	69d9      	ldr	r1, [r3, #28]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	4211      	tst	r1, r2
 80025fe:	d0ed      	beq.n	80025dc <UART_CheckIdleState+0x48>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002600:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	491d      	ldr	r1, [pc, #116]	; (800267c <UART_CheckIdleState+0xe8>)
      return HAL_TIMEOUT;
 8002606:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002608:	400a      	ands	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	31a3      	adds	r1, #163	; 0xa3
 8002610:	31ff      	adds	r1, #255	; 0xff
 8002612:	438a      	bics	r2, r1
 8002614:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002616:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002618:	2280      	movs	r2, #128	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 800261a:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800261c:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800261e:	50ab      	str	r3, [r5, r2]
          __HAL_UNLOCK(huart);
 8002620:	3354      	adds	r3, #84	; 0x54
 8002622:	54ec      	strb	r4, [r5, r3]
 8002624:	e7d0      	b.n	80025c8 <UART_CheckIdleState+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <UART_CheckIdleState+0xe4>)
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002628:	2780      	movs	r7, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	4690      	mov	r8, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800262c:	2204      	movs	r2, #4
 800262e:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002630:	03ff      	lsls	r7, r7, #15
 8002632:	69dc      	ldr	r4, [r3, #28]
 8002634:	403c      	ands	r4, r7
 8002636:	d1bf      	bne.n	80025b8 <UART_CheckIdleState+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002638:	f7fe fd76 	bl	8001128 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800263c:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263e:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002640:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002642:	4540      	cmp	r0, r8
 8002644:	d808      	bhi.n	8002658 <UART_CheckIdleState+0xc4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002646:	4649      	mov	r1, r9
 8002648:	4211      	tst	r1, r2
 800264a:	d0f2      	beq.n	8002632 <UART_CheckIdleState+0x9e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	69d9      	ldr	r1, [r3, #28]
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	4211      	tst	r1, r2
 8002654:	d0ed      	beq.n	8002632 <UART_CheckIdleState+0x9e>
 8002656:	e7d3      	b.n	8002600 <UART_CheckIdleState+0x6c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002658:	4908      	ldr	r1, [pc, #32]	; (800267c <UART_CheckIdleState+0xe8>)
      return HAL_TIMEOUT;
 800265a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800265c:	400a      	ands	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	31a3      	adds	r1, #163	; 0xa3
 8002664:	31ff      	adds	r1, #255	; 0xff
 8002666:	438a      	bics	r2, r1
 8002668:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800266a:	2320      	movs	r3, #32
 800266c:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800266e:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002670:	3354      	adds	r3, #84	; 0x54
 8002672:	54ec      	strb	r4, [r5, r3]
 8002674:	e7a8      	b.n	80025c8 <UART_CheckIdleState+0x34>
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	01ffffff 	.word	0x01ffffff
 800267c:	fffffe5f 	.word	0xfffffe5f

08002680 <HAL_UART_Init>:
{
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002684:	d05e      	beq.n	8002744 <HAL_UART_Init+0xc4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002688:	2b00      	cmp	r3, #0
 800268a:	d100      	bne.n	800268e <HAL_UART_Init+0xe>
 800268c:	e079      	b.n	8002782 <HAL_UART_Init+0x102>
  huart->gState = HAL_UART_STATE_BUSY;
 800268e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002690:	2101      	movs	r1, #1
 8002692:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002694:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002696:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002698:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800269a:	438b      	bics	r3, r1
 800269c:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800269e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026a0:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a2:	432b      	orrs	r3, r5
 80026a4:	6965      	ldr	r5, [r4, #20]
 80026a6:	69e1      	ldr	r1, [r4, #28]
 80026a8:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026aa:	4d49      	ldr	r5, [pc, #292]	; (80027d0 <HAL_UART_Init+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026ac:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ae:	4028      	ands	r0, r5
 80026b0:	4303      	orrs	r3, r0
 80026b2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b4:	6853      	ldr	r3, [r2, #4]
 80026b6:	4847      	ldr	r0, [pc, #284]	; (80027d4 <HAL_UART_Init+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 80026b8:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ba:	4003      	ands	r3, r0
 80026bc:	68e0      	ldr	r0, [r4, #12]
 80026be:	4303      	orrs	r3, r0
 80026c0:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80026c2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026c4:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80026c6:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026c8:	4d43      	ldr	r5, [pc, #268]	; (80027d8 <HAL_UART_Init+0x158>)
 80026ca:	4028      	ands	r0, r5
 80026cc:	4303      	orrs	r3, r0
 80026ce:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026d0:	4b42      	ldr	r3, [pc, #264]	; (80027dc <HAL_UART_Init+0x15c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d2:	2080      	movs	r0, #128	; 0x80
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d6:	2303      	movs	r3, #3
 80026d8:	4013      	ands	r3, r2
 80026da:	4a41      	ldr	r2, [pc, #260]	; (80027e0 <HAL_UART_Init+0x160>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026dc:	0200      	lsls	r0, r0, #8
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	4281      	cmp	r1, r0
 80026e2:	d031      	beq.n	8002748 <HAL_UART_Init+0xc8>
    switch (clocksource)
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d066      	beq.n	80027b6 <HAL_UART_Init+0x136>
 80026e8:	d950      	bls.n	800278c <HAL_UART_Init+0x10c>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d05e      	beq.n	80027ac <HAL_UART_Init+0x12c>
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d125      	bne.n	800273e <HAL_UART_Init+0xbe>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026f2:	6863      	ldr	r3, [r4, #4]
 80026f4:	6861      	ldr	r1, [r4, #4]
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	1818      	adds	r0, r3, r0
 80026fa:	f7fd fd05 	bl	8000108 <__udivsi3>
 80026fe:	0400      	lsls	r0, r0, #16
 8002700:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002702:	0002      	movs	r2, r0
 8002704:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <HAL_UART_Init+0x164>)
 8002706:	3a10      	subs	r2, #16
 8002708:	429a      	cmp	r2, r3
 800270a:	d818      	bhi.n	800273e <HAL_UART_Init+0xbe>
        huart->Instance->BRR = usartdiv;
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8002710:	2300      	movs	r3, #0
 8002712:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002714:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002718:	2b00      	cmp	r3, #0
 800271a:	d143      	bne.n	80027a4 <HAL_UART_Init+0x124>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	4932      	ldr	r1, [pc, #200]	; (80027e8 <HAL_UART_Init+0x168>)
 8002720:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002722:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002724:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002726:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002728:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	438a      	bics	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	3907      	subs	r1, #7
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002738:	f7ff ff2c 	bl	8002594 <UART_CheckIdleState>
 800273c:	e003      	b.n	8002746 <HAL_UART_Init+0xc6>
  huart->RxISR = NULL;
 800273e:	2300      	movs	r3, #0
 8002740:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002742:	66a3      	str	r3, [r4, #104]	; 0x68
    return HAL_ERROR;
 8002744:	2001      	movs	r0, #1
}
 8002746:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8002748:	2b02      	cmp	r3, #2
 800274a:	d032      	beq.n	80027b2 <HAL_UART_Init+0x132>
 800274c:	d93b      	bls.n	80027c6 <HAL_UART_Init+0x146>
 800274e:	2b04      	cmp	r3, #4
 8002750:	d033      	beq.n	80027ba <HAL_UART_Init+0x13a>
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	0252      	lsls	r2, r2, #9
 8002756:	2b08      	cmp	r3, #8
 8002758:	d1f1      	bne.n	800273e <HAL_UART_Init+0xbe>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800275a:	6863      	ldr	r3, [r4, #4]
 800275c:	0858      	lsrs	r0, r3, #1
 800275e:	0019      	movs	r1, r3
 8002760:	1880      	adds	r0, r0, r2
 8002762:	f7fd fcd1 	bl	8000108 <__udivsi3>
 8002766:	0403      	lsls	r3, r0, #16
 8002768:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800276a:	491e      	ldr	r1, [pc, #120]	; (80027e4 <HAL_UART_Init+0x164>)
 800276c:	3a10      	subs	r2, #16
 800276e:	428a      	cmp	r2, r1
 8002770:	d8e5      	bhi.n	800273e <HAL_UART_Init+0xbe>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002772:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_UART_Init+0x16c>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002774:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002776:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002778:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800277a:	6822      	ldr	r2, [r4, #0]
 800277c:	4318      	orrs	r0, r3
 800277e:	60d0      	str	r0, [r2, #12]
 8002780:	e7c6      	b.n	8002710 <HAL_UART_Init+0x90>
    huart->Lock = HAL_UNLOCKED;
 8002782:	2274      	movs	r2, #116	; 0x74
 8002784:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002786:	f7fe fc51 	bl	800102c <HAL_UART_MspInit>
 800278a:	e780      	b.n	800268e <HAL_UART_Init+0xe>
    switch (clocksource)
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1d6      	bne.n	800273e <HAL_UART_Init+0xbe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002790:	f7ff fae2 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002794:	2800      	cmp	r0, #0
 8002796:	d1ac      	bne.n	80026f2 <HAL_UART_Init+0x72>
  huart->RxISR = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800279c:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800279e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0bb      	beq.n	800271c <HAL_UART_Init+0x9c>
    UART_AdvFeatureConfig(huart);
 80027a4:	0020      	movs	r0, r4
 80027a6:	f7ff fe8d 	bl	80024c4 <UART_AdvFeatureConfig>
 80027aa:	e7b7      	b.n	800271c <HAL_UART_Init+0x9c>
        pclk = HAL_RCC_GetSysClockFreq();
 80027ac:	f7ff faa0 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 80027b0:	e7f0      	b.n	8002794 <HAL_UART_Init+0x114>
    switch (clocksource)
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_UART_Init+0x170>)
 80027b4:	e7d1      	b.n	800275a <HAL_UART_Init+0xda>
        pclk = (uint32_t) HSI_VALUE;
 80027b6:	480f      	ldr	r0, [pc, #60]	; (80027f4 <HAL_UART_Init+0x174>)
 80027b8:	e79b      	b.n	80026f2 <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetSysClockFreq();
 80027ba:	f7ff fa99 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80027be:	2800      	cmp	r0, #0
 80027c0:	d0a6      	beq.n	8002710 <HAL_UART_Init+0x90>
 80027c2:	0042      	lsls	r2, r0, #1
 80027c4:	e7c9      	b.n	800275a <HAL_UART_Init+0xda>
    switch (clocksource)
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1b9      	bne.n	800273e <HAL_UART_Init+0xbe>
        pclk = HAL_RCC_GetPCLK1Freq();
 80027ca:	f7ff fac5 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 80027ce:	e7f6      	b.n	80027be <HAL_UART_Init+0x13e>
 80027d0:	ffff69f3 	.word	0xffff69f3
 80027d4:	ffffcfff 	.word	0xffffcfff
 80027d8:	fffff4ff 	.word	0xfffff4ff
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08002944 	.word	0x08002944
 80027e4:	0000ffef 	.word	0x0000ffef
 80027e8:	fffff7ff 	.word	0xfffff7ff
 80027ec:	0000fff0 	.word	0x0000fff0
 80027f0:	00f42400 	.word	0x00f42400
 80027f4:	007a1200 	.word	0x007a1200

080027f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027fc:	480d      	ldr	r0, [pc, #52]	; (8002834 <LoopForever+0x6>)
  ldr r1, =_edata
 80027fe:	490e      	ldr	r1, [pc, #56]	; (8002838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <LoopForever+0xe>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002804:	e002      	b.n	800280c <LoopCopyDataInit>

08002806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002814:	4c0b      	ldr	r4, [pc, #44]	; (8002844 <LoopForever+0x16>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002818:	e001      	b.n	800281e <LoopFillZerobss>

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281c:	3204      	adds	r2, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002822:	f7fe fbc7 	bl	8000fb4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002826:	f000 f811 	bl	800284c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800282a:	f7fe fa4d 	bl	8000cc8 <main>

0800282e <LoopForever>:

LoopForever:
    b LoopForever
 800282e:	e7fe      	b.n	800282e <LoopForever>
  ldr   r0, =_estack
 8002830:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002838:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800283c:	08002950 	.word	0x08002950
  ldr r2, =_sbss
 8002840:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002844:	20000248 	.word	0x20000248

08002848 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC1_IRQHandler>
	...

0800284c <__libc_init_array>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	2600      	movs	r6, #0
 8002850:	4d0c      	ldr	r5, [pc, #48]	; (8002884 <__libc_init_array+0x38>)
 8002852:	4c0d      	ldr	r4, [pc, #52]	; (8002888 <__libc_init_array+0x3c>)
 8002854:	1b64      	subs	r4, r4, r5
 8002856:	10a4      	asrs	r4, r4, #2
 8002858:	42a6      	cmp	r6, r4
 800285a:	d109      	bne.n	8002870 <__libc_init_array+0x24>
 800285c:	2600      	movs	r6, #0
 800285e:	f000 f82b 	bl	80028b8 <_init>
 8002862:	4d0a      	ldr	r5, [pc, #40]	; (800288c <__libc_init_array+0x40>)
 8002864:	4c0a      	ldr	r4, [pc, #40]	; (8002890 <__libc_init_array+0x44>)
 8002866:	1b64      	subs	r4, r4, r5
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	42a6      	cmp	r6, r4
 800286c:	d105      	bne.n	800287a <__libc_init_array+0x2e>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	00b3      	lsls	r3, r6, #2
 8002872:	58eb      	ldr	r3, [r5, r3]
 8002874:	4798      	blx	r3
 8002876:	3601      	adds	r6, #1
 8002878:	e7ee      	b.n	8002858 <__libc_init_array+0xc>
 800287a:	00b3      	lsls	r3, r6, #2
 800287c:	58eb      	ldr	r3, [r5, r3]
 800287e:	4798      	blx	r3
 8002880:	3601      	adds	r6, #1
 8002882:	e7f2      	b.n	800286a <__libc_init_array+0x1e>
 8002884:	08002948 	.word	0x08002948
 8002888:	08002948 	.word	0x08002948
 800288c:	08002948 	.word	0x08002948
 8002890:	0800294c 	.word	0x0800294c

08002894 <memcpy>:
 8002894:	2300      	movs	r3, #0
 8002896:	b510      	push	{r4, lr}
 8002898:	429a      	cmp	r2, r3
 800289a:	d100      	bne.n	800289e <memcpy+0xa>
 800289c:	bd10      	pop	{r4, pc}
 800289e:	5ccc      	ldrb	r4, [r1, r3]
 80028a0:	54c4      	strb	r4, [r0, r3]
 80028a2:	3301      	adds	r3, #1
 80028a4:	e7f8      	b.n	8002898 <memcpy+0x4>

080028a6 <memset>:
 80028a6:	0003      	movs	r3, r0
 80028a8:	1882      	adds	r2, r0, r2
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d100      	bne.n	80028b0 <memset+0xa>
 80028ae:	4770      	bx	lr
 80028b0:	7019      	strb	r1, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	e7f9      	b.n	80028aa <memset+0x4>
	...

080028b8 <_init>:
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028be:	bc08      	pop	{r3}
 80028c0:	469e      	mov	lr, r3
 80028c2:	4770      	bx	lr

080028c4 <_fini>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr
